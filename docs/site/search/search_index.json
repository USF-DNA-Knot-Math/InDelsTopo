{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"InDelsTopo InDelsTopo is a Python package for studying the topological structure of sets of words , especially when their primary source of variation arises from insertions and deletions . It implements the Insertion Chain Complex introduced in Natasha Jonoska, Francisco Martinez-Figueroa, and Masahico Saito, The Insertion Chain Complex: A Topological Approach to the Structure of Word Sets , 2025. Overview The Insertion Chain Complex framework provides a topological structure on the relationships between words that differ by insertions and deletions. It was originally developed to model DNA sequence variation during double-strand break repair but can be applied to any setting where the structure of sets of words needs to be analyzed. InDelsTopo provides: Construction of Filtrations and Complexes over word sets Tools to compute homology , Euler characteristic curves , and persistent homology Optional integration with SageMath Methods to analyze and visualize the topological structure of word sets Installation Install via pip: pip install InDelsTopo For full functionality (e.g., integer homology over $\\mathbb{Z}$), install SageMath and run your notebooks in a SageMath kernel. Quick Start from InDelsTopo import Filtration, filtration_plot # Create a filtration from a small set of words F = Filtration() F.compute_d_skeleton(['a', 'b', 'ab', '', 'ba'], [1,2,3,4,5]) # Visualize the sublevel sets at different heights. F.get_graph(1) F.get_graph(2) F.get_graph(5) Main Concepts Concept Description Block Represents a combinatorial element generated by insertions. Chain Linear combination of blocks with integer coefficients. Complex Collection of blocks and faces forming a topological structure. Filtration Sequence of nested complexes indexed by a height function. For detailed examples, see the Jupyter Notebook Tutorial . Documentation Structure Reference : API documentation. Citation If you use InDelsTopo in academic work, please cite: Jonoska, N., Martinez-Figueroa, F., & Saito, M. The Insertion Chain Complex: A Topological Approach to the Structure of Word Sets. arXiv preprint arXiv:2509.12607 , 2025. Contributing Contributions, pull requests, and feedback are welcome! Please open an issue on the GitHub repository . License This project is licensed under the MIT License . See the LICENSE file for details. Acknowledgements This project was developed at the University of South Florida , in collaboration with Prof. Natasha Jonoska and Prof. Masahico Saito (University of South Florida), and insights from experimental data provided by Prof. Francesca Storici\u2019s lab (Georgia Tech). \u00a9 2025 University of South Florida","title":"Home"},{"location":"#indelstopo","text":"InDelsTopo is a Python package for studying the topological structure of sets of words , especially when their primary source of variation arises from insertions and deletions . It implements the Insertion Chain Complex introduced in Natasha Jonoska, Francisco Martinez-Figueroa, and Masahico Saito, The Insertion Chain Complex: A Topological Approach to the Structure of Word Sets , 2025.","title":"InDelsTopo"},{"location":"#overview","text":"The Insertion Chain Complex framework provides a topological structure on the relationships between words that differ by insertions and deletions. It was originally developed to model DNA sequence variation during double-strand break repair but can be applied to any setting where the structure of sets of words needs to be analyzed. InDelsTopo provides: Construction of Filtrations and Complexes over word sets Tools to compute homology , Euler characteristic curves , and persistent homology Optional integration with SageMath Methods to analyze and visualize the topological structure of word sets","title":"Overview"},{"location":"#installation","text":"Install via pip: pip install InDelsTopo For full functionality (e.g., integer homology over $\\mathbb{Z}$), install SageMath and run your notebooks in a SageMath kernel.","title":"Installation"},{"location":"#quick-start","text":"from InDelsTopo import Filtration, filtration_plot # Create a filtration from a small set of words F = Filtration() F.compute_d_skeleton(['a', 'b', 'ab', '', 'ba'], [1,2,3,4,5]) # Visualize the sublevel sets at different heights. F.get_graph(1) F.get_graph(2) F.get_graph(5)","title":"Quick Start"},{"location":"#main-concepts","text":"Concept Description Block Represents a combinatorial element generated by insertions. Chain Linear combination of blocks with integer coefficients. Complex Collection of blocks and faces forming a topological structure. Filtration Sequence of nested complexes indexed by a height function. For detailed examples, see the Jupyter Notebook Tutorial .","title":"Main Concepts"},{"location":"#documentation-structure","text":"Reference : API documentation.","title":"Documentation Structure"},{"location":"#citation","text":"If you use InDelsTopo in academic work, please cite: Jonoska, N., Martinez-Figueroa, F., & Saito, M. The Insertion Chain Complex: A Topological Approach to the Structure of Word Sets. arXiv preprint arXiv:2509.12607 , 2025.","title":"Citation"},{"location":"#contributing","text":"Contributions, pull requests, and feedback are welcome! Please open an issue on the GitHub repository .","title":"Contributing"},{"location":"#license","text":"This project is licensed under the MIT License . See the LICENSE file for details.","title":"License"},{"location":"#acknowledgements","text":"This project was developed at the University of South Florida , in collaboration with Prof. Natasha Jonoska and Prof. Masahico Saito (University of South Florida), and insights from experimental data provided by Prof. Francesca Storici\u2019s lab (Georgia Tech). \u00a9 2025 University of South Florida","title":"Acknowledgements"},{"location":"index_old/","text":"InDelsTopo A Python package to analyze topological properties of sets of words when their main source of variation are insertions and deletions, using the Insertion Chain Complex framework. Introduction InDelsTopo implements the Insertion Chain Complex framework (Jonoska, Martinez-Figueroa, and Saito, arXiv:2509.12607 ), originally developed to analyze variation in collections of DNA sequences following double-strand break repair. The package enables general analysis of word sets where insertions and deletions are the primary source of variation, using topological tools such as persistent homology and Euler characteristic curves . Tutorial A Jupyter notebook tutorial is provided in tutorials/ . Documentation","title":"InDelsTopo"},{"location":"index_old/#indelstopo","text":"A Python package to analyze topological properties of sets of words when their main source of variation are insertions and deletions, using the Insertion Chain Complex framework.","title":"InDelsTopo"},{"location":"index_old/#introduction","text":"InDelsTopo implements the Insertion Chain Complex framework (Jonoska, Martinez-Figueroa, and Saito, arXiv:2509.12607 ), originally developed to analyze variation in collections of DNA sequences following double-strand break repair. The package enables general analysis of word sets where insertions and deletions are the primary source of variation, using topological tools such as persistent homology and Euler characteristic curves .","title":"Introduction"},{"location":"index_old/#tutorial","text":"A Jupyter notebook tutorial is provided in tutorials/ .","title":"Tutorial"},{"location":"index_old/#documentation","text":"","title":"Documentation"},{"location":"reference/","text":"InDelsTopo API Reference InDelsTopo: A Python package to analyze topological properties of sets of words when their main source of variation are insertions and deletions, using the Insertion Chain Complex framework. __version__ = '0.1.0' module-attribute Alphabet Represents an alphabet of symbols used to build words. Each symbol in the alphabet is represented as a noncommutative SymPy symbol. For every letter, an associated \"edge\" symbol (or 1-block symbol) is also created. For example, the letter 'a' has a corresponding edge symbol '(1,a)'. Internally, these symbols are handled as elements of a noncommutative SymPy monoid, allowing symbolic manipulations of words as products. This class provides methods to: - Add individual letters. - Update the alphabet with multiple new letters. - Convert words (sequences of letters) into symbolic products of letters. Attributes: letters ( dict ) \u2013 Maps letter strings to their SymPy symbol representation. edges ( dict ) \u2013 Maps letter strings to their corresponding edge (1-block) symbols. letters_str ( list ) \u2013 List of letter strings currently in the alphabet. Source code in InDelsTopo/alphabet.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 class Alphabet : \"\"\" Represents an alphabet of symbols used to build words. Each symbol in the alphabet is represented as a noncommutative SymPy symbol. For every letter, an associated \"edge\" symbol (or 1-block symbol) is also created. For example, the letter 'a' has a corresponding edge symbol '(1,a)'. Internally, these symbols are handled as elements of a noncommutative SymPy monoid, allowing symbolic manipulations of words as products. This class provides methods to: - Add individual letters. - Update the alphabet with multiple new letters. - Convert words (sequences of letters) into symbolic products of letters. Attributes: letters (dict): Maps letter strings to their SymPy symbol representation. edges (dict): Maps letter strings to their corresponding edge (1-block) symbols. letters_str (list): List of letter strings currently in the alphabet. \"\"\" def __init__ ( self , letters_str = None ): \"\"\" Initialize an Alphabet with optional letters. Args: letters_str (list of str, optional): Initial letters for the alphabet. If None, an empty alphabet is created. Duplicate letters are removed. Side Effects: Initializes the following attributes: - letters (dict): Maps letter strings to SymPy symbols. - edges (dict): Maps letter strings to corresponding edge symbols. - letters_str (list): List of unique letter strings in the alphabet. \"\"\" letters = {} edges = {} letters_str = list ( set ( letters_str )) if letters_str is not None else [] for symbol in letters_str : letters [ symbol ] = sym . Symbol ( symbol , commutative = False ) edges [ symbol ] = sym . Symbol ( \"(1,_)\" . replace ( \"_\" , symbol ), commutative = False ) self . letters = letters self . _edges = edges self . letters_str = letters_str def get ( self , letter , dim = 0 ): \"\"\" Return the symbolic representation of a letter or its edge. Args: letter (str): The letter to retrieve. dim (int, optional): Dimension; 0 for the letter symbol, 1 for the edge symbol. Defaults to 0. Returns: SymPy.Symbol: The corresponding SymPy symbol. \"\"\" if dim == 0 : return self . letters [ letter ] if dim == 1 : return self . _edges [ letter ] raise ValueError ( \"Dimension dim must be 0 or 1.\" ) def add_letter ( self , symbol ): \"\"\" Add a new letter to the alphabet if it does not already exist. Args: symbol (str): The new letter to add. \"\"\" if symbol not in self . letters_str : self . letters_str . append ( symbol ) self . letters [ symbol ] = sym . Symbol ( symbol , commutative = False ) self . _edges [ symbol ] = sym . Symbol ( \"(1,_)\" . replace ( \"_\" , symbol ), commutative = False ) def update_letters ( self , letters_str ): \"\"\" Add multiple letters to the alphabet, ignoring duplicates. Args: letters_str (iterable of str): letters to add. \"\"\" new_letters = set ( letters_str ) . difference ( self . letters_str ) for symbol in new_letters : self . letters_str . append ( symbol ) self . letters [ symbol ] = sym . Symbol ( symbol , commutative = False ) self . _edges [ symbol ] = sym . Symbol ( \"(1,_)\" . replace ( \"_\" , symbol ), commutative = False ) def cast_word ( self , word , check_letters = True ): \"\"\" Convert a word (sequence of letters) into a symbolic product. Args: word (iterable of str): The word to convert, as a list of symbols or a string. check_letters (bool, optional): If True, updates the alphabet with any new letters found in the word. Defaults to True. Returns: sympy.Expr: SymPy expression of the word, using the symbols in this alphabet. \"\"\" if check_letters : self . update_letters ( word ) return sym . prod ([ self . letters [ symbol ] for symbol in word ], start = int ( 1 )) def __str__ ( self ): return \"Alphabet with letters: \" + str ( sorted ( self . letters_str )) def __repr__ ( self ): return self . __str__ () __init__ ( letters_str = None ) Initialize an Alphabet with optional letters. Parameters: letters_str ( list of str , default: None ) \u2013 Initial letters for the alphabet. If None, an empty alphabet is created. Duplicate letters are removed. Side Effects Initializes the following attributes: - letters (dict): Maps letter strings to SymPy symbols. - edges (dict): Maps letter strings to corresponding edge symbols. - letters_str (list): List of unique letter strings in the alphabet. Source code in InDelsTopo/alphabet.py 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 def __init__ ( self , letters_str = None ): \"\"\" Initialize an Alphabet with optional letters. Args: letters_str (list of str, optional): Initial letters for the alphabet. If None, an empty alphabet is created. Duplicate letters are removed. Side Effects: Initializes the following attributes: - letters (dict): Maps letter strings to SymPy symbols. - edges (dict): Maps letter strings to corresponding edge symbols. - letters_str (list): List of unique letter strings in the alphabet. \"\"\" letters = {} edges = {} letters_str = list ( set ( letters_str )) if letters_str is not None else [] for symbol in letters_str : letters [ symbol ] = sym . Symbol ( symbol , commutative = False ) edges [ symbol ] = sym . Symbol ( \"(1,_)\" . replace ( \"_\" , symbol ), commutative = False ) self . letters = letters self . _edges = edges self . letters_str = letters_str add_letter ( symbol ) Add a new letter to the alphabet if it does not already exist. Parameters: symbol ( str ) \u2013 The new letter to add. Source code in InDelsTopo/alphabet.py 72 73 74 75 76 77 78 79 80 81 82 83 84 def add_letter ( self , symbol ): \"\"\" Add a new letter to the alphabet if it does not already exist. Args: symbol (str): The new letter to add. \"\"\" if symbol not in self . letters_str : self . letters_str . append ( symbol ) self . letters [ symbol ] = sym . Symbol ( symbol , commutative = False ) self . _edges [ symbol ] = sym . Symbol ( \"(1,_)\" . replace ( \"_\" , symbol ), commutative = False ) cast_word ( word , check_letters = True ) Convert a word (sequence of letters) into a symbolic product. Parameters: word ( iterable of str ) \u2013 The word to convert, as a list of symbols or a string. check_letters ( bool , default: True ) \u2013 If True, updates the alphabet with any new letters found in the word. Defaults to True. Returns: \u2013 sympy.Expr: SymPy expression of the word, using the symbols in this alphabet. Source code in InDelsTopo/alphabet.py 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 def cast_word ( self , word , check_letters = True ): \"\"\" Convert a word (sequence of letters) into a symbolic product. Args: word (iterable of str): The word to convert, as a list of symbols or a string. check_letters (bool, optional): If True, updates the alphabet with any new letters found in the word. Defaults to True. Returns: sympy.Expr: SymPy expression of the word, using the symbols in this alphabet. \"\"\" if check_letters : self . update_letters ( word ) return sym . prod ([ self . letters [ symbol ] for symbol in word ], start = int ( 1 )) get ( letter , dim = 0 ) Return the symbolic representation of a letter or its edge. Parameters: letter ( str ) \u2013 The letter to retrieve. dim ( int , default: 0 ) \u2013 Dimension; 0 for the letter symbol, 1 for the edge symbol. Defaults to 0. Returns: \u2013 SymPy.Symbol: The corresponding SymPy symbol. Source code in InDelsTopo/alphabet.py 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 def get ( self , letter , dim = 0 ): \"\"\" Return the symbolic representation of a letter or its edge. Args: letter (str): The letter to retrieve. dim (int, optional): Dimension; 0 for the letter symbol, 1 for the edge symbol. Defaults to 0. Returns: SymPy.Symbol: The corresponding SymPy symbol. \"\"\" if dim == 0 : return self . letters [ letter ] if dim == 1 : return self . _edges [ letter ] raise ValueError ( \"Dimension dim must be 0 or 1.\" ) update_letters ( letters_str ) Add multiple letters to the alphabet, ignoring duplicates. Parameters: letters_str ( iterable of str ) \u2013 letters to add. Source code in InDelsTopo/alphabet.py 86 87 88 89 90 91 92 93 94 95 96 97 98 99 def update_letters ( self , letters_str ): \"\"\" Add multiple letters to the alphabet, ignoring duplicates. Args: letters_str (iterable of str): letters to add. \"\"\" new_letters = set ( letters_str ) . difference ( self . letters_str ) for symbol in new_letters : self . letters_str . append ( symbol ) self . letters [ symbol ] = sym . Symbol ( symbol , commutative = False ) self . _edges [ symbol ] = sym . Symbol ( \"(1,_)\" . replace ( \"_\" , symbol ), commutative = False ) Block Bases: ChainBlockBase Represents a Block in the Insertion Chain Complex. A Block can be a valid block or \"0\" if the provided data corresponds to an invalid block. It has the formal expression x_0(1,a_1)x_1...(1,a_m)x_m, where the a_i are single symbols from an alphabet, and the x_i are words over that alphabet (including possibly the empty word). Internally, blocks are stored as a list of factors x_0, ..., x_k and a list of edge symbols a_1, ..., a_k, represented as SymPy expressions and symbols. Blocks can be initialized from a string expression or directly via x_factors and edges. Attributes: dim ( int ) \u2013 Number of edges (dimension) of the block. max_word ( SymPy expression ) \u2013 Maximal word of the block. min_word ( SymPy expression ) \u2013 Minimal word of the block. Internal Attributes _x_factors (list of SymPy expressions or int): Factors of the block. _edges (list of SymPy symbols): Symbols forming the edges of the block. _alphabet (Alphabet): Alphabet used for letters in the block. _expression (SymPy expression): SymPy product representing the block. Source code in InDelsTopo/block.pyclass Block ( ChainBlockBase ): \"\"\"Represents a Block in the Insertion Chain Complex. A Block can be a valid block or \"0\" if the provided data corresponds to an invalid block. It has the formal expression x_0(1,a_1)x_1...(1,a_m)x_m, where the a_i are single symbols from an alphabet, and the x_i are words over that alphabet (including possibly the empty word). Internally, blocks are stored as a list of factors x_0, ..., x_k and a list of edge symbols a_1, ..., a_k, represented as SymPy expressions and symbols. Blocks can be initialized from a string expression or directly via x_factors and edges. Attributes: dim (int): Number of edges (dimension) of the block. max_word (SymPy expression): Maximal word of the block. min_word (SymPy expression): Minimal word of the block. Internal Attributes: _x_factors (list of SymPy expressions or int): Factors of the block. _edges (list of SymPy symbols): Symbols forming the edges of the block. _alphabet (Alphabet): Alphabet used for letters in the block. _expression (SymPy expression): SymPy product representing the block. \"\"\" def __init__ ( self , expression = None , alphabet = None , prod_symbol = None , * , x_factors = [ int ( 0 )], edges = None , ): \"\"\"Initializes a Block. A Block can be either a valid block or the zero block. It is internally represented by a list of factors `_x_factors` and a list of edge symbols `_edges`. The block can be initialized from: - A string `expression` in the form \"x_0(1,a_1)x_1...(1,a_m)x_m\" (handling powers '^' or '**' and product symbols '*', '.', or concatenation), - Directly from `_x_factors` and `_edges` lists, Args: expression (str, optional): String representation of the block. _alphabet (Alphabet, optional): Alphabet defining the letters. Defaults to an empty Alphabet. _prod_symbol (str, optional): Product symbol to use ('', '*', or '.'). Inferred from the expression if None. _x_factors (list of SymPy expressions or int, optional): Factors x_0, ..., x_k of the block. _edges (list of SymPy symbols, optional): Edge symbols a_1, ..., a_k corresponding to the block. \"\"\" super () . __init__ () # initialize base class attributes x_factors = [ int ( 0 )] if x_factors is None else x_factors edges = [] if edges is None else edges alphabet = Alphabet ([]) if alphabet is None else alphabet # Use expression if provided if isinstance ( expression , str ): if expression == \"1\" : x_factors = [ int ( 1 )] edges = [] prod_symbol = \"\" else : x_factors , edges , alphabet , prod_symbol = _block_str_constructor ( expression , alphabet , prod_symbol ) if len ( x_factors ) == 0 : self . _x_factors = [ int ( 0 )] self . _edges = [] self . dim = - 1 elif len ( x_factors ) - len ( edges ) != 1 : raise Exception ( \"x_factors must be one unit longer than edges.\" ) # Set attributes self . _x_factors = x_factors self . _edges = edges self . dim = len ( edges ) self . _prod_symbol = prod_symbol self . _alphabet = alphabet # Get canonical form self . _canonical_form () # Check is a valid block if not self . _is_valid_block (): self . _x_factors = [ int ( 0 )] self . _edges = [] self . dim = - 1 # Expression edges = [ self . _alphabet . get ( str ( a ), 1 ) for a in self . _edges ] + [ sym . sympify ( 1 )] self . _expression = sym . prod ( [ val for pair in zip ( self . _x_factors , edges ) for val in pair ] ) # Maximal and minimal words if self . dim < 0 : self . max_word = sym . sympify ( 0 ) self . min_word = sym . sympify ( 0 ) elif self . dim == 0 : self . max_word = self . _expression self . min_word = self . _expression else : self . max_word = self . get_vertex ( list ( range ( 1 , self . dim + 1 )), as_word = True ) self . min_word = self . get_vertex ([], as_word = True ) def _canonical_form ( self ): \"\"\"Gets the canonical form of the block by transforming each factor of the form '(1,a)a^r' into 'a^r(1,a)'.\"\"\" for k in range ( self . dim , 0 , - 1 ): factors = list ( sym . sympify ( self . _x_factors [ k ]) . as_coeff_mul ()[ 1 ]) try : first_factor = factors . pop ( 0 ) except IndexError : first_factor = sym . sympify ( 1 ) if first_factor . as_base_exp ()[ 0 ] == self . _edges [ k - 1 ]: self . _x_factors [ k - 1 ] = self . _x_factors [ k - 1 ] * first_factor self . _x_factors [ k ] = sym . Mul ( sym . prod ( factors )) def _is_valid_block ( self ): \"\"\"Check whether a block, already in canonical form, is valid.\"\"\" if self . dim > 0 : position_ones = [ i for i , s in enumerate ( self . _x_factors ) if s == sym . sympify ( 1 ) ] for k in position_ones : if 0 < k < self . dim and self . _edges [ k ] == self . _edges [ k - 1 ]: return False elif self . dim == 0 : if self . _x_factors [ 0 ] == int ( 0 ): return False return True def _to_chain ( self ): \"\"\"Convert the block to a Chain object. Useful to enable algebraic operations with chains. \"\"\" from InDelsTopo.chain import Chain # pylint: disable=import-outside-toplevel if self . dim >= 0 : return Chain ( dict_blocks = { self : 1 }) return Chain ( dict_blocks = {}) def get_face ( self , indices_plus , indices_minus ): \"\"\"Return the face \u03c3(indices_plus, indices_minus) of the block \u03c3. indices_plus and indices_minus are disjoint subsets of {1, ..., m}, where m is the dimension of the block. They must be given as lists of integers, and may be empty. The output is the block \u03c3(indices_plus, indices_minus), which is either a valid Block of dimension m \u2212 |indices_plus \u222a indices_minus| or the zero Block. Args: indices_plus (list of int): Indices in {1, ..., m} of edges (1, a_i) collapsed to a_i. indices_minus (list of int): Indices in {1,..., m} of edges (1, a_i) collapsed to 1. Returns: Block: The resulting face block \u03c3(indices_plus, indices_minus) if valid, or the zero Block, otherwise. \"\"\" indices_all = indices_plus + indices_minus if len ( set ( indices_plus ) . intersection ( indices_minus )) > 0 : raise ValueError ( \"indices_plus and indices_minus must be disjoint\" ) if len ( set ( indices_all ) . difference ( set ( range ( 1 , self . dim + 1 )))) > 0 : warnings . warn ( \"indices_plus or indices_minus contains elements outside of {1, ...\" + str ( self . dim ) + \"} which have been ignored\" ) new_x_factors = [ self . _x_factors [ 0 ]] new_edges = [] for i in range ( 1 , self . dim + 1 ): if i in indices_all : current_x_factor = new_x_factors [ - 1 ] if i in indices_plus : x = self . _edges [ i - 1 ] else : x = sym . sympify ( 1 ) new_x_factors [ - 1 ] = current_x_factor * x * self . _x_factors [ i ] else : new_edges . append ( self . _edges [ i - 1 ]) new_x_factors . append ( self . _x_factors [ i ]) return Block ( x_factors = new_x_factors , edges = new_edges , alphabet = self . _alphabet , prod_symbol = self . _prod_symbol , ) def get_upper_facets ( self ): \"\"\"Return the list of upper facets of the block. Each upper facet is obtained by collapsing a single edge (1, a_i) to a_i, for i = 1, ..., m, where m is the dimension of the block. Returns: list of Block: A list of Blocks representing the upper facets of the block. \"\"\" upper_facets = [ self . get_face ([ i ], []) for i in range ( 1 , self . dim + 1 )] return upper_facets def get_lower_facets ( self ): \"\"\"Return the list of lower facets of the block. Each lower facet is obtained by collapsing a single edge (1, a_i) to 1, for i = 1, ..., m, where m is the dimension of the block. Invalid blocks are excluded from the output. Returns: list of Block: A list of valid Blocks representing the lower facets of the block. \"\"\" lower_facets = [ self . get_face ([], [ i ]) for i in range ( 1 , self . dim + 1 )] lower_facets = [ C for C in lower_facets if C . dim >= 0 ] return lower_facets def get_all_facets ( self ): \"\"\"Return all facets of the block. Combines both the upper and lower facets of the block. Returns: list of Block: A list of Blocks representing all facets of the block. \"\"\" return self . get_upper_facets () + self . get_lower_facets () def get_all_faces ( self , include_self = False ): \"\"\"Return all faces of the block, ordered by dimension. Faces are obtained recursively by taking all facets of the block, then all facets of those facets, and so on, down to dimension 0. Args: include_self (bool, optional): If True, include the block itself in the returned list. Defaults to False. Returns: list of Block: A list of Blocks representing all faces, orted by increasing dimension. \"\"\" if include_self : all_faces = set ([ self ]) else : all_faces = set () current_faces = [ self ] for _ in range ( self . dim ): current_faces = [ facet for c in current_faces for facet in c . get_all_facets () ] all_faces = all_faces . union ( current_faces ) all_faces = list ( all_faces ) all_faces . sort ( key = lambda x : x . dim ) return all_faces def get_vertex ( self , indices , as_word = True ): \"\"\"Return the vertex v_I(\u03c3) of the block determined by a sequence of I = indices. The vertex is obtained by collapsing the edges (1,a_i) indexed by 'I' into a_i, and the remaining ones to 1. Returns the vertex as a 0-block, or as a SymPy expression if as_word=True. Args: indices (list of int): Indices in {1,..., dim(\u03c3)} as_word (bool, optional): If True, return the vertex as a SymPy expression (word). If False, return the corresponding Block. Defaults to True. Returns: Block or SymPy Expression: The resulting vertex as a Block or Sympy expression, depending on `as_word`. \"\"\" if len ( set ( indices ) . difference ( set ( range ( 1 , self . dim + 1 )))) > 0 : warnings . warn ( \"indices contains elements outside of {1, ...\" + str ( self . dim ) + \"} which have been ignored\" ) indices_minus = list ( set ( range ( 1 , self . dim + 1 )) . difference ( indices )) vertex = self . get_face ( indices , indices_minus ) if as_word : return vertex . get_expression () return vertex def get_all_vertices ( self , as_words = True ): \"\"\"Return all vertices of the block. Args: as_words (bool, optional): If True, return vertices as SymPy expressions (words). If False, return them as Block objects. Defaults to True. Returns: list of Block or SymPy Expression: All vertices of the block as Blocks or words, depending on `as_words`. \"\"\" vertices = set () all_indices = _powerset ( list ( range ( 1 , self . dim + 1 ))) for indices in all_indices : vertices . add ( self . get_vertex ( list ( indices ), as_words )) return list ( vertices ) def boundary ( self ): \"\"\"Computes the boundary of a block.\"\"\" from InDelsTopo.chain import Chain # pylint: disable=import-outside-toplevel result = Chain ( dict_blocks = {}) for i in range ( 1 , self . dim + 1 ): result += ( - 1 ) ** ( i + 1 ) * ( self . get_face ([ i ], []) - self . get_face ([], [ i ]) ) return result def _le_recursive ( self , other_block ): \"\"\"Recursively determine whether this block is a face of another block. This internal helper performs the recursive part of the face relation once trivial and extremal cases have been handled. It is not meant to be called directly\u2014use the operator form `A <= B` instead. Args: other_block (Block): The block to compare against. Returns: bool: True if `self` is a (possibly proper) face of `other_block`, False otherwise. \"\"\" # If same dimension, compare block equality if self . dim == other_block . dim : return self == other_block # Compare edges sequences pylint: disable=protected-access if not _is_subsequence ( self . _edges , other_block . _edges ): return False # Expand and compare the maximal words symbol by symbol word1 = self . max_word word2 = other_block . max_word word1_extended = [ symbol for symbol , times in _expand_symp_word ( word1 )[ 0 ] for i in range ( times ) ] word2_extended = [ symbol for symbol , times in _expand_symp_word ( word2 )[ 0 ] for i in range ( times ) ] if not _is_subsequence ( word1_extended , word2_extended ): return False # Recursive step # If maximal words are equal, descend through upper facets; # otherwise, through lower facets. if word1 == word2 : return any ( self . _le_recursive ( facet ) for facet in other_block . get_upper_facets () ) else : return any ( self . _le_recursive ( facet ) for facet in other_block . get_lower_facets () ) def __le__ ( self , other_block ): \"\"\" Determine whether this Block is a face (\u2264) of another Block. A Block `A` is considered less than or equal to another Block `B` if it represents a lower-dimensional face of `B`. \"\"\" # Make sure both are block instances if not isinstance ( other_block , Block ): return NotImplemented # \"Empty\" block is face of all blocks if self . dim == - 1 : return True # Compare dimensions if self . dim > other_block . dim : return False # Apply the comparison recursively return self . _le_recursive ( other_block ) def __lt__ ( self , other_block ): \"\"\"Return True if this Block is a proper face (<) of another Block.\"\"\" if not isinstance ( other_block , Block ): return NotImplemented if self . __eq__ ( other_block ): return False return self . __le__ ( other_block ) __init__ ( expression = None , alphabet = None , prod_symbol = None , * , x_factors = [ int ( 0 )], edges = None ) Initializes a Block. A Block can be either a valid block or the zero block. It is internally represented by a list of factors _x_factors and a list of edge symbols _edges . The block can be initialized from A string expression in the form \"x_0(1,a_1)x_1...(1,a_m)x_m\" (handling powers '^' or '* ' and product symbols ' ', '.', or concatenation), Directly from _x_factors and _edges lists, Parameters: expression ( str , default: None ) \u2013 String representation of the block. _alphabet ( Alphabet ) \u2013 Alphabet defining the letters. Defaults to an empty Alphabet. _prod_symbol ( str ) \u2013 Product symbol to use ('', '*', or '.'). Inferred from the expression if None. _x_factors ( list of SymPy expressions or int ) \u2013 Factors x_0, ..., x_k of the block. _edges ( list of SymPy symbols ) \u2013 Edge symbols a_1, ..., a_k corresponding to the block. Source code in InDelsTopo/block.py 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 def __init__ ( self , expression = None , alphabet = None , prod_symbol = None , * , x_factors = [ int ( 0 )], edges = None , ): \"\"\"Initializes a Block. A Block can be either a valid block or the zero block. It is internally represented by a list of factors `_x_factors` and a list of edge symbols `_edges`. The block can be initialized from: - A string `expression` in the form \"x_0(1,a_1)x_1...(1,a_m)x_m\" (handling powers '^' or '**' and product symbols '*', '.', or concatenation), - Directly from `_x_factors` and `_edges` lists, Args: expression (str, optional): String representation of the block. _alphabet (Alphabet, optional): Alphabet defining the letters. Defaults to an empty Alphabet. _prod_symbol (str, optional): Product symbol to use ('', '*', or '.'). Inferred from the expression if None. _x_factors (list of SymPy expressions or int, optional): Factors x_0, ..., x_k of the block. _edges (list of SymPy symbols, optional): Edge symbols a_1, ..., a_k corresponding to the block. \"\"\" super () . __init__ () # initialize base class attributes x_factors = [ int ( 0 )] if x_factors is None else x_factors edges = [] if edges is None else edges alphabet = Alphabet ([]) if alphabet is None else alphabet # Use expression if provided if isinstance ( expression , str ): if expression == \"1\" : x_factors = [ int ( 1 )] edges = [] prod_symbol = \"\" else : x_factors , edges , alphabet , prod_symbol = _block_str_constructor ( expression , alphabet , prod_symbol ) if len ( x_factors ) == 0 : self . _x_factors = [ int ( 0 )] self . _edges = [] self . dim = - 1 elif len ( x_factors ) - len ( edges ) != 1 : raise Exception ( \"x_factors must be one unit longer than edges.\" ) # Set attributes self . _x_factors = x_factors self . _edges = edges self . dim = len ( edges ) self . _prod_symbol = prod_symbol self . _alphabet = alphabet # Get canonical form self . _canonical_form () # Check is a valid block if not self . _is_valid_block (): self . _x_factors = [ int ( 0 )] self . _edges = [] self . dim = - 1 # Expression edges = [ self . _alphabet . get ( str ( a ), 1 ) for a in self . _edges ] + [ sym . sympify ( 1 )] self . _expression = sym . prod ( [ val for pair in zip ( self . _x_factors , edges ) for val in pair ] ) # Maximal and minimal words if self . dim < 0 : self . max_word = sym . sympify ( 0 ) self . min_word = sym . sympify ( 0 ) elif self . dim == 0 : self . max_word = self . _expression self . min_word = self . _expression else : self . max_word = self . get_vertex ( list ( range ( 1 , self . dim + 1 )), as_word = True ) self . min_word = self . get_vertex ([], as_word = True ) __le__ ( other_block ) Determine whether this Block is a face (\u2264) of another Block. A Block A is considered less than or equal to another Block B if it represents a lower-dimensional face of B . Source code in InDelsTopo/block.py 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 def __le__ ( self , other_block ): \"\"\" Determine whether this Block is a face (\u2264) of another Block. A Block `A` is considered less than or equal to another Block `B` if it represents a lower-dimensional face of `B`. \"\"\" # Make sure both are block instances if not isinstance ( other_block , Block ): return NotImplemented # \"Empty\" block is face of all blocks if self . dim == - 1 : return True # Compare dimensions if self . dim > other_block . dim : return False # Apply the comparison recursively return self . _le_recursive ( other_block ) __lt__ ( other_block ) Return True if this Block is a proper face (<) of another Block. Source code in InDelsTopo/block.py 531 532 533 534 535 536 537 def __lt__ ( self , other_block ): \"\"\"Return True if this Block is a proper face (<) of another Block.\"\"\" if not isinstance ( other_block , Block ): return NotImplemented if self . __eq__ ( other_block ): return False return self . __le__ ( other_block ) boundary () Computes the boundary of a block. Source code in InDelsTopo/block.py 448 449 450 451 452 453 454 455 456 457 def boundary ( self ): \"\"\"Computes the boundary of a block.\"\"\" from InDelsTopo.chain import Chain # pylint: disable=import-outside-toplevel result = Chain ( dict_blocks = {}) for i in range ( 1 , self . dim + 1 ): result += ( - 1 ) ** ( i + 1 ) * ( self . get_face ([ i ], []) - self . get_face ([], [ i ]) ) return result get_all_faces ( include_self = False ) Return all faces of the block, ordered by dimension. Faces are obtained recursively by taking all facets of the block, then all facets of those facets, and so on, down to dimension 0. Parameters: include_self ( bool , default: False ) \u2013 If True, include the block itself in the returned list. Defaults to False. Returns: \u2013 list of Block: A list of Blocks representing all faces, orted by increasing dimension. Source code in InDelsTopo/block.py 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 def get_all_faces ( self , include_self = False ): \"\"\"Return all faces of the block, ordered by dimension. Faces are obtained recursively by taking all facets of the block, then all facets of those facets, and so on, down to dimension 0. Args: include_self (bool, optional): If True, include the block itself in the returned list. Defaults to False. Returns: list of Block: A list of Blocks representing all faces, orted by increasing dimension. \"\"\" if include_self : all_faces = set ([ self ]) else : all_faces = set () current_faces = [ self ] for _ in range ( self . dim ): current_faces = [ facet for c in current_faces for facet in c . get_all_facets () ] all_faces = all_faces . union ( current_faces ) all_faces = list ( all_faces ) all_faces . sort ( key = lambda x : x . dim ) return all_faces get_all_facets () Return all facets of the block. Combines both the upper and lower facets of the block. Returns: \u2013 list of Block: A list of Blocks representing all facets of the block. Source code in InDelsTopo/block.py 363 364 365 366 367 368 369 370 def get_all_facets ( self ): \"\"\"Return all facets of the block. Combines both the upper and lower facets of the block. Returns: list of Block: A list of Blocks representing all facets of the block. \"\"\" return self . get_upper_facets () + self . get_lower_facets () get_all_vertices ( as_words = True ) Return all vertices of the block. Parameters: as_words ( bool , default: True ) \u2013 If True, return vertices as SymPy expressions (words). If False, return them as Block objects. Defaults to True. Returns: \u2013 list of Block or SymPy Expression: All vertices of the block as Blocks \u2013 or words, depending on as_words . Source code in InDelsTopo/block.py 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 def get_all_vertices ( self , as_words = True ): \"\"\"Return all vertices of the block. Args: as_words (bool, optional): If True, return vertices as SymPy expressions (words). If False, return them as Block objects. Defaults to True. Returns: list of Block or SymPy Expression: All vertices of the block as Blocks or words, depending on `as_words`. \"\"\" vertices = set () all_indices = _powerset ( list ( range ( 1 , self . dim + 1 ))) for indices in all_indices : vertices . add ( self . get_vertex ( list ( indices ), as_words )) return list ( vertices ) get_face ( indices_plus , indices_minus ) Return the face \u03c3(indices_plus, indices_minus) of the block \u03c3. indices_plus and indices_minus are disjoint subsets of {1, ..., m}, where m is the dimension of the block. They must be given as lists of integers, and may be empty. The output is the block \u03c3(indices_plus, indices_minus), which is either a valid Block of dimension m \u2212 |indices_plus \u222a indices_minus| or the zero Block. Parameters: indices_plus ( list of int ) \u2013 Indices in {1, ..., m} of edges (1, a_i) collapsed to a_i. indices_minus ( list of int ) \u2013 Indices in {1,..., m} of edges (1, a_i) collapsed to 1. Returns: Block \u2013 The resulting face block \u03c3(indices_plus, indices_minus) if valid, \u2013 or the zero Block, otherwise. Source code in InDelsTopo/block.py 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 def get_face ( self , indices_plus , indices_minus ): \"\"\"Return the face \u03c3(indices_plus, indices_minus) of the block \u03c3. indices_plus and indices_minus are disjoint subsets of {1, ..., m}, where m is the dimension of the block. They must be given as lists of integers, and may be empty. The output is the block \u03c3(indices_plus, indices_minus), which is either a valid Block of dimension m \u2212 |indices_plus \u222a indices_minus| or the zero Block. Args: indices_plus (list of int): Indices in {1, ..., m} of edges (1, a_i) collapsed to a_i. indices_minus (list of int): Indices in {1,..., m} of edges (1, a_i) collapsed to 1. Returns: Block: The resulting face block \u03c3(indices_plus, indices_minus) if valid, or the zero Block, otherwise. \"\"\" indices_all = indices_plus + indices_minus if len ( set ( indices_plus ) . intersection ( indices_minus )) > 0 : raise ValueError ( \"indices_plus and indices_minus must be disjoint\" ) if len ( set ( indices_all ) . difference ( set ( range ( 1 , self . dim + 1 )))) > 0 : warnings . warn ( \"indices_plus or indices_minus contains elements outside of {1, ...\" + str ( self . dim ) + \"} which have been ignored\" ) new_x_factors = [ self . _x_factors [ 0 ]] new_edges = [] for i in range ( 1 , self . dim + 1 ): if i in indices_all : current_x_factor = new_x_factors [ - 1 ] if i in indices_plus : x = self . _edges [ i - 1 ] else : x = sym . sympify ( 1 ) new_x_factors [ - 1 ] = current_x_factor * x * self . _x_factors [ i ] else : new_edges . append ( self . _edges [ i - 1 ]) new_x_factors . append ( self . _x_factors [ i ]) return Block ( x_factors = new_x_factors , edges = new_edges , alphabet = self . _alphabet , prod_symbol = self . _prod_symbol , ) get_lower_facets () Return the list of lower facets of the block. Each lower facet is obtained by collapsing a single edge (1, a_i) to 1, for i = 1, ..., m, where m is the dimension of the block. Invalid blocks are excluded from the output. Returns: \u2013 list of Block: A list of valid Blocks representing the lower facets of the block. Source code in InDelsTopo/block.py 349 350 351 352 353 354 355 356 357 358 359 360 361 def get_lower_facets ( self ): \"\"\"Return the list of lower facets of the block. Each lower facet is obtained by collapsing a single edge (1, a_i) to 1, for i = 1, ..., m, where m is the dimension of the block. Invalid blocks are excluded from the output. Returns: list of Block: A list of valid Blocks representing the lower facets of the block. \"\"\" lower_facets = [ self . get_face ([], [ i ]) for i in range ( 1 , self . dim + 1 )] lower_facets = [ C for C in lower_facets if C . dim >= 0 ] return lower_facets get_upper_facets () Return the list of upper facets of the block. Each upper facet is obtained by collapsing a single edge (1, a_i) to a_i, for i = 1, ..., m, where m is the dimension of the block. Returns: \u2013 list of Block: A list of Blocks representing the upper facets of the block. Source code in InDelsTopo/block.py 337 338 339 340 341 342 343 344 345 346 347 def get_upper_facets ( self ): \"\"\"Return the list of upper facets of the block. Each upper facet is obtained by collapsing a single edge (1, a_i) to a_i, for i = 1, ..., m, where m is the dimension of the block. Returns: list of Block: A list of Blocks representing the upper facets of the block. \"\"\" upper_facets = [ self . get_face ([ i ], []) for i in range ( 1 , self . dim + 1 )] return upper_facets get_vertex ( indices , as_word = True ) Return the vertex v_I(\u03c3) of the block determined by a sequence of I = indices. The vertex is obtained by collapsing the edges (1,a_i) indexed by 'I' into a_i, and the remaining ones to 1. Returns the vertex as a 0-block, or as a SymPy expression if as_word=True. Parameters: indices ( list of int ) \u2013 Indices in {1,..., dim(\u03c3)} as_word ( bool , default: True ) \u2013 If True, return the vertex as a SymPy expression (word). If False, return the corresponding Block. Defaults to True. Returns: \u2013 Block or SymPy Expression: The resulting vertex as a Block or Sympy expression, \u2013 depending on as_word . Source code in InDelsTopo/block.py 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 def get_vertex ( self , indices , as_word = True ): \"\"\"Return the vertex v_I(\u03c3) of the block determined by a sequence of I = indices. The vertex is obtained by collapsing the edges (1,a_i) indexed by 'I' into a_i, and the remaining ones to 1. Returns the vertex as a 0-block, or as a SymPy expression if as_word=True. Args: indices (list of int): Indices in {1,..., dim(\u03c3)} as_word (bool, optional): If True, return the vertex as a SymPy expression (word). If False, return the corresponding Block. Defaults to True. Returns: Block or SymPy Expression: The resulting vertex as a Block or Sympy expression, depending on `as_word`. \"\"\" if len ( set ( indices ) . difference ( set ( range ( 1 , self . dim + 1 )))) > 0 : warnings . warn ( \"indices contains elements outside of {1, ...\" + str ( self . dim ) + \"} which have been ignored\" ) indices_minus = list ( set ( range ( 1 , self . dim + 1 )) . difference ( indices )) vertex = self . get_face ( indices , indices_minus ) if as_word : return vertex . get_expression () return vertex Chain Bases: ChainBlockBase Represents a chain in the Insertion Chain Complex: a linear combination of valid blocks with integer coefficients. It can be initialized from a string expression, a list of coefficients and blocks, or a dictionary mapping blocks to coefficients. Supports algebraic operations (addition, subtraction, and scalar multiplication), equality checking, string and LaTeX representations, and computation of the boundary. Attributes: dim ( int ) \u2013 Maximum dimension among the blocks in the chain, or -1 if empty. Internal_attributes _expression(SymPy expression): represents the chain as a sum of block expressions. _alphabet (Alphabet): The Alphabet instance used for all blocks in the chain. _dict_blocks (dict): (for internal use only) dictionary mapping Block objects to integer coefficients. _prod_symbol (str): Either '', '*', or '.'. Source code in InDelsTopo/chain.pyclass Chain ( ChainBlockBase ): \"\"\" Represents a chain in the Insertion Chain Complex: a linear combination of valid blocks with integer coefficients. It can be initialized from a string expression, a list of coefficients and blocks, or a dictionary mapping blocks to coefficients. Supports algebraic operations (addition, subtraction, and scalar multiplication), equality checking, string and LaTeX representations, and computation of the boundary. Attributes: dim (int): Maximum dimension among the blocks in the chain, or -1 if empty. Internal_attributes: _expression(SymPy expression): represents the chain as a sum of block expressions. _alphabet (Alphabet): The Alphabet instance used for all blocks in the chain. _dict_blocks (dict): (for internal use only) dictionary mapping Block objects to integer coefficients. _prod_symbol (str): Either '', '*', or '.'. \"\"\" def __init__ ( self , expression = None , alphabet = None , prod_symbol = None , * , list_coeffs = None , list_blocks = None , dict_blocks = None , ): \"\"\" Represents a chain in the Insertion Chain Complex: a linear combination of valid blocks with integer coefficients. Each term can include an integer coefficient followed by a block, e.g., '2abc(1,a)b^ac(1,b)ac - (1,c)(1,a)b^2'. The class can be initialized from: - a string expression (preferred way for end users), - a list of coefficients and blocks, or - a dictionary mapping blocks to coefficients. Args: expression (str, optional): Chain written as a string of blocks. This is the preferred way for end users to construct a chain. alphabet (Alphabet, optional): Alphabet object defining the set of letters. If set to None, a new empty alphabet is created. prod_symbol (str, optional): Product symbol to use in blocks. Must be one of {'', '*', '.'}. If None, it is inferred from the expression: '*' if '*' appears, '.' if '.' appears, or '' otherwise. list_coeffs (list of int, optional): Integer coefficients of the chain terms. Must be provided together with `list_blocks`. Ignored if `expression` or `dict_blocks` is given. list_blocks (list of Block, optional): Block objects corresponding to the coefficients in `list_coeffs`. Ignored if `expression` or `dict_blocks` is given. dict_blocks (dict, optional): Dictionary mapping Block objects to integer coefficients. If provided, it takes precedence over `expression`,`list_coeffs`, and `list_blocks`. \"\"\" super () . __init__ () alphabet = Alphabet ([]) if alphabet is None else alphabet # If dict_blocks provided use that one if dict_blocks is not None : # Check all keys are instances of Block if not all ( isinstance ( b , Block ) for b in dict_blocks . keys ()): raise TypeError ( \"All keys of dict_blocks must be instances of Block\" ) # Check all values are integers if not all ( isinstance ( c , int ) for c in dict_blocks . values ()): raise TypeError ( \"All values of dict_blocks must be integers\" ) self . _dict_blocks = dict_blocks self . _alphabet = _combine_blocks_alphabet ( dict_blocks . keys (), alphabet ) # Use provided prod_symbol or use a suitable: concatenation for symbols of # length 1, \".\" otherwise if prod_symbol in [ \"\" , \".\" , \"*\" ]: self . _prod_symbol = prod_symbol elif ( max ([ len ( symbol ) for symbol in self . _alphabet . letters_str ], default = 1 ) > 1 ): self . _prod_symbol = \".\" else : self . _prod_symbol = \"\" # Otherwise, if expression is present, or list_coeff, list_blocks are # present, use that. else : if isinstance ( expression , str ): list_coeffs , list_blocks , alphabet , prod_symbol = ( _chain_str_constructor ( expression , alphabet , prod_symbol ) ) self . _alphabet = alphabet self . _prod_symbol = prod_symbol else : # Check list_coeffs and list_blocks are valid and create alphabet and prod_symbol # Check list_coeffs and list_blocks have same length if len ( list_coeffs ) != len ( list_blocks ): raise ValueError ( \"list_coeffs and list_blocks must have the same length\" ) # Check all elements in list_blocks are instances of Block if not all ( isinstance ( b , Block ) for b in list_blocks ): raise TypeError ( \"All elements of list_blocks must be instances of Block\" ) # Check all elements in list_coeffs are integers if not all ( isinstance ( c , int ) for c in list_coeffs ): raise TypeError ( \"All elements of list_coeffs must be integers\" ) # Set alphabet self . _alphabet = _combine_blocks_alphabet ( dict_blocks . keys (), alphabet ) # Use provided prod_symbol or use a suitable: concatenation for symbols of # length 1, \".\" otherwise if prod_symbol in [ \"\" , \".\" , \"*\" ]: self . _prod_symbol = prod_symbol elif ( max ( [ len ( symbol ) for symbol in self . _alphabet . letters_str ], default = 1 , ) > 1 ): self . _prod_symbol = \".\" else : self . _prod_symbol = \"\" # Create dictionary self . _dict_blocks = {} for i , block in enumerate ( list_blocks ): if block not in self . _dict_blocks : self . _dict_blocks [ block ] = list_coeffs [ i ] else : self . _dict_blocks [ block ] += list_coeffs [ i ] # Clean dict_blocks _clean_dictionary_blocks ( self . _dict_blocks ) # Set up attributes self . _create_expression () self . dim = max ([ B . dim for B in self . _dict_blocks ] + [ - 1 ]) def _create_expression ( self ): \"\"\"Build the SymPy expression from the chain's blocks and coefficients.\"\"\" # Create expression self . _expression = int ( 0 ) + sum ( [ int ( self . _dict_blocks [ block ]) * block . get_expression () for block in self . _dict_blocks ] ) def __add__ ( self , other ): new_dict = copy . deepcopy ( self . _to_chain () . _dict_blocks ) other = other . _to_chain () for block in other . _dict_blocks : if block in new_dict : new_dict [ block ] += other . _dict_blocks [ block ] else : new_dict [ block ] = other . _dict_blocks [ block ] _clean_dictionary_blocks ( new_dict ) return Chain ( dict_blocks = new_dict ) def __rmul__ ( self , coeff ): dict_blocks = self . _to_chain () . _dict_blocks . copy () if coeff != 0 : new_dict = { c : coeff * dict_blocks [ c ] for c in dict_blocks } else : new_dict = {} return Chain ( dict_blocks = new_dict , alphabet = self . _alphabet , prod_symbol = self . _prod_symbol ) def boundary ( self ): \"\"\"Return the boundary of the chain as a new Chain.\"\"\" new_dict = {} for block in self . _dict_blocks : coeff = self . _dict_blocks [ block ] dict_boundary = block . boundary () . get_dict_blocks () for new_block in dict_boundary : if new_block in new_dict : new_dict [ new_block ] += coeff * dict_boundary [ new_block ] else : new_dict [ new_block ] = coeff * dict_boundary [ new_block ] _clean_dictionary_blocks ( new_dict ) return Chain ( dict_blocks = new_dict , alphabet = self . _alphabet , prod_symbol = self . _prod_symbol ) def get_dict_blocks ( self ): \"\"\"Return a copy of the internal blocks dictionary.\"\"\" return self . _dict_blocks . copy () __init__ ( expression = None , alphabet = None , prod_symbol = None , * , list_coeffs = None , list_blocks = None , dict_blocks = None ) Represents a chain in the Insertion Chain Complex: a linear combination of valid blocks with integer coefficients. Each term can include an integer coefficient followed by a block, e.g., '2abc(1,a)b^ac(1,b)ac - (1,c)(1,a)b^2'. The class can be initialized from a string expression (preferred way for end users), a list of coefficients and blocks, or a dictionary mapping blocks to coefficients. Parameters: expression ( str , default: None ) \u2013 Chain written as a string of blocks. This is the preferred way for end users to construct a chain. alphabet ( Alphabet , default: None ) \u2013 Alphabet object defining the set of letters. If set to None, a new empty alphabet is created. prod_symbol ( str , default: None ) \u2013 Product symbol to use in blocks. Must be one of {'', ' ', '.'}. If None, it is inferred from the expression: ' ' if '*' appears, '.' if '.' appears, or '' otherwise. list_coeffs ( list of int , default: None ) \u2013 Integer coefficients of the chain terms. Must be provided together with list_blocks . Ignored if expression or dict_blocks is given. list_blocks ( list of Block , default: None ) \u2013 Block objects corresponding to the coefficients in list_coeffs . Ignored if expression or dict_blocks is given. dict_blocks ( dict , default: None ) \u2013 Dictionary mapping Block objects to integer coefficients. If provided, it takes precedence over expression , list_coeffs , and list_blocks . Source code in InDelsTopo/chain.py 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 def __init__ ( self , expression = None , alphabet = None , prod_symbol = None , * , list_coeffs = None , list_blocks = None , dict_blocks = None , ): \"\"\" Represents a chain in the Insertion Chain Complex: a linear combination of valid blocks with integer coefficients. Each term can include an integer coefficient followed by a block, e.g., '2abc(1,a)b^ac(1,b)ac - (1,c)(1,a)b^2'. The class can be initialized from: - a string expression (preferred way for end users), - a list of coefficients and blocks, or - a dictionary mapping blocks to coefficients. Args: expression (str, optional): Chain written as a string of blocks. This is the preferred way for end users to construct a chain. alphabet (Alphabet, optional): Alphabet object defining the set of letters. If set to None, a new empty alphabet is created. prod_symbol (str, optional): Product symbol to use in blocks. Must be one of {'', '*', '.'}. If None, it is inferred from the expression: '*' if '*' appears, '.' if '.' appears, or '' otherwise. list_coeffs (list of int, optional): Integer coefficients of the chain terms. Must be provided together with `list_blocks`. Ignored if `expression` or `dict_blocks` is given. list_blocks (list of Block, optional): Block objects corresponding to the coefficients in `list_coeffs`. Ignored if `expression` or `dict_blocks` is given. dict_blocks (dict, optional): Dictionary mapping Block objects to integer coefficients. If provided, it takes precedence over `expression`,`list_coeffs`, and `list_blocks`. \"\"\" super () . __init__ () alphabet = Alphabet ([]) if alphabet is None else alphabet # If dict_blocks provided use that one if dict_blocks is not None : # Check all keys are instances of Block if not all ( isinstance ( b , Block ) for b in dict_blocks . keys ()): raise TypeError ( \"All keys of dict_blocks must be instances of Block\" ) # Check all values are integers if not all ( isinstance ( c , int ) for c in dict_blocks . values ()): raise TypeError ( \"All values of dict_blocks must be integers\" ) self . _dict_blocks = dict_blocks self . _alphabet = _combine_blocks_alphabet ( dict_blocks . keys (), alphabet ) # Use provided prod_symbol or use a suitable: concatenation for symbols of # length 1, \".\" otherwise if prod_symbol in [ \"\" , \".\" , \"*\" ]: self . _prod_symbol = prod_symbol elif ( max ([ len ( symbol ) for symbol in self . _alphabet . letters_str ], default = 1 ) > 1 ): self . _prod_symbol = \".\" else : self . _prod_symbol = \"\" # Otherwise, if expression is present, or list_coeff, list_blocks are # present, use that. else : if isinstance ( expression , str ): list_coeffs , list_blocks , alphabet , prod_symbol = ( _chain_str_constructor ( expression , alphabet , prod_symbol ) ) self . _alphabet = alphabet self . _prod_symbol = prod_symbol else : # Check list_coeffs and list_blocks are valid and create alphabet and prod_symbol # Check list_coeffs and list_blocks have same length if len ( list_coeffs ) != len ( list_blocks ): raise ValueError ( \"list_coeffs and list_blocks must have the same length\" ) # Check all elements in list_blocks are instances of Block if not all ( isinstance ( b , Block ) for b in list_blocks ): raise TypeError ( \"All elements of list_blocks must be instances of Block\" ) # Check all elements in list_coeffs are integers if not all ( isinstance ( c , int ) for c in list_coeffs ): raise TypeError ( \"All elements of list_coeffs must be integers\" ) # Set alphabet self . _alphabet = _combine_blocks_alphabet ( dict_blocks . keys (), alphabet ) # Use provided prod_symbol or use a suitable: concatenation for symbols of # length 1, \".\" otherwise if prod_symbol in [ \"\" , \".\" , \"*\" ]: self . _prod_symbol = prod_symbol elif ( max ( [ len ( symbol ) for symbol in self . _alphabet . letters_str ], default = 1 , ) > 1 ): self . _prod_symbol = \".\" else : self . _prod_symbol = \"\" # Create dictionary self . _dict_blocks = {} for i , block in enumerate ( list_blocks ): if block not in self . _dict_blocks : self . _dict_blocks [ block ] = list_coeffs [ i ] else : self . _dict_blocks [ block ] += list_coeffs [ i ] # Clean dict_blocks _clean_dictionary_blocks ( self . _dict_blocks ) # Set up attributes self . _create_expression () self . dim = max ([ B . dim for B in self . _dict_blocks ] + [ - 1 ]) boundary () Return the boundary of the chain as a new Chain. Source code in InDelsTopo/chain.py 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 def boundary ( self ): \"\"\"Return the boundary of the chain as a new Chain.\"\"\" new_dict = {} for block in self . _dict_blocks : coeff = self . _dict_blocks [ block ] dict_boundary = block . boundary () . get_dict_blocks () for new_block in dict_boundary : if new_block in new_dict : new_dict [ new_block ] += coeff * dict_boundary [ new_block ] else : new_dict [ new_block ] = coeff * dict_boundary [ new_block ] _clean_dictionary_blocks ( new_dict ) return Chain ( dict_blocks = new_dict , alphabet = self . _alphabet , prod_symbol = self . _prod_symbol ) get_dict_blocks () Return a copy of the internal blocks dictionary. Source code in InDelsTopo/chain.py 344 345 346 def get_dict_blocks ( self ): \"\"\"Return a copy of the internal blocks dictionary.\"\"\" return self . _dict_blocks . copy () Complex Represents an Insertion Chain Complex C[W] for a set of words W. The class stores the blocks of the complex in each dimension and provides methods to compute topological invariants such as the Euler characteristic and Betti numbers (over Z_2 or Z when using a SageMath kernel). It also supports graphical visualization of the complex in low dimensions. The k-dimensional blocks can be accessed via indexing syntax: K[k] returns the list of k-blocks. Attributes: dim ( int ) \u2013 Maximum dimension of the complex. complex_dict ( dict [ int , list [ Block ]] ) \u2013 Maps each dimension to its corresponding list of blocks. height ( float | None ) \u2013 Height value associated with the complex. Internal attributes _alphabet (Alphabet): Alphabet object containing all symbols used in W. _prod_symbol (str): Product symbol used in the blocks. _positions_dict (dict | None): Stores vertex positions for graphical visualization. Notes This class can be used to build and analyze Insertion Chain Complexes directly, or as a sublevel complex of a filtration. Homology computations over Z require SageMath; otherwise, only Z_2 computations are available using SciPy. It initializes as an empty complex. It can be made into the insertion chain complex of a set of words W by using the method compute_d_skeleton(W) . Blocks can be added or removed by using the methods add_blocks and remove_blocks . Example W = [\"ab\", \"aab\", \"abb\"] K = Complex() # Creates an empty complex K.compute_d_skeleton(W) # makes K = C[W] K[1] # Access 1-dimensional blocks [a(1,a)b, ab(1,b)] Source code in InDelsTopo/complex.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 class Complex : \"\"\" Represents an Insertion Chain Complex C[W] for a set of words W. The class stores the blocks of the complex in each dimension and provides methods to compute topological invariants such as the Euler characteristic and Betti numbers (over Z_2 or Z when using a SageMath kernel). It also supports graphical visualization of the complex in low dimensions. The k-dimensional blocks can be accessed via indexing syntax: `K[k]` returns the list of k-blocks. Attributes: dim (int): Maximum dimension of the complex. complex_dict (dict[int, list[Block]]): Maps each dimension to its corresponding list of blocks. height (float | None): Height value associated with the complex. Internal attributes: _alphabet (Alphabet): Alphabet object containing all symbols used in W. _prod_symbol (str): Product symbol used in the blocks. _positions_dict (dict | None): Stores vertex positions for graphical visualization. Notes: - This class can be used to build and analyze Insertion Chain Complexes directly, or as a sublevel complex of a filtration. - Homology computations over Z require SageMath; otherwise, only Z_2 computations are available using SciPy. - It initializes as an empty complex. It can be made into the insertion chain complex of a set of words `W` by using the method `compute_d_skeleton(W)`. - Blocks can be added or removed by using the methods `add_blocks` and `remove_blocks`. Example: >>> W = [\"ab\", \"aab\", \"abb\"] >>> K = Complex() # Creates an empty complex >>> K.compute_d_skeleton(W) # makes K = C[W] >>> K[1] # Access 1-dimensional blocks [a(1,a)b, ab(1,b)] \"\"\" def __init__ ( self , alphabet = None , prod_symbol = None , * , complex_dict = None , height = None ): \"\"\" Initialize an Insertion Chain Complex. This constructor creates a new complex object, which can either start empty (with no blocks) or be initialized from a given dictionary of blocks. Optionally, the complex can store a height value, useful when representing a level in a filtration. Args: alphabet (Alphabet | None, optional): The alphabet containing all symbols to be used. Defaults to None. prod_symbol (str | None, optional): Product symbol used for block construction, Must be one of {'', '*', '.'}. If None, it is inferred from the expression: set to '*' if '*' appears, to '.' if '.' appears, or to '' (concatenation) otherwise. complex_dict (dict[int, list[Block]] | None, optional): Mapping from dimension `d` to the list of d-dimensional blocks. If provided, it initializes the complex structure directly. Defaults to None. height (float | None, optional): Height value associated with the complex, used when part of a filtration. Defaults to None. \"\"\" self . _alphabet = alphabet self . _prod_symbol = prod_symbol self . dim = - 1 self . complex_dict = {} self . height = None self . _positions_dict = None if not complex_dict is None : self . dim = max ( complex_dict . keys (), default =- 1 ) self . complex_dict = complex_dict self . height = height def compute_d_skeleton ( self , W , height = None , max_dim = 10 , alphabet = None , prod_symbol = None , check_duplicates = True , already_blocks = False , verbose = False , ): \"\"\" Compute the d-skeleton of the Insertion Chain Complex generated by a set of words, C[W]. This method replaces any existing data in the Complex with a new complex supported on `W`. This method constructs all valid blocks up to the specified maximum dimension (`max_dim`) for a given set of words `W`. It begins by computing the 0- and 1-skeletons (vertices and edges), then iteratively extends to higher dimensions. It updates the internal `complex_dict` to the blocks supported on `W`. Args: W (list of str or Block): List of words (or blocks, if `already_blocks=True`) forming the base of the complex. height (float, optional): Height value associated with the complex, used when part of a filtration. Defaults to None. max_dim (int, optional): Maximum dimension of the skeleton to compute. Defaults to 10. alphabet (Alphabet, optional): Alphabet object used together with the internal `self._alphabet` and any letters inferred from `W`. If provided, its symbols are merged with `self._alphabet`; otherwise, the new symbols are inferred entirely from the given words. prod_symbol (str, optional): Product symbol for block construction ('*', '.', or ''). If None, inferred automatically. check_duplicates (bool, optional): Whether to verify that input words are unique. Defaults to True. already_blocks (bool, optional): If True, assumes the input `W` is already a list of `Block` objects instead of strings. Defaults to False. verbose (bool, optional): If True, prints progress information during computation. Example: >>> W = ['a*b', 'a*b*b', 'a*a*b',''] >>> K = Filtration() >>> K.compute_d_skeleton(W, heights=[0.1, 0.3, 0.2,0.4], max_dim=2) >>> K[1] {a*b*(1,b): 0.3, a*(1,a)*b: 0.2} \"\"\" K = Filtration () K . compute_d_skeleton ( W , heights = None , max_dim = max_dim , alphabet = alphabet , prod_symbol = prod_symbol , check_duplicates = check_duplicates , already_blocks = already_blocks , verbose = verbose , ) complex_dict = { dim : list ( K [ dim ] . keys ()) for dim in K . filtration_dict } self . complex_dict = complex_dict self . height = height self . dim = K . dim self . _alphabet = K . get_alphabet () del K def get_maximal_blocks ( self ): \"\"\" Return the maximal blocks of the complex, ordered by subfaces. A block is maximal if it is not a subface of any higher-dimensional block. The method identifies all such maximal blocks in each dimension and returns them as a dictionary. Returns: dict[int, list[Block]]: A dictionary mapping each dimension to a list of maximal blocks (i.e., blocks not covered by higher-dimensional ones). Notes: - Empty dimensions are removed from the output dictionary. \"\"\" covered_dict = {} max_dim = self . dim if max_dim >= 0 : for dim in range ( max_dim , - 1 , - 1 ): covered_dict [ dim - 1 ] = set ([]) for block in self . complex_dict [ dim ]: covered_dict [ dim - 1 ] . update ( block . get_all_facets ()) # Remove faces covered by a higher one maximal_dict = { max_dim : self . complex_dict [ max_dim ] . copy ()} for dim in range ( max_dim ): maximal_dict [ dim ] = list ( set ( self . complex_dict [ dim ]) . difference ( covered_dict [ dim ]) ) # Remove empty dimensions for dim in range ( max_dim ): if len ( maximal_dict [ dim ]) == 0 : del maximal_dict [ dim ] return maximal_dict return {} def get_complex ( self , max_dim = None ): \"\"\" Return a subcomplex of the current complex up to the specified dimension. If `max_dim` is not provided or is greater than or equal to the current dimension, the method returns the complex itself. Otherwise, it returns a new `Complex` object containing only the blocks up to dimension `max_dim`. Args: max_dim (int or None, optional): Maximum dimension of blocks to include in the returned complex. If None or greater than the complex dimension, the full complex is returned. Returns: Complex: A subcomplex containing blocks up to dimension `max_dim`. \"\"\" if max_dim is None or max_dim >= self . dim : return self complex_dict = { dim : list ( self . complex_dict [ dim ]) for dim in range ( max_dim + 1 )} for dim in range ( max_dim , - 1 , - 1 ): if len ( complex_dict [ dim ]) == 0 : del complex_dict [ dim ] else : break return Complex ( alphabet = self . _alphabet , prod_symbol = self . _prod_symbol , complex_dict = complex_dict , height = self . height , ) def add_blocks ( self , list_blocks , prod_symbol = None , already_blocks = False ): \"\"\" Add new blocks to the Complex. Extends the current Complex by inserting additional blocks and their faces. Intended for expert use only, since the resulting structure may not be a full Insertion Chain Complex C[W], but rather a subcomplex if some supported blocks are missing. Args: list_blocks (list[Block] or list[str]): List of blocks to be added to the Filtration. If ``already_blocks`` is False (default), the elements are assumed to be strings representing blocks and will be converted. If True, they are assumed to be existing ``Block`` objects. prod_symbol (str or None, optional): Product symbol used in block representation ('*', '.', or ''). If not specified, it is inferred from the input blocks. already_blocks (bool, optional): If True, elements of ``list_blocks`` are assumed to be valid ``Block`` objects. If False (default), the method attempts to convert the input into blocks. Notes: The internal alphabet and product symbol are updated to ensure consistency. \"\"\" # Convert into blocks if needed if already_blocks : alphabet = _combine_blocks_alphabet ( list_blocks , self . _alphabet ) else : list_blocks , alphabet , prod_symbol = _convert_words_to_blocks ( list_blocks , prod_symbol = prod_symbol , alphabet = self . _alphabet ) self . _alphabet = alphabet # Uniformalize prod_symbols pylint: disable=protected-access new_prods = [ blk . _prod_symbol for blk in list_blocks ] + [ self . _prod_symbol ] if \"*\" in new_prods : prod_symbol = \"*\" elif \".\" in new_prods : prod_symbol = \".\" else : prod_symbol = \"\" self . _prod_symbol = prod_symbol for blk in list_blocks : blk . _prod_symbol = self . _prod_symbol # Add blocks and faces to complex_dict for block in list_blocks : for face in block . get_all_faces ( True ): dimension = face . dim if dimension in self . complex_dict : if not face in self . complex_dict [ dimension ]: try : self . complex_dict [ dimension ] . append ( face ) except KeyError : self . complex_dict [ dimension ] = [ face ] else : self . complex_dict [ dimension ] = [ face ] # Recompute dimension self . dim = max ( self . complex_dict , default =- 1 ) def remove_blocks ( self , list_blocks , prod_symbol = None , include_upfaces = True , already_blocks = False ): \"\"\" Remove blocks from the Complex. Deletes specified blocks and optionally their super-faces from the Complex. Intended for expert use only, since the resulting structure may not be a full Insertion Chain Complex C[W], but rather a subcomplex if some supported blocks are missing. Args: list_blocks (list of Block or string): A list of blocks to remove. If `already_blocks` is False (default), the elements are assumed to be strings representing blocks and will be converted. If True, they are assumed to be existing Block objects. prod_symbol (str or None, optional): Product symbol used in block representation ( '*', '.', or ''). If not specified, it is inferred from the input blocks. include_upfaces (bool, optional): If True, all super faces of the specified blocks are also removed, so the result is a subcomplex. Default is True. already_blocks (bool, optional): If True, the elements of `list_blocks` are assumed to be valid Block objects. If False (default), the method attempts to convert the input into blocks. \"\"\" # Make sure it is a list if not isinstance ( list_blocks , list ): raise TypeError ( \"list_blocks must be a list\" ) # Convert into blocks if needed if not already_blocks : list_blocks , _alphabet , prod_symbol = _convert_words_to_blocks ( list_blocks , prod_symbol = prod_symbol , alphabet = self . _alphabet ) # Dictionary of blocks to remove blocks_to_remove = { i : [] for i in range ( self . dim + 1 )} for block in list_blocks : if block . dim in self . complex_dict and block in self . complex_dict [ block . dim ]: blocks_to_remove [ block . dim ] . append ( block ) # Find super-faces if needed if include_upfaces : for dimension in range ( 1 , self . dim + 1 ): for block in self . complex_dict [ dimension ]: facets = block . get_all_facets () if any ( facet in blocks_to_remove [ dimension - 1 ] for facet in facets ): blocks_to_remove [ dimension ] . append ( block ) # Remove blocks for dimension in blocks_to_remove : for block in blocks_to_remove [ dimension ]: if block in self . complex_dict [ dimension ]: self . complex_dict [ dimension ] . remove ( block ) # Update complex_dict for dimension in range ( self . dim , - 1 , - 1 ): if len ( self . complex_dict [ dimension ]) == 0 : del self . complex_dict [ dimension ] else : break # Recompute dimension self . dim = max ( self . complex_dict , default =- 1 ) def euler_characteristic ( self ): \"\"\" This method computes the Euler characteristic of the complex. \"\"\" faces = [( k , len ( self . complex_dict [ k ])) for k in self . complex_dict ] characteristic = int ( np . sum ([( - 1 ) ** k * m for ( k , m ) in faces ])) return characteristic def __getitem__ ( self , key ): if 0 <= key <= self . dim : return self . complex_dict [ key ] return {} def get_graph ( self , show_labels = True , max_dim = 5 , positions = None , initial_positions = None , fixed = None , recompute = False , colors_by_dim = None , ax = None , ): \"\"\" Generate a graphical representation of the complex up to a specified dimension. Positions of vertices can be computed automatically or provided manually. Only accurate for low-dimensional complexes (typically dim <= 3). Args: show_labels (bool, optional): Whether to display labels on the vertices. Defaults to True. max_dim (int, optional): Maximum dimension of blocks to include in the graph. Defaults to 5. positions (dict, optional): Dictionary of vertex positions. If None, positions are computed automatically. Once computed, they are reused everytime this method is called, unless recompute is set to True. initial_positions (dict, optional): Initial positions used to seed the automatic layout algorithm. fixed (list or None, optional): List of vertex keys to fix in place when computing positions. Defaults to None. recompute (bool, optional): Whether to recompute vertex positions even if already stored. Defaults to False. colors_by_dim (list of str, optional): List of colors to use for each dimension. If None, defaults to ['black', 'gray', 'yellow', 'red', 'blue', 'purple']. ax (matplotlib.axes._subplots.Axes3DSubplot, optional): A Matplotlib Axes object to draw the plot on. If None, a new figure and axes are created. Defaults to None. Returns: matplotlib.axes.Axes: Matplotlib axes object containing the drawn graph. \"\"\" if self . dim == - 1 : return None if ( positions is None ) or recompute : if ( self . _positions_dict is None ) or recompute : self . _positions_dict = graphics . compute_vertex_positions ( self , pos0 = initial_positions , fixed = fixed ) # Make sure position includes all vertices elif any ( vertex not in self . _positions_dict for vertex in self [ 0 ]): # Update with pos0 if isinstance ( initial_positions , dict ): for vertex in initial_positions : self . _positions_dict [ vertex ] = initial_positions [ vertex ] # Compute for all vertices self . _positions_dict = graphics . compute_vertex_positions ( self , pos0 = self . _positions_dict , fixed = list ( self . _positions_dict . keys ()), ) # Get the positions positions = self . _positions_dict ax = graphics . make_graph ( self , pos = positions , show_labels = show_labels , max_dim = max_dim , height = None , already_complex = True , colors_by_dim = colors_by_dim , ax = ax , ) return ax def get_betti_numbers_z2 ( self , max_dim = None ): \"\"\" Returns the betti numbers in Z_2 coefficients up to the specified dimension max_dim. \"\"\" # Import csc_matrix from scipy.sparse import csc_matrix if max_dim is None or max_dim >= self . dim : max_dim = self . dim using_skeleton = False elif max_dim == self . dim - 1 : max_dim = self . dim using_skeleton = True else : max_dim += 1 using_skeleton = True # Order the blocks according to their dimension ordered_blocks = [] for d in range ( max_dim + 1 ): ordered_blocks += self [ d ] ordered_blocks . sort ( key = lambda B : B . dim ) ordered_blocks_dict = { ordered_blocks [ i ]: i for i in range ( len ( ordered_blocks ))} # Construct the boundary matrix cols = [] rows = [] data = [] for id_col , block in enumerate ( ordered_blocks ): facets = block . get_all_facets () for face in facets : cols . append ( id_col ) rows . append ( ordered_blocks_dict [ face ]) data . append ( 1 ) N = len ( ordered_blocks ) boundary_matrix = csc_matrix (( data , ( rows , cols )), shape = ( N , N )) . tolil () # Perform row reduction (we follow the algorithm from https://arxiv.org/pdf/1506.08903) low = [] # maps row index to pivot column index betti_numbers = { dim : 0 for dim in range ( max_dim + 1 )} for j in range ( N ): col = boundary_matrix . getcol ( j ) if col . nnz > 0 : # Set initial value for low(j) low_j = col . nonzero ()[ 0 ][ - 1 ] while low_j in low : i = low . index ( low_j ) # add column i to column j col = col + boundary_matrix . getcol ( i ) col . data = col . data % 2 # Make adition modulo 2 col . eliminate_zeros () if col . nnz > 0 : low_j = col . nonzero ()[ 0 ][ - 1 ] # update low_j value else : low_j = - 1 break boundary_matrix [:, j ] = col # update column j in the matrix low . append ( low_j ) # Save value for low_j else : # Set -1, for undefined low(j) low . append ( - 1 ) # Extract surviving cycles for j , low_j in enumerate ( low ): if low_j < 0 and not j in low : dim = ordered_blocks [ j ] . dim betti_numbers [ dim ] += 1 if using_skeleton : if max_dim in betti_numbers : del betti_numbers [ max_dim ] return betti_numbers def get_chain_complex_sage ( self , get_ordered_blocks = False ): \"\"\" Construct and return the associated chain complex as a SageMath object. This method is intended to be used in a SageMath kernel. It builds a chain complex using Sage's `ChainComplex()` constructor. Optionally, it can also return the blocks sorted within each dimension. Args: get_ordered_blocks (bool, optional): If True, also return the blocks ordered by their expressions within each dimension. Defaults to False. Returns: ChainComplex or tuple[ChainComplex, dict[int, list[Block]]]: - If `get_ordered_blocks` is False, returns a ChainComplex object representing the boundary operators. - If `get_ordered_blocks` is True, returns a tuple `(ChainComplex, Blocks_ordered)`, where `Blocks_ordered` is a dictionary of lists of blocks sorted by expression. Notes: - Requires SageMath to be installed and accessible in the current environment. - If SageMath is not found, the function prints a warning and returns None. - Any other errors during construction are caught and printed. \"\"\" try : from InDelsTopo import homology_sagemath return homology_sagemath . create_chain_complex ( self . complex_dict , get_ordered_blocks ) except ImportError : print ( \"Could not find SageMath functions. \" \"This module requires SageMath to run and cannot be \" \"executed in a standard Python environment.\" ) return None except Exception as e : print ( f \"An error occurred: { e } \" ) return None def get_homology_sage ( self , save_chain_complex = False , used_saved_chain_complex = True , ** kwargs ): \"\"\" Return the homology of the associated chain complex using SageMath. This method should be run in a SageMath kernel. It constructs a SageMath chain complex and computes its homology using Sage's built-in `homology()` method. Parameters: save_chain_complex (bool): If True, the chain complex is saved as an attribute (`self._sage_chain_complex`) to speed up future computations. used_saved_chain_complex (bool): If True, it will attempt to use the saved chain_complex attribute, otherwise, it will be computed from scratch. **kwargs: Additional keyword arguments passed directly to SageMath's `homology()` method. Returns: The homology object returned by SageMath. \"\"\" chain_complex = getattr ( self , \"_sage_chain_complex\" , None ) if not used_saved_chain_complex or chain_complex is None : chain_complex = self . get_chain_complex_sage () if save_chain_complex : self . _sage_chain_complex = chain_complex return chain_complex . homology ( ** kwargs ) def __str__ ( self ): to_print = \"Insertion Chain Complex \\n \" to_print += \"alphabet: \" + str ( self . _alphabet ) + \". \\n \" if not self . height is None : to_print += \"height: \" + str ( self . height ) + \". \\n \" to_print += \"dimension: \" + str ( self . dim ) + \". \\n \" to_print += \"vertices: \" + str ( len ( self [ 0 ])) + \". \\n \" to_print += ( \"blocks: \" + str ( sum ([ len ( self [ k ]) for k in range ( self . dim + 1 )])) + \".\" ) return to_print def __repr__ ( self ): return self . __str__ () def get_alphabet ( self ): \"\"\"Returns the alphabet attribute.\"\"\" return self . _alphabet __init__ ( alphabet = None , prod_symbol = None , * , complex_dict = None , height = None ) Initialize an Insertion Chain Complex. This constructor creates a new complex object, which can either start empty (with no blocks) or be initialized from a given dictionary of blocks. Optionally, the complex can store a height value, useful when representing a level in a filtration. Parameters: alphabet ( Alphabet | None , default: None ) \u2013 The alphabet containing all symbols to be used. Defaults to None. prod_symbol ( str | None , default: None ) \u2013 Product symbol used for block construction, Must be one of {'', ' ', '.'}. If None, it is inferred from the expression: set to ' ' if '*' appears, to '.' if '.' appears, or to '' (concatenation) otherwise. complex_dict ( dict [ int , list [ Block ]] | None , default: None ) \u2013 Mapping from dimension d to the list of d-dimensional blocks. If provided, it initializes the complex structure directly. Defaults to None. height ( float | None , default: None ) \u2013 Height value associated with the complex, used when part of a filtration. Defaults to None. Source code in InDelsTopo/complex.py 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 def __init__ ( self , alphabet = None , prod_symbol = None , * , complex_dict = None , height = None ): \"\"\" Initialize an Insertion Chain Complex. This constructor creates a new complex object, which can either start empty (with no blocks) or be initialized from a given dictionary of blocks. Optionally, the complex can store a height value, useful when representing a level in a filtration. Args: alphabet (Alphabet | None, optional): The alphabet containing all symbols to be used. Defaults to None. prod_symbol (str | None, optional): Product symbol used for block construction, Must be one of {'', '*', '.'}. If None, it is inferred from the expression: set to '*' if '*' appears, to '.' if '.' appears, or to '' (concatenation) otherwise. complex_dict (dict[int, list[Block]] | None, optional): Mapping from dimension `d` to the list of d-dimensional blocks. If provided, it initializes the complex structure directly. Defaults to None. height (float | None, optional): Height value associated with the complex, used when part of a filtration. Defaults to None. \"\"\" self . _alphabet = alphabet self . _prod_symbol = prod_symbol self . dim = - 1 self . complex_dict = {} self . height = None self . _positions_dict = None if not complex_dict is None : self . dim = max ( complex_dict . keys (), default =- 1 ) self . complex_dict = complex_dict self . height = height add_blocks ( list_blocks , prod_symbol = None , already_blocks = False ) Add new blocks to the Complex. Extends the current Complex by inserting additional blocks and their faces. Intended for expert use only, since the resulting structure may not be a full Insertion Chain Complex C[W], but rather a subcomplex if some supported blocks are missing. Parameters: list_blocks ( list [ Block ] or list [ str ] ) \u2013 List of blocks to be added to the Filtration. If already_blocks is False (default), the elements are assumed to be strings representing blocks and will be converted. If True, they are assumed to be existing Block objects. prod_symbol ( str or None , default: None ) \u2013 Product symbol used in block representation ('*', '.', or ''). If not specified, it is inferred from the input blocks. already_blocks ( bool , default: False ) \u2013 If True, elements of list_blocks are assumed to be valid Block objects. If False (default), the method attempts to convert the input into blocks. Notes The internal alphabet and product symbol are updated to ensure consistency. Source code in InDelsTopo/complex.py 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 def add_blocks ( self , list_blocks , prod_symbol = None , already_blocks = False ): \"\"\" Add new blocks to the Complex. Extends the current Complex by inserting additional blocks and their faces. Intended for expert use only, since the resulting structure may not be a full Insertion Chain Complex C[W], but rather a subcomplex if some supported blocks are missing. Args: list_blocks (list[Block] or list[str]): List of blocks to be added to the Filtration. If ``already_blocks`` is False (default), the elements are assumed to be strings representing blocks and will be converted. If True, they are assumed to be existing ``Block`` objects. prod_symbol (str or None, optional): Product symbol used in block representation ('*', '.', or ''). If not specified, it is inferred from the input blocks. already_blocks (bool, optional): If True, elements of ``list_blocks`` are assumed to be valid ``Block`` objects. If False (default), the method attempts to convert the input into blocks. Notes: The internal alphabet and product symbol are updated to ensure consistency. \"\"\" # Convert into blocks if needed if already_blocks : alphabet = _combine_blocks_alphabet ( list_blocks , self . _alphabet ) else : list_blocks , alphabet , prod_symbol = _convert_words_to_blocks ( list_blocks , prod_symbol = prod_symbol , alphabet = self . _alphabet ) self . _alphabet = alphabet # Uniformalize prod_symbols pylint: disable=protected-access new_prods = [ blk . _prod_symbol for blk in list_blocks ] + [ self . _prod_symbol ] if \"*\" in new_prods : prod_symbol = \"*\" elif \".\" in new_prods : prod_symbol = \".\" else : prod_symbol = \"\" self . _prod_symbol = prod_symbol for blk in list_blocks : blk . _prod_symbol = self . _prod_symbol # Add blocks and faces to complex_dict for block in list_blocks : for face in block . get_all_faces ( True ): dimension = face . dim if dimension in self . complex_dict : if not face in self . complex_dict [ dimension ]: try : self . complex_dict [ dimension ] . append ( face ) except KeyError : self . complex_dict [ dimension ] = [ face ] else : self . complex_dict [ dimension ] = [ face ] # Recompute dimension self . dim = max ( self . complex_dict , default =- 1 ) compute_d_skeleton ( W , height = None , max_dim = 10 , alphabet = None , prod_symbol = None , check_duplicates = True , already_blocks = False , verbose = False ) Compute the d-skeleton of the Insertion Chain Complex generated by a set of words, C[W]. This method replaces any existing data in the Complex with a new complex supported on W . This method constructs all valid blocks up to the specified maximum dimension ( max_dim ) for a given set of words W . It begins by computing the 0- and 1-skeletons (vertices and edges), then iteratively extends to higher dimensions. It updates the internal complex_dict to the blocks supported on W . Parameters: W ( list of str or Block ) \u2013 List of words (or blocks, if already_blocks=True ) forming the base of the complex. height ( float , default: None ) \u2013 Height value associated with the complex, used when part of a filtration. Defaults to None. max_dim ( int , default: 10 ) \u2013 Maximum dimension of the skeleton to compute. Defaults to 10. alphabet ( Alphabet , default: None ) \u2013 Alphabet object used together with the internal self._alphabet and any letters inferred from W . If provided, its symbols are merged with self._alphabet ; otherwise, the new symbols are inferred entirely from the given words. prod_symbol ( str , default: None ) \u2013 Product symbol for block construction ('*', '.', or ''). If None, inferred automatically. check_duplicates ( bool , default: True ) \u2013 Whether to verify that input words are unique. Defaults to True. already_blocks ( bool , default: False ) \u2013 If True, assumes the input W is already a list of Block objects instead of strings. Defaults to False. verbose ( bool , default: False ) \u2013 If True, prints progress information during computation. Example W = ['a b', 'a b b', 'a a b',''] K = Filtration() K.compute_d_skeleton(W, heights=[0.1, 0.3, 0.2,0.4], max_dim=2) K[1] {a b (1,b): 0.3, a (1,a)*b: 0.2} Source code in InDelsTopo/complex.py 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 def compute_d_skeleton ( self , W , height = None , max_dim = 10 , alphabet = None , prod_symbol = None , check_duplicates = True , already_blocks = False , verbose = False , ): \"\"\" Compute the d-skeleton of the Insertion Chain Complex generated by a set of words, C[W]. This method replaces any existing data in the Complex with a new complex supported on `W`. This method constructs all valid blocks up to the specified maximum dimension (`max_dim`) for a given set of words `W`. It begins by computing the 0- and 1-skeletons (vertices and edges), then iteratively extends to higher dimensions. It updates the internal `complex_dict` to the blocks supported on `W`. Args: W (list of str or Block): List of words (or blocks, if `already_blocks=True`) forming the base of the complex. height (float, optional): Height value associated with the complex, used when part of a filtration. Defaults to None. max_dim (int, optional): Maximum dimension of the skeleton to compute. Defaults to 10. alphabet (Alphabet, optional): Alphabet object used together with the internal `self._alphabet` and any letters inferred from `W`. If provided, its symbols are merged with `self._alphabet`; otherwise, the new symbols are inferred entirely from the given words. prod_symbol (str, optional): Product symbol for block construction ('*', '.', or ''). If None, inferred automatically. check_duplicates (bool, optional): Whether to verify that input words are unique. Defaults to True. already_blocks (bool, optional): If True, assumes the input `W` is already a list of `Block` objects instead of strings. Defaults to False. verbose (bool, optional): If True, prints progress information during computation. Example: >>> W = ['a*b', 'a*b*b', 'a*a*b',''] >>> K = Filtration() >>> K.compute_d_skeleton(W, heights=[0.1, 0.3, 0.2,0.4], max_dim=2) >>> K[1] {a*b*(1,b): 0.3, a*(1,a)*b: 0.2} \"\"\" K = Filtration () K . compute_d_skeleton ( W , heights = None , max_dim = max_dim , alphabet = alphabet , prod_symbol = prod_symbol , check_duplicates = check_duplicates , already_blocks = already_blocks , verbose = verbose , ) complex_dict = { dim : list ( K [ dim ] . keys ()) for dim in K . filtration_dict } self . complex_dict = complex_dict self . height = height self . dim = K . dim self . _alphabet = K . get_alphabet () del K euler_characteristic () This method computes the Euler characteristic of the complex. Source code in InDelsTopo/complex.py 363 364 365 366 367 368 369 def euler_characteristic ( self ): \"\"\" This method computes the Euler characteristic of the complex. \"\"\" faces = [( k , len ( self . complex_dict [ k ])) for k in self . complex_dict ] characteristic = int ( np . sum ([( - 1 ) ** k * m for ( k , m ) in faces ])) return characteristic get_alphabet () Returns the alphabet attribute. Source code in InDelsTopo/complex.py 610 611 612 def get_alphabet ( self ): \"\"\"Returns the alphabet attribute.\"\"\" return self . _alphabet get_betti_numbers_z2 ( max_dim = None ) Returns the betti numbers in Z_2 coefficients up to the specified dimension max_dim. Source code in InDelsTopo/complex.py 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 def get_betti_numbers_z2 ( self , max_dim = None ): \"\"\" Returns the betti numbers in Z_2 coefficients up to the specified dimension max_dim. \"\"\" # Import csc_matrix from scipy.sparse import csc_matrix if max_dim is None or max_dim >= self . dim : max_dim = self . dim using_skeleton = False elif max_dim == self . dim - 1 : max_dim = self . dim using_skeleton = True else : max_dim += 1 using_skeleton = True # Order the blocks according to their dimension ordered_blocks = [] for d in range ( max_dim + 1 ): ordered_blocks += self [ d ] ordered_blocks . sort ( key = lambda B : B . dim ) ordered_blocks_dict = { ordered_blocks [ i ]: i for i in range ( len ( ordered_blocks ))} # Construct the boundary matrix cols = [] rows = [] data = [] for id_col , block in enumerate ( ordered_blocks ): facets = block . get_all_facets () for face in facets : cols . append ( id_col ) rows . append ( ordered_blocks_dict [ face ]) data . append ( 1 ) N = len ( ordered_blocks ) boundary_matrix = csc_matrix (( data , ( rows , cols )), shape = ( N , N )) . tolil () # Perform row reduction (we follow the algorithm from https://arxiv.org/pdf/1506.08903) low = [] # maps row index to pivot column index betti_numbers = { dim : 0 for dim in range ( max_dim + 1 )} for j in range ( N ): col = boundary_matrix . getcol ( j ) if col . nnz > 0 : # Set initial value for low(j) low_j = col . nonzero ()[ 0 ][ - 1 ] while low_j in low : i = low . index ( low_j ) # add column i to column j col = col + boundary_matrix . getcol ( i ) col . data = col . data % 2 # Make adition modulo 2 col . eliminate_zeros () if col . nnz > 0 : low_j = col . nonzero ()[ 0 ][ - 1 ] # update low_j value else : low_j = - 1 break boundary_matrix [:, j ] = col # update column j in the matrix low . append ( low_j ) # Save value for low_j else : # Set -1, for undefined low(j) low . append ( - 1 ) # Extract surviving cycles for j , low_j in enumerate ( low ): if low_j < 0 and not j in low : dim = ordered_blocks [ j ] . dim betti_numbers [ dim ] += 1 if using_skeleton : if max_dim in betti_numbers : del betti_numbers [ max_dim ] return betti_numbers get_chain_complex_sage ( get_ordered_blocks = False ) Construct and return the associated chain complex as a SageMath object. This method is intended to be used in a SageMath kernel. It builds a chain complex using Sage's ChainComplex() constructor. Optionally, it can also return the blocks sorted within each dimension. Parameters: get_ordered_blocks ( bool , default: False ) \u2013 If True, also return the blocks ordered by their expressions within each dimension. Defaults to False. Returns: \u2013 ChainComplex or tuple[ChainComplex, dict[int, list[Block]]]: - If get_ordered_blocks is False, returns a ChainComplex object representing the boundary operators. - If get_ordered_blocks is True, returns a tuple (ChainComplex, Blocks_ordered) , where Blocks_ordered is a dictionary of lists of blocks sorted by expression. Notes: - Requires SageMath to be installed and accessible in the current environment. - If SageMath is not found, the function prints a warning and returns None. - Any other errors during construction are caught and printed. Source code in InDelsTopo/complex.py 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 def get_chain_complex_sage ( self , get_ordered_blocks = False ): \"\"\" Construct and return the associated chain complex as a SageMath object. This method is intended to be used in a SageMath kernel. It builds a chain complex using Sage's `ChainComplex()` constructor. Optionally, it can also return the blocks sorted within each dimension. Args: get_ordered_blocks (bool, optional): If True, also return the blocks ordered by their expressions within each dimension. Defaults to False. Returns: ChainComplex or tuple[ChainComplex, dict[int, list[Block]]]: - If `get_ordered_blocks` is False, returns a ChainComplex object representing the boundary operators. - If `get_ordered_blocks` is True, returns a tuple `(ChainComplex, Blocks_ordered)`, where `Blocks_ordered` is a dictionary of lists of blocks sorted by expression. Notes: - Requires SageMath to be installed and accessible in the current environment. - If SageMath is not found, the function prints a warning and returns None. - Any other errors during construction are caught and printed. \"\"\" try : from InDelsTopo import homology_sagemath return homology_sagemath . create_chain_complex ( self . complex_dict , get_ordered_blocks ) except ImportError : print ( \"Could not find SageMath functions. \" \"This module requires SageMath to run and cannot be \" \"executed in a standard Python environment.\" ) return None except Exception as e : print ( f \"An error occurred: { e } \" ) return None get_complex ( max_dim = None ) Return a subcomplex of the current complex up to the specified dimension. If max_dim is not provided or is greater than or equal to the current dimension, the method returns the complex itself. Otherwise, it returns a new Complex object containing only the blocks up to dimension max_dim . Parameters: max_dim ( int or None , default: None ) \u2013 Maximum dimension of blocks to include in the returned complex. If None or greater than the complex dimension, the full complex is returned. Returns: Complex \u2013 A subcomplex containing blocks up to dimension max_dim . Source code in InDelsTopo/complex.py 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 def get_complex ( self , max_dim = None ): \"\"\" Return a subcomplex of the current complex up to the specified dimension. If `max_dim` is not provided or is greater than or equal to the current dimension, the method returns the complex itself. Otherwise, it returns a new `Complex` object containing only the blocks up to dimension `max_dim`. Args: max_dim (int or None, optional): Maximum dimension of blocks to include in the returned complex. If None or greater than the complex dimension, the full complex is returned. Returns: Complex: A subcomplex containing blocks up to dimension `max_dim`. \"\"\" if max_dim is None or max_dim >= self . dim : return self complex_dict = { dim : list ( self . complex_dict [ dim ]) for dim in range ( max_dim + 1 )} for dim in range ( max_dim , - 1 , - 1 ): if len ( complex_dict [ dim ]) == 0 : del complex_dict [ dim ] else : break return Complex ( alphabet = self . _alphabet , prod_symbol = self . _prod_symbol , complex_dict = complex_dict , height = self . height , ) get_graph ( show_labels = True , max_dim = 5 , positions = None , initial_positions = None , fixed = None , recompute = False , colors_by_dim = None , ax = None ) Generate a graphical representation of the complex up to a specified dimension. Positions of vertices can be computed automatically or provided manually. Only accurate for low-dimensional complexes (typically dim <= 3). Parameters: show_labels ( bool , default: True ) \u2013 Whether to display labels on the vertices. Defaults to True. max_dim ( int , default: 5 ) \u2013 Maximum dimension of blocks to include in the graph. Defaults to 5. positions ( dict , default: None ) \u2013 Dictionary of vertex positions. If None, positions are computed automatically. Once computed, they are reused everytime this method is called, unless recompute is set to True. initial_positions ( dict , default: None ) \u2013 Initial positions used to seed the automatic layout algorithm. fixed ( list or None , default: None ) \u2013 List of vertex keys to fix in place when computing positions. Defaults to None. recompute ( bool , default: False ) \u2013 Whether to recompute vertex positions even if already stored. Defaults to False. colors_by_dim ( list of str , default: None ) \u2013 List of colors to use for each dimension. If None, defaults to ['black', 'gray', 'yellow', 'red', 'blue', 'purple']. ax ( Axes3DSubplot , default: None ) \u2013 A Matplotlib Axes object to draw the plot on. If None, a new figure and axes are created. Defaults to None. Returns: \u2013 matplotlib.axes.Axes: Matplotlib axes object containing the drawn graph. Source code in InDelsTopo/complex.py 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 def get_graph ( self , show_labels = True , max_dim = 5 , positions = None , initial_positions = None , fixed = None , recompute = False , colors_by_dim = None , ax = None , ): \"\"\" Generate a graphical representation of the complex up to a specified dimension. Positions of vertices can be computed automatically or provided manually. Only accurate for low-dimensional complexes (typically dim <= 3). Args: show_labels (bool, optional): Whether to display labels on the vertices. Defaults to True. max_dim (int, optional): Maximum dimension of blocks to include in the graph. Defaults to 5. positions (dict, optional): Dictionary of vertex positions. If None, positions are computed automatically. Once computed, they are reused everytime this method is called, unless recompute is set to True. initial_positions (dict, optional): Initial positions used to seed the automatic layout algorithm. fixed (list or None, optional): List of vertex keys to fix in place when computing positions. Defaults to None. recompute (bool, optional): Whether to recompute vertex positions even if already stored. Defaults to False. colors_by_dim (list of str, optional): List of colors to use for each dimension. If None, defaults to ['black', 'gray', 'yellow', 'red', 'blue', 'purple']. ax (matplotlib.axes._subplots.Axes3DSubplot, optional): A Matplotlib Axes object to draw the plot on. If None, a new figure and axes are created. Defaults to None. Returns: matplotlib.axes.Axes: Matplotlib axes object containing the drawn graph. \"\"\" if self . dim == - 1 : return None if ( positions is None ) or recompute : if ( self . _positions_dict is None ) or recompute : self . _positions_dict = graphics . compute_vertex_positions ( self , pos0 = initial_positions , fixed = fixed ) # Make sure position includes all vertices elif any ( vertex not in self . _positions_dict for vertex in self [ 0 ]): # Update with pos0 if isinstance ( initial_positions , dict ): for vertex in initial_positions : self . _positions_dict [ vertex ] = initial_positions [ vertex ] # Compute for all vertices self . _positions_dict = graphics . compute_vertex_positions ( self , pos0 = self . _positions_dict , fixed = list ( self . _positions_dict . keys ()), ) # Get the positions positions = self . _positions_dict ax = graphics . make_graph ( self , pos = positions , show_labels = show_labels , max_dim = max_dim , height = None , already_complex = True , colors_by_dim = colors_by_dim , ax = ax , ) return ax get_homology_sage ( save_chain_complex = False , used_saved_chain_complex = True , ** kwargs ) Return the homology of the associated chain complex using SageMath. This method should be run in a SageMath kernel. It constructs a SageMath chain complex and computes its homology using Sage's built-in homology() method. Parameters: save_chain_complex ( bool , default: False ) \u2013 If True, the chain complex is saved as an attribute ( self._sage_chain_complex ) to speed up future computations. used_saved_chain_complex ( bool , default: True ) \u2013 If True, it will attempt to use the saved chain_complex attribute, otherwise, it will be computed from scratch. **kwargs \u2013 Additional keyword arguments passed directly to SageMath's homology() method. Returns: \u2013 The homology object returned by SageMath. Source code in InDelsTopo/complex.py 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 def get_homology_sage ( self , save_chain_complex = False , used_saved_chain_complex = True , ** kwargs ): \"\"\" Return the homology of the associated chain complex using SageMath. This method should be run in a SageMath kernel. It constructs a SageMath chain complex and computes its homology using Sage's built-in `homology()` method. Parameters: save_chain_complex (bool): If True, the chain complex is saved as an attribute (`self._sage_chain_complex`) to speed up future computations. used_saved_chain_complex (bool): If True, it will attempt to use the saved chain_complex attribute, otherwise, it will be computed from scratch. **kwargs: Additional keyword arguments passed directly to SageMath's `homology()` method. Returns: The homology object returned by SageMath. \"\"\" chain_complex = getattr ( self , \"_sage_chain_complex\" , None ) if not used_saved_chain_complex or chain_complex is None : chain_complex = self . get_chain_complex_sage () if save_chain_complex : self . _sage_chain_complex = chain_complex return chain_complex . homology ( ** kwargs ) get_maximal_blocks () Return the maximal blocks of the complex, ordered by subfaces. A block is maximal if it is not a subface of any higher-dimensional block. The method identifies all such maximal blocks in each dimension and returns them as a dictionary. Returns: \u2013 dict[int, list[Block]]: A dictionary mapping each dimension to a list \u2013 of maximal blocks (i.e., blocks not covered by higher-dimensional ones). Notes Empty dimensions are removed from the output dictionary. Source code in InDelsTopo/complex.py 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 def get_maximal_blocks ( self ): \"\"\" Return the maximal blocks of the complex, ordered by subfaces. A block is maximal if it is not a subface of any higher-dimensional block. The method identifies all such maximal blocks in each dimension and returns them as a dictionary. Returns: dict[int, list[Block]]: A dictionary mapping each dimension to a list of maximal blocks (i.e., blocks not covered by higher-dimensional ones). Notes: - Empty dimensions are removed from the output dictionary. \"\"\" covered_dict = {} max_dim = self . dim if max_dim >= 0 : for dim in range ( max_dim , - 1 , - 1 ): covered_dict [ dim - 1 ] = set ([]) for block in self . complex_dict [ dim ]: covered_dict [ dim - 1 ] . update ( block . get_all_facets ()) # Remove faces covered by a higher one maximal_dict = { max_dim : self . complex_dict [ max_dim ] . copy ()} for dim in range ( max_dim ): maximal_dict [ dim ] = list ( set ( self . complex_dict [ dim ]) . difference ( covered_dict [ dim ]) ) # Remove empty dimensions for dim in range ( max_dim ): if len ( maximal_dict [ dim ]) == 0 : del maximal_dict [ dim ] return maximal_dict return {} remove_blocks ( list_blocks , prod_symbol = None , include_upfaces = True , already_blocks = False ) Remove blocks from the Complex. Deletes specified blocks and optionally their super-faces from the Complex. Intended for expert use only, since the resulting structure may not be a full Insertion Chain Complex C[W], but rather a subcomplex if some supported blocks are missing. Parameters: list_blocks ( list of Block or string ) \u2013 A list of blocks to remove. If already_blocks is False (default), the elements are assumed to be strings representing blocks and will be converted. If True, they are assumed to be existing Block objects. prod_symbol ( str or None , default: None ) \u2013 Product symbol used in block representation ( '*', '.', or ''). If not specified, it is inferred from the input blocks. include_upfaces ( bool , default: True ) \u2013 If True, all super faces of the specified blocks are also removed, so the result is a subcomplex. Default is True. already_blocks ( bool , default: False ) \u2013 If True, the elements of list_blocks are assumed to be valid Block objects. If False (default), the method attempts to convert the input into blocks. Source code in InDelsTopo/complex.py 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 def remove_blocks ( self , list_blocks , prod_symbol = None , include_upfaces = True , already_blocks = False ): \"\"\" Remove blocks from the Complex. Deletes specified blocks and optionally their super-faces from the Complex. Intended for expert use only, since the resulting structure may not be a full Insertion Chain Complex C[W], but rather a subcomplex if some supported blocks are missing. Args: list_blocks (list of Block or string): A list of blocks to remove. If `already_blocks` is False (default), the elements are assumed to be strings representing blocks and will be converted. If True, they are assumed to be existing Block objects. prod_symbol (str or None, optional): Product symbol used in block representation ( '*', '.', or ''). If not specified, it is inferred from the input blocks. include_upfaces (bool, optional): If True, all super faces of the specified blocks are also removed, so the result is a subcomplex. Default is True. already_blocks (bool, optional): If True, the elements of `list_blocks` are assumed to be valid Block objects. If False (default), the method attempts to convert the input into blocks. \"\"\" # Make sure it is a list if not isinstance ( list_blocks , list ): raise TypeError ( \"list_blocks must be a list\" ) # Convert into blocks if needed if not already_blocks : list_blocks , _alphabet , prod_symbol = _convert_words_to_blocks ( list_blocks , prod_symbol = prod_symbol , alphabet = self . _alphabet ) # Dictionary of blocks to remove blocks_to_remove = { i : [] for i in range ( self . dim + 1 )} for block in list_blocks : if block . dim in self . complex_dict and block in self . complex_dict [ block . dim ]: blocks_to_remove [ block . dim ] . append ( block ) # Find super-faces if needed if include_upfaces : for dimension in range ( 1 , self . dim + 1 ): for block in self . complex_dict [ dimension ]: facets = block . get_all_facets () if any ( facet in blocks_to_remove [ dimension - 1 ] for facet in facets ): blocks_to_remove [ dimension ] . append ( block ) # Remove blocks for dimension in blocks_to_remove : for block in blocks_to_remove [ dimension ]: if block in self . complex_dict [ dimension ]: self . complex_dict [ dimension ] . remove ( block ) # Update complex_dict for dimension in range ( self . dim , - 1 , - 1 ): if len ( self . complex_dict [ dimension ]) == 0 : del self . complex_dict [ dimension ] else : break # Recompute dimension self . dim = max ( self . complex_dict , default =- 1 ) Filtration Represents a lower-star filtration on a Letter Insertion Chain Complex C[W], for a set of words W with associated heights. It stores the blocks of the complex at each dimension with their corresponding heights. Provides methods for computing the Euler Characteristic Curve, persistent homology barcodes (with Z/Z2 coefficients), and a graphical representation of (accurate for low dimensions). One can access the k-th dimensional blocks by indexing the filtration as 'K[k]'. This returns a dictionary mapping each k-block to its height. Attributes: dim ( int ) \u2013 Maximum dimension of the filtration. filtration_dict ( dict ) \u2013 Maps dimension d to a dictionary of blocks and their heights. filtration_values ( list ) \u2013 Sorted list of heights used in the filtration. Internal Attributes _alphabet (Alphabet): Alphabet containing all symbols in W. _prod_symbol (str): Product symbol used for constructing blocks ('*', '.', or '' for concatenation). _positions_dict (dict or None): Stores vertex positions for graph representations. Notes It initializes as an empty filtration. It can be made into the filtration of insertion chain complexes of a set of words W by using the method compute_d_skeleton(W, heights) . Blocks can be added or removed by using the methods add_blocks and remove_blocks . Example: W = [\"ab\", \"aab\", \"abb\"] heights = [0.1, 0.3, 0.5] K = Filtration() # Creates an empty complex K.compute_d_skeleton(W, heights, max_dim=5) # makes K = a filtration of C[W] K[1] # Access 1-dimensional blocks and their heights {a(1,a)b: 0.3, ab(1,b): 0.5} Source code in InDelsTopo/filtration.pyclass Filtration : \"\"\" Represents a lower-star filtration on a Letter Insertion Chain Complex C[W], for a set of words W with associated heights. It stores the blocks of the complex at each dimension with their corresponding heights. Provides methods for computing the Euler Characteristic Curve, persistent homology barcodes (with Z/Z2 coefficients), and a graphical representation of (accurate for low dimensions). One can access the k-th dimensional blocks by indexing the filtration as 'K[k]'. This returns a dictionary mapping each k-block to its height. Attributes: dim (int): Maximum dimension of the filtration. filtration_dict (dict): Maps dimension d to a dictionary of blocks and their heights. filtration_values (list): Sorted list of heights used in the filtration. Internal Attributes: _alphabet (Alphabet): Alphabet containing all symbols in W. _prod_symbol (str): Product symbol used for constructing blocks ('*', '.', or '' for concatenation). _positions_dict (dict or None): Stores vertex positions for graph representations. Notes: - It initializes as an empty filtration. It can be made into the filtration of insertion chain complexes of a set of words `W` by using the method `compute_d_skeleton(W, heights)`. - Blocks can be added or removed by using the methods `add_blocks` and `remove_blocks`. Example: >>> W = [\"ab\", \"aab\", \"abb\"] >>> heights = [0.1, 0.3, 0.5] >>> K = Filtration() # Creates an empty complex >>> K.compute_d_skeleton(W, heights, max_dim=5) # makes K = a filtration of C[W] >>> K[1] # Access 1-dimensional blocks and their heights {a(1,a)b: 0.3, ab(1,b): 0.5} \"\"\" def __init__ ( self , alphabet = None , prod_symbol = None ): \"\"\" Returns an empty Filtration object. Args: alphabet (Alphabet, optional): Alphabet object defining valid symbols. If None, a new empty `Alphabet` is created. prod_symbol (str, optional): The product symbol to use. Must be one of {'', '*', '.'}. If None, it is inferred from the expression: set to '*' if '*' appears, to '.' if '.' appears, or to '' (concatenation) otherwise. \"\"\" # User inputs self . _alphabet = alphabet self . _prod_symbol = prod_symbol # Filtration data self . dim = - 1 self . filtration_dict = {} self . filtration_values = [] # Used when creating a graph self . _positions_dict = None def _facets_maximal_word ( self , word , indices , which = \"all\" , casted = False ): \"\"\" Generates the (upper/lower/all) facets of a block given as maximal word-indices pair. Args: w (str or SymPy expression): The maximal word, provided as a string if `casted=False`, or as a processed (casted) word using the `cast_word` method from `Alphabet`. indices (list[int]): A list of indices that are converted into edges to construct a block. which (str, optional): Which facets to produce, must be one of 'upper', 'lower', or 'all'. Defaults to 'all'. casted (bool, optional): Specifies whether the word has been pre-casted using `Alphabet`. If False, it is treated as a string. Defaults to False. Returns: List[Block]: A list of facets. \"\"\" if not casted : word = self . _alphabet . cast_word ( word ) factors = list ( word . as_coeff_mul ()[ 1 ]) upper_factors = [] lower_factors = [] length = len ( factors ) for i in range ( length ): base , exp = factors [ i ] . as_base_exp () if i in indices : upper_factor = self . _alphabet . get ( str ( base ), 1 ) if exp == 1 : lower_factor = int ( 1 ) else : lower_factor = base ** ( exp - 1 ) upper_factors . append ( lower_factor * upper_factor ) if which in [ \"all\" , \"lower\" ]: lower_factors . append ( lower_factor ) else : upper_factors . append ( factors [ i ]) lower_factors . append ( factors [ i ]) upper_facets = [] lower_facets = [] for i in indices : if which in [ \"all\" , \"upper\" ]: block_exp = sym . prod ( upper_factors [: i ] + [ factors [ i ]] + upper_factors [ i + 1 :], start = int ( 1 ), ) block = Block ( str ( block_exp ), prod_symbol = \"*\" , alphabet = self . _alphabet ) # Fix prod_symbol pylint: disable=protected-access block . _prod_symbol = self . _prod_symbol upper_facets . append ( block ) if which in [ \"all\" , \"lower\" ]: block_exp = sym . prod ( upper_factors [: i ] + [ lower_factors [ i ]] + upper_factors [ i + 1 :], start = int ( 1 ), ) block = Block ( str ( block_exp ), prod_symbol = \"*\" , alphabet = self . _alphabet ) lower_facets . append ( block ) # Fix prod_symbol pylint: disable=protected-access block . _prod_symbol = self . _prod_symbol # Filter 0's in lower facets if which in [ \"all\" , \"lower\" ]: while Block () in lower_facets : lower_facets . remove ( Block ()) # Return the result if which == \"upper\" : return upper_facets if which == \"lower\" : return lower_facets return upper_facets + lower_facets def _block_maximal_word ( self , word , indices , casted = False ): \"\"\" Generates block based on the given maximal word and indices. Args: w (str or SymPy expression): The maximal word, provided as a string if `casted=False`, or as a processed (casted) word using the `cast_word` method from `Alphabet`. indices (list[int]): A list of indices that are converted into edges to construct a block. Returns: Block: The block represented by w(indices). \"\"\" if not casted : word = self . _alphabet . cast_word ( word ) factors = list ( word . as_coeff_mul ()[ 1 ]) new_factors = [] length = len ( factors ) for i in range ( length ): base , exp = factors [ i ] . as_base_exp () if i in indices : upper_factor = self . _alphabet . get ( str ( base ), 1 ) if exp == 1 : lower_factor = int ( 1 ) else : lower_factor = base ** ( exp - 1 ) new_factors . append ( lower_factor * upper_factor ) else : new_factors . append ( factors [ i ]) block_exp = sym . prod ( new_factors , start = int ( 1 )) block = Block ( str ( block_exp ), prod_symbol = \"*\" , alphabet = self . _alphabet ) # Fix prod_symbol block . _prod_symbol = self . _prod_symbol # pylint: disable=protected-access return block def _lower_facets_maximal_word_as_pairs ( self , word , indices , casted = False ): \"\"\" Generates the lower facets of a block in word-indices representation, as pairs of maximal word and indices. Args: w (str or SymPy expression: The maximal word, provided as a string if `casted=False`, or as a processed (casted) word using the `cast_word` method from `Alphabet`. indices (list[int]): A list of indices that are converted into edges to construct a block. casted (bool, optional): Specifies whether the word has been pre-casted using `Alphabet`. If False, the word is treated as a string. Defaults to False. Returns: Returns: list[tuple[Expr, list[int]]]: List of pairs `(w, l)`, where `w` is a SymPy expression, and `l` is a list of indices giving the word-indices representation of the lower facets. \"\"\" if not casted : word = self . _alphabet . cast_word ( word ) factors = list ( word . as_coeff_mul ()[ 1 ]) upper_factors = [] lower_factors = [] base_exp_pairs = [ factor . as_base_exp () for factor in factors ] length = len ( base_exp_pairs ) for i in range ( length ): base = base_exp_pairs [ i ][ 0 ] exp = base_exp_pairs [ i ][ 1 ] if i in indices : upper_factor = self . _alphabet . get ( str ( base ), 1 ) if exp == 1 : lower_factor = int ( 1 ) else : lower_factor = base ** ( exp - 1 ) upper_factors . append ( lower_factor * upper_factor ) lower_factors . append ( lower_factor ) else : upper_factors . append ( factors [ i ]) lower_factors . append ( factors [ i ]) lower_facets = [] for i in indices : exp_i = base_exp_pairs [ i ][ 1 ] if i == 0 : base_before = int ( 1 ) else : base_before = base_exp_pairs [ i - 1 ][ 0 ] if i + 1 >= length : base_after = int ( 1 ) else : base_after = base_exp_pairs [ i + 1 ][ 0 ] # Check if the resulting block is valid if ( (( i - 1 ) in indices ) and (( i + 1 ) in indices ) and ( exp_i ) == 1 and ( base_before == base_after ) ): continue # Compute maximal word w_max = sym . prod ( factors [: i ] + [ lower_factors [ i ]] + factors [ i + 1 :], start = int ( 1 ) ) # Compute the new indices new_indices = [ _compute_new_index_lower_facet ( j , i , exp_i , base_before , base_after ) for j in indices if i != j ] lower_facets . append (( w_max , new_indices )) return lower_facets def _check_edge ( self , word1 , word1_extended , word2_extended ): \"\"\" Internal helper function used to check whether two vertices form a 1-block and, if so, construct that 1-block. Assummes |word1|=|word2|+1. Args: word1 (SymPy expression or str): Base word corresponding to the first block. It is assumed that |w_1| = |w_2| + 1. word1_extended (list of tuple): List of (letter, exponent) pairs representing the expanded form of `word1`. word2_extended (list of tuple): List of (letter, exponent) pairs representing the expanded form of the second word. Returns: tuple: - bool: True if `word1` and `word2` are connected. - Block or None: The corresponding 1-block, if an edge is found. - int or None: The index `j` such that the pair (w_1, [j]) gives the 1-block in word\u2013indices form. \"\"\" word1_extended_extra = [ letter for letter , count in word1_extended for _ in range ( count ) ] word2_extended_extra = [ letter for letter , count in word2_extended for _ in range ( count ) ] i = 0 for j , pair in enumerate ( word1_extended ): if ( word2_extended_extra == word1_extended_extra [: i ] + word1_extended_extra [ i + 1 :] ): return True , self . _block_maximal_word ( word1 , [ j ], True ), j i += pair [ 1 ] return False , None , None def _compute_one_skeleton ( self , list_words , list_heights , already_blocks , max_dim = 1 , alphabet = None , prod_symbol = None , verbose = False , check_duplicates = True , ): \"\"\" This is an internal method used to initialize the filtration at dimensions 0 and 1. The filtration and incidence dictionaries are updated in place. Args: list_words (list of str or Block objects): vertices for the filtration. list_heights (list of int): heights associated to the words. already_blocks (bool): If True, assumes the words are already block objects; otherwise, they are converted to blocks. max_dim (int or None): Maximum dimension to compute. Default is 1. alphabet (Alphabet or None): If None, uses `self._alphabet`. prod_symbol (str or None): Symbol used for concatenation in word representations. verbose (bool, optional): If True, prints progress messages. Default is False. check_duplicates (bool, optional): If True, checks that all words are unique. Defaults to True. \"\"\" if alphabet is None : alphabet = self . _alphabet elif not isinstance ( alphabet , Alphabet ): raise ValueError ( \"alphabet must be a valid Alphabet object or None\" ) elif isinstance ( self . _alphabet , Alphabet ): alphabet . update_letters ( self . _alphabet . letters_str ) if verbose : print ( \"Computing dimension 0 \\u2705 \" ) if already_blocks : list_vertices = list_words alphabet = _combine_blocks_alphabet ( list_words , self . _alphabet ) else : list_vertices , alphabet , prod_symbol = _convert_words_to_blocks ( [ str ( w ) for w in list_words ], prod_symbol = prod_symbol , alphabet = self . _alphabet , ) self . _alphabet = alphabet self . _prod_symbol = prod_symbol # Check each word is provided only once if check_duplicates : if len ( list_vertices ) != len ( set ( list_vertices )): raise ValueError ( \"List of words has duplicated words\" ) # Initialize Dictionary at dim=0 self . filtration_dict [ 0 ] = dict ( zip ( list_vertices , list_heights )) if max_dim == 0 : return if verbose : print ( \"Computing dimension 1\" , end = \"\" ) # Computing Graph (dim=1) self . filtration_dict [ 1 ] = dict () self . _incidence_dict [ 1 ] = dict () list_vertices . sort ( key = lambda x : _expand_symp_word ( x . get_expression ())[ 1 ], reverse = True ) list_expanded_vertices = [ _expand_symp_word ( x . get_expression ()) for x in list_vertices ] for i , word1 in enumerate ( list_vertices ): word1_extended , word1_len = list_expanded_vertices [ i ] for j in range ( i + 1 , len ( list_vertices )): word2 = list_vertices [ j ] word2_extended , word2_len = list_expanded_vertices [ j ] if word1_len - word2_len == 1 : is_edge , block , block_index = self . _check_edge ( word1 . get_expression (), word1_extended , word2_extended ) if is_edge : self . filtration_dict [ 1 ][ block ] = max ( self . filtration_dict [ 0 ][ word1 ], self . filtration_dict [ 0 ][ word2 ], ) if word1 . get_expression () in self . _incidence_dict [ 1 ]: self . _incidence_dict [ 1 ][ word1 . get_expression ()] . append ( [ block_index ] ) else : self . _incidence_dict [ 1 ][ word1 . get_expression ()] = [ [ block_index ] ] elif word1_len - word2_len > 1 : break if len ( self . filtration_dict [ 1 ]) == 0 : del self . filtration_dict [ 1 ] def compute_d_skeleton ( self , W , heights = None , max_dim = 10 , alphabet = None , prod_symbol = None , check_duplicates = True , already_blocks = False , verbose = False , ): \"\"\" Compute the d-skeleton of the Insertion Chain Complex generated by a set of words, C[W]. This method replaces any existing data in the Filtration with a new complex supported on `W`. This method constructs all valid blocks up to the specified maximum dimension (`max_dim`) for a given set of words `W` with associated heights. It begins by computing the 0- and 1-skeletons (vertices and edges), then iteratively extends to higher dimensions. It updates the internal `filtration_dict` to the blocks supported on `W`. Args: W (list of str or Block): List of words (or blocks, if `already_blocks=True`) forming the base of the complex. heights (list of float, optional): Height values associated with each word. If None, defaults to ones. max_dim (int, optional): Maximum dimension of the skeleton to compute. Defaults to 10. alphabet (Alphabet, optional): Alphabet object used together with the internal `self._alphabet` and any letters inferred from `W`. If provided, its symbols are merged with `self._alphabet`; otherwise, the new symbols are inferred entirely from the given words. prod_symbol (str, optional): Product symbol for block construction ('*', '.', or ''). If None, inferred automatically. check_duplicates (bool, optional): Whether to verify that input words are unique. Defaults to True. already_blocks (bool, optional): If True, assumes the input `W` is already a list of `Block` objects instead of strings. Defaults to False. verbose (bool, optional): If True, prints progress information during computation. Example: >>> W = ['a*b', 'a*b*b', 'a*a*b',''] >>> K = Filtration() >>> K.compute_d_skeleton(W, heights=[0.1, 0.3, 0.2,0.4], max_dim=2) >>> K[1] {a*b*(1,b): 0.3, a*(1,a)*b: 0.2} \"\"\" if heights is None : heights = [ 1 ] * len ( W ) else : if len ( heights ) != len ( W ): raise ValueError ( \"List of heighst must be same length as list of words, or None\" ) self . filtration_values = list ( set ( heights )) self . filtration_values . sort () # Restart dictionaries self . filtration_dict = {} # Used when computing the d-skeleton self . _incidence_dict = {} # Compute one Skeleton self . _compute_one_skeleton ( W , heights , already_blocks , max_dim , alphabet , prod_symbol , verbose , check_duplicates , ) if max_dim == 1 : self . dim = max ( self . filtration_dict ) return dim = 2 while ( dim <= max_dim ) and len ( self . _incidence_dict [ dim - 1 ]) > 0 : if verbose : print ( \" \\u2705\\n Computing dimension\" , dim , end = \"\" ) self . _incidence_dict [ dim ] = dict () for word in self . _incidence_dict [ dim - 1 ]: indices = self . _incidence_dict [ dim - 1 ][ word ] possible_indices = _candidate_indices_next ( indices ) for k_indices in possible_indices : lower_facets_pairs = self . _lower_facets_maximal_word_as_pairs ( word , k_indices , True ) # Check if lower_facets are all there all_facets_bool = True for w_max , indices_face in lower_facets_pairs : if ( w_max in self . _incidence_dict [ dim - 1 ] and indices_face in self . _incidence_dict [ dim - 1 ][ w_max ] ): continue else : all_facets_bool = False break if all_facets_bool : # Add to incidence dictionary if word in self . _incidence_dict [ dim ]: self . _incidence_dict [ dim ][ word ] . append ( k_indices ) else : self . _incidence_dict [ dim ][ word ] = [ k_indices ] # Compute height of block and add facets = self . _facets_maximal_word ( word , k_indices , which = \"all\" , casted = True ) height = max ( [ self . filtration_dict [ dim - 1 ][ blk ] for blk in facets ] ) block = self . _block_maximal_word ( word , k_indices , True ) if dim in self . filtration_dict : self . filtration_dict [ dim ][ block ] = height else : self . filtration_dict [ dim ] = { block : height } dim += 1 self . dim = max ( self . filtration_dict ) if verbose : print ( \" \\u274C \" ) del self . _incidence_dict def add_blocks ( self , list_blocks , list_heights = None , prod_symbol = None , already_blocks = False , update_values = False , ): \"\"\" Add new blocks to the Filtration. Extends the current Filtration by inserting additional blocks and their faces. This method allows dynamically modifying an existing filtration while ensuring, as much as possible, that the result remains a valid filtration (i.e., if \u03b1 \u2264 \u03b2, then F.get_complex(\u03b1) \u2286 F.get_complex(\u03b2)). Intended for expert use only, since the resulting structure may not always be a full Insertion Chain Complex C[W], but rather a subcomplex if some supporting blocks are missing. The result may depend on the order in which the blocks are provided. The behavior depends on the value of ``update_values``: - If ``update_values=True``, the heights of existing faces and super-faces are updated as needed to maintain the filtration property. This ensures that the new blocks can be inserted with the provided heights. - If ``update_values=False`` (default), the method adds the blocks only if their heights are consistent with the current filtration. Otherwise, the maximum among the heights of their faces is used instead. Args: list_blocks (list[Block] or list[str]): List of blocks to be added to the Filtration. If ``already_blocks`` is False (default), the elements are assumed to be strings representing blocks and will be converted. If True, they are assumed to be existing ``Block`` objects. list_heights (list[float] or float or None, optional): Heights assigned to each block. If a single numeric value is provided, it is used for all blocks. If None, all blocks receive height 1. prod_symbol (str or None, optional): Product symbol used in block representation (e.g., '*', '.', or ''). If not specified, it is inferred from the input blocks. already_blocks (bool, optional): If True, elements of ``list_blocks`` are assumed to be valid ``Block`` objects. If False (default), the method attempts to convert the input into blocks. update_values (bool, optional): If True, existing heights of faces and super-faces are updated as needed to maintain consistency when inserting the new blocks. If False (default), only new faces are added and the provided heights are applied when valid; otherwise, the lowest consistent height is used instead. Raises: ValueError: - If ``list_heights`` is a list whose length does not match ``list_blocks``. - If ``list_heights`` is not a list, a numeric value, or None. - If the height of a block is lower than the height of one of its faces already present in the filtration (when ``update_values=False``). Notes: - The internal alphabet and product symbol are updated to ensure consistency. - The resulting filtration may vary depending on the order in which blocks are inserted. - Updating an existing filtration in this way may be more computationally expensive than reconstructing a new Filtration directly from a set of words. \"\"\" # Convert into blocks if needed if already_blocks : alphabet = _combine_blocks_alphabet ( list_blocks , self . _alphabet ) else : list_blocks , alphabet , prod_symbol = _convert_words_to_blocks ( list_blocks , prod_symbol = prod_symbol , alphabet = self . _alphabet ) self . _alphabet = alphabet # Uniformalize prod_symbols pylint: disable=protected-access new_prods = [ blk . _prod_symbol for blk in list_blocks ] + [ self . _prod_symbol ] if \"*\" in new_prods : prod_symbol = \"*\" elif \".\" in new_prods : prod_symbol = \".\" else : prod_symbol = \"\" self . _prod_symbol = prod_symbol for blk in list_blocks : blk . _prod_symbol = self . _prod_symbol if list_heights is None : list_heights = [ 1 ] * len ( list_blocks ) elif isinstance ( list_heights , list ): # Check lengths agree if len ( list_blocks ) != len ( list_heights ): raise ValueError ( \"list_heights must be same length as list_blocks\" ) else : try : height = float ( list_heights ) list_heights = [ height ] * len ( list_blocks ) except BaseException : raise ValueError ( \"list_heights must be a list, a numeric value, or None\" ) for block , height in zip ( list_blocks , list_heights ): dim = block . dim # Ensure a dictionary exists for this dimension if dim not in self . filtration_dict : self . filtration_dict [ dim ] = {} # Add or update the main block current_height = self . filtration_dict [ dim ] . get ( block ) if current_height is None or update_values : self . filtration_dict [ dim ][ block ] = height # Update or add all faces for face in block . get_all_faces ( include_self = False ): f_dim = face . dim if f_dim not in self . filtration_dict : self . filtration_dict [ f_dim ] = {} current_height = self . filtration_dict [ f_dim ] . get ( face ) if current_height is None : # New face \u2014 assign current block's height self . filtration_dict [ f_dim ][ face ] = height elif update_values : # Keep the lowest (earliest) height to preserve filtration # order self . filtration_dict [ f_dim ][ face ] = min ( current_height , height ) # Recompute dimension self . dim = max ( self . filtration_dict , default =- 1 ) # Fix values so the result is a filtration for dim in range ( 1 , self . dim + 1 ): for block in self . filtration_dict [ dim ]: facets = block . get_all_facets () all_heights = [ self . filtration_dict [ dim ][ block ]] + [ self . filtration_dict [ dim - 1 ][ facet ] for facet in facets ] new_height = max ( all_heights ) self . filtration_dict [ dim ][ block ] = new_height # Add filtration values self . filtration_values += list_heights self . filtration_values = list ( set ( self . filtration_values )) self . filtration_values . sort () def remove_blocks ( self , list_blocks , prod_symbol = None , include_upfaces = True , already_blocks = False ): \"\"\" Remove blocks from the Filtration. Deletes specified blocks and optionally their super-faces from the Complex. Intended for expert use only, since the resulting structure may not be a full Insertion Chain Complex C[W], but rather a subcomplex if some supported blocks are missing. Args: list_blocks (list of Block or string): A list of blocks to remove. If `already_blocks` is False (default), the elements are assumed to be strings representing blocks and will be converted. If True, they are assumed to be existing Block objects. prod_symbol (str or None, optional): Product symbol used in block representation ( '*', '.', or ''). If not specified, it is inferred from the input blocks. include_upfaces (bool, optional): If True, all super faces of the specified blocks are also removed, so the result is a subcomplex. Default is True. already_blocks (bool, optional): If True, the elements of `list_blocks` are assumed to be valid Block objects. If False (default), the method attempts to convert the input into blocks. \"\"\" # Make sure it is a list if not isinstance ( list_blocks , list ): raise TypeError ( \"list_blocks must be a list\" ) # Convert into blocks if needed if not already_blocks : list_blocks , _alphabet , prod_symbol = _convert_words_to_blocks ( list_blocks , prod_symbol = prod_symbol , alphabet = self . _alphabet ) # Dictionary of blocks to remove blocks_to_remove = { i : [] for i in range ( self . dim + 1 )} for block in list_blocks : if ( block . dim in self . filtration_dict and block in self . filtration_dict [ block . dim ] ): blocks_to_remove [ block . dim ] . append ( block ) # Find super-faces if needed if include_upfaces : for dimension in range ( 1 , self . dim + 1 ): for block in self . filtration_dict [ dimension ]: facets = block . get_all_facets () if any ( facet in blocks_to_remove [ dimension - 1 ] for facet in facets ): blocks_to_remove [ dimension ] . append ( block ) # Remove blocks for dimension in blocks_to_remove : for block in blocks_to_remove [ dimension ]: if block in self . filtration_dict [ dimension ]: del self . filtration_dict [ dimension ][ block ] # Update filtration_dict for dimension in range ( self . dim , - 1 , - 1 ): if len ( self . filtration_dict [ dimension ]) == 0 : del self . filtration_dict [ dimension ] else : break # Update filtration values self . filtration_values = list ( { val for dimension_dict in self . filtration_dict . values () for val in dimension_dict . values () } ) self . filtration_values . sort () # Recompute dimension self . dim = max ( self . filtration_dict , default =- 1 ) def get_complex ( self , height = None , max_dim = None ): \"\"\" Constructs and returns a Complex object that includes all blocks from the filtration whose height is less than or equal to the specified value. The construction can also be limited to a specified maximum dimension. Args: height (float or int, optional): The maximum filtration value to include. If None, the largest available filtration value is used. max_dim (int, optional): The maximum dimension to include in the complex. If None, the full dimension of the filtration is used. Returns: Complex: A Complex object containing all blocks up to the specified height and dimension. \"\"\" from InDelsTopo.complex import ( Complex , ) # pylint: disable=import-outside-toplevel if height is None : height = max ( self . filtration_values , default = np . inf ) if max_dim is None : max_dim = self . dim max_dim = min ( self . dim , max_dim ) complex_dict = { dim : [ block for block in self . filtration_dict [ dim ] if self . filtration_dict [ dim ][ block ] <= height ] for dim in range ( max_dim + 1 ) } for dim in range ( max_dim , - 1 , - 1 ): if len ( complex_dict [ dim ]) == 0 : del complex_dict [ dim ] else : break return Complex ( alphabet = self . _alphabet , prod_symbol = self . _prod_symbol , complex_dict = complex_dict , height = height , ) def get_euler_curve ( self , x_values = None ): \"\"\" This method evaluates the Euler characteristic of the complex at different filtration heights and returns the resulting curve as paired x- and y-values. Args: x_values (list of float or int, optional): Filtration heights at which to compute the Euler characteristic. If None, all existing filtration values are used. Returns: tuple: - list of float or int: Sorted filtration heights (x-values). - list of int: Corresponding Euler characteristic values (y-values). \"\"\" if x_values is None : x_values = self . filtration_values x_values . sort () y_values = [ self . get_complex ( h ) . euler_characteristic () for h in x_values ] return x_values , y_values def get_persistent_homology_barcodes ( self , max_dim = None , inf_value = np . inf , get_height_indices = False ): \"\"\" Compute persistent homology barcodes for the filtration using Z2 coefficients. The method performs a lower-star filtration on the complex according to the vertex heights and computes persistent homology up to the specified dimension. Args: max_dim (int, optional): Maximum dimension to compute accurately. The skeleton of dimension up to max_dim+1 is used for this computation if it was previously computed. If None or greater than the filtration's dimension, all dimensions are included. inf_value (float, optional): Value to assign to features that do not die within the filtration. Defaults to infinity. get_height_indices (bool, optional): If True, also return the indices corresponding to the birth and death heights in the filtration. Defaults to False. Returns: dict or tuple: - If `get_height_indices=False`: A dictionary mapping dimension `d` to a list of tuples `(birth, death)` representing persistent homology intervals. - If `get_height_indices=True`: A tuple of two dictionaries: 1. Barcodes as above. 2. Corresponding indices of birth and death heights in `filtration_values`. Notes: The algorithm uses a boundary matrix over Z2 and reduces it following the standard persistence algorithm (see arxiv:1506.08903). Features that never die are assigned `inf_value` as their death time. \"\"\" # Import csc_matrix from scipy.sparse import csc_matrix # pylint: disable=import-outside-toplevel if max_dim is None or max_dim >= self . dim : max_dim = self . dim using_skeleton = False elif max_dim == self . dim - 1 : max_dim = self . dim using_skeleton = True else : max_dim += 1 using_skeleton = True # Order the blocks according to their dimension and height ordered_blocks = [] for dimension in range ( max_dim + 1 ): ordered_blocks += self [ dimension ] ordered_blocks . sort ( key = lambda blk : ( self [ blk . dim ][ blk ], blk . dim )) ordered_blocks_dict = { ordered_blocks [ i ]: i for i in range ( len ( ordered_blocks ))} heights = [ self [ blk . dim ][ blk ] for blk in ordered_blocks ] # Construct the boundary matrix cols = [] rows = [] data = [] for id_col , blk in enumerate ( ordered_blocks ): facets = blk . get_all_facets () for facet in facets : cols . append ( id_col ) rows . append ( ordered_blocks_dict [ facet ]) data . append ( 1 ) N = len ( ordered_blocks ) boundary_matrix = csc_matrix (( data , ( rows , cols )), shape = ( N , N )) . tolil () # Perform row reduction (we follow the algorithm from # https://arxiv.org/pdf/1506.08903) low = [] # maps row index to pivot column index barcodes = {} if get_height_indices : barcodes_indices = {} height_indices = { self . filtration_values [ i ]: i for i in range ( len ( self . filtration_values )) } for j in range ( N ): col = boundary_matrix . getcol ( j ) if col . nnz > 0 : # Set initial value for low(j) low_j = col . nonzero ()[ 0 ][ - 1 ] while low_j in low : i = low . index ( low_j ) # add column i to column j col = col + boundary_matrix . getcol ( i ) col . data = col . data % 2 # Make adition modulo 2 col . eliminate_zeros () if col . nnz > 0 : low_j = col . nonzero ()[ 0 ][ - 1 ] # update low_j value else : low_j = - 1 break boundary_matrix [:, j ] = col # update column j in the matrix low . append ( low_j ) # Save value for low_j else : # Set -1, for undefined low(j) low . append ( - 1 ) # Extract (birth, death) pairs for j , low_j in enumerate ( low ): if low_j >= 0 : birth = heights [ low_j ] death = heights [ j ] if death > birth : dim = ordered_blocks [ low_j ] . dim if dim not in barcodes : barcodes [ dim ] = [] if get_height_indices : barcodes_indices [ dim ] = [] barcodes [ dim ] . append (( birth , death )) if get_height_indices : barcodes_indices [ dim ] . append ( ( height_indices [ birth ], height_indices [ death ]) ) elif j not in low : birth = heights [ j ] dim = ordered_blocks [ j ] . dim if dim not in barcodes : barcodes [ dim ] = [] if get_height_indices : barcodes_indices [ dim ] = [] barcodes [ dim ] . append (( birth , inf_value )) if get_height_indices : barcodes_indices [ dim ] . append (( height_indices [ birth ], np . inf )) if using_skeleton : if max_dim in barcodes : del barcodes [ max_dim ] if get_height_indices : del barcodes_indices [ max_dim ] if get_height_indices : return barcodes , barcodes_indices return barcodes def get_graph ( self , height = None , height_id = None , show_labels = True , max_dim = 5 , positions = None , initial_positions = None , fixed = None , recompute = False , colors_by_dim = None , ax = None , ): \"\"\" Generate a graphical representation of the filtration up to a specified dimension. Positions of vertices can be computed automatically or provided manually. Only accurate for low-dimensional complexes (typically dim <= 3). Args: height (float, optional): Maximum height value for including blocks in the graph. Defaults to the maximum filtration value. height_id (int, optional): Index into the sorted list of filtration values. Used if `height` is None. Defaults to None. show_labels (bool, optional): Whether to display labels on the vertices. Defaults to True. max_dim (int, optional): Maximum dimension of blocks to include in the graph. Defaults to 5. positions (dict, optional): Dictionary of vertex positions. If None, positions are computed automatically. Once computed, they are reused everytime this method is called, unless recompute is set to True. initial_positions (dict, optional): Initial positions used to seed the automatic layout algorithm. fixed (list or None, optional): List of vertex keys to fix in place when computing positions. Defaults to None. recompute (bool, optional): Whether to recompute vertex positions even if already stored. Defaults to False. colors_by_dim (list of str, optional): List of colors to use for each dimension. If None, defaults to ['black', 'gray', 'yellow', 'red', 'blue', 'purple']. ax (matplotlib.axes._subplots.Axes3DSubplot, optional): A Matplotlib Axes object to draw the plot on. If None, a new figure and axes are created. Defaults to None. Returns: matplotlib.axes.Axes: Matplotlib axes object containing the drawn graph. \"\"\" if self . dim == - 1 : return None if ( positions is None ) or recompute : if ( self . _positions_dict is None ) or recompute : self . _positions_dict = graphics . compute_vertex_positions ( self , pos0 = initial_positions , fixed = fixed ) # Make sure position includes all vertices elif any ( vertex not in self . _positions_dict for vertex in self [ 0 ]): # Update with pos0 if isinstance ( initial_positions , dict ): for vertex in initial_positions : self . _positions_dict [ vertex ] = initial_positions [ vertex ] # Compute for all vertices self . _positions_dict = graphics . compute_vertex_positions ( self , pos0 = self . _positions_dict , fixed = list ( self . _positions_dict . keys ()), ) # Get the positions positions = self . _positions_dict if height is None : try : height = self . filtration_values [ height_id ] except BaseException : height = max ( self . filtration_values , default = np . inf ) ax = graphics . make_graph ( self , pos = positions , show_labels = show_labels , max_dim = max_dim , height = height , already_complex = False , colors_by_dim = colors_by_dim , ax = ax , ) return ax def __str__ ( self ): to_print = \"Filtration of Insertion Chain Complexes: \\n \" to_print += \"alphabet: \" + str ( self . _alphabet ) + \". \\n \" try : filtration_values_range = ( \"[\" + str ( self . filtration_values [ 0 ]) + \",\" + str ( self . filtration_values [ - 1 ]) + \"]\" ) except BaseException : filtration_values_range = \"[]\" to_print += \"heights in: \" + filtration_values_range + \". \\n \" to_print += \"dimension: \" + str ( self . dim ) + \". \\n \" to_print += \"vertices: \" + str ( len ( self [ 0 ])) + \". \\n \" to_print += ( \"blocks: \" + str ( sum ([ len ( self [ k ]) for k in range ( self . dim + 1 )])) + \".\" ) return to_print def __repr__ ( self ): return self . __str__ () def __getitem__ ( self , key ): if 0 <= key <= self . dim : return self . filtration_dict [ key ] return {} def get_alphabet ( self ): \"\"\"Returns the alphabet attribute.\"\"\" return self . _alphabet def get_block_height ( self , block , already_block = False ): \"\"\" Returns the height of the block in the filtration or None if it is not in the filtration. Args: block (Block or string): A block to check its height. If `already_blocks` is False (default), it is assumed to be a string representing the block. If True, it is assumed to be an existing Block object. already_block (bool, optional): If True, `block` is assumed to be a valid Block object. If False (default), the method attempts to convert the input into a block. \"\"\" # Convert into blocks if needed if not already_block : block = Block ( block , prod_symbol = self . _prod_symbol , alphabet = self . _alphabet ) dim = block . dim if block in self [ dim ]: return self [ dim ][ block ] return None __init__ ( alphabet = None , prod_symbol = None ) Returns an empty Filtration object. Parameters: alphabet ( Alphabet , default: None ) \u2013 Alphabet object defining valid symbols. If None, a new empty Alphabet is created. prod_symbol ( str , default: None ) \u2013 The product symbol to use. Must be one of {'', ' ', '.'}. If None, it is inferred from the expression: set to ' ' if '*' appears, to '.' if '.' appears, or to '' (concatenation) otherwise. Source code in InDelsTopo/filtration.py 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 def __init__ ( self , alphabet = None , prod_symbol = None ): \"\"\" Returns an empty Filtration object. Args: alphabet (Alphabet, optional): Alphabet object defining valid symbols. If None, a new empty `Alphabet` is created. prod_symbol (str, optional): The product symbol to use. Must be one of {'', '*', '.'}. If None, it is inferred from the expression: set to '*' if '*' appears, to '.' if '.' appears, or to '' (concatenation) otherwise. \"\"\" # User inputs self . _alphabet = alphabet self . _prod_symbol = prod_symbol # Filtration data self . dim = - 1 self . filtration_dict = {} self . filtration_values = [] # Used when creating a graph self . _positions_dict = None add_blocks ( list_blocks , list_heights = None , prod_symbol = None , already_blocks = False , update_values = False ) Add new blocks to the Filtration. Extends the current Filtration by inserting additional blocks and their faces. This method allows dynamically modifying an existing filtration while ensuring, as much as possible, that the result remains a valid filtration (i.e., if \u03b1 \u2264 \u03b2, then F.get_complex(\u03b1) \u2286 F.get_complex(\u03b2)). Intended for expert use only, since the resulting structure may not always be a full Insertion Chain Complex C[W], but rather a subcomplex if some supporting blocks are missing. The result may depend on the order in which the blocks are provided. The behavior depends on the value of update_values : - If ``update_values=True``, the heights of existing faces and super-faces are updated as needed to maintain the filtration property. This ensures that the new blocks can be inserted with the provided heights. - If ``update_values=False`` (default), the method adds the blocks only if their heights are consistent with the current filtration. Otherwise, the maximum among the heights of their faces is used instead. Parameters: list_blocks ( list [ Block ] or list [ str ] ) \u2013 List of blocks to be added to the Filtration. If already_blocks is False (default), the elements are assumed to be strings representing blocks and will be converted. If True, they are assumed to be existing Block objects. list_heights ( list [ float ] or float or None , default: None ) \u2013 Heights assigned to each block. If a single numeric value is provided, it is used for all blocks. If None, all blocks receive height 1. prod_symbol ( str or None , default: None ) \u2013 Product symbol used in block representation (e.g., '*', '.', or ''). If not specified, it is inferred from the input blocks. already_blocks ( bool , default: False ) \u2013 If True, elements of list_blocks are assumed to be valid Block objects. If False (default), the method attempts to convert the input into blocks. update_values ( bool , default: False ) \u2013 If True, existing heights of faces and super-faces are updated as needed to maintain consistency when inserting the new blocks. If False (default), only new faces are added and the provided heights are applied when valid; otherwise, the lowest consistent height is used instead. Raises: ValueError \u2013 If list_heights is a list whose length does not match list_blocks . If list_heights is not a list, a numeric value, or None. If the height of a block is lower than the height of one of its faces already present in the filtration (when update_values=False ). Notes The internal alphabet and product symbol are updated to ensure consistency. The resulting filtration may vary depending on the order in which blocks are inserted. Updating an existing filtration in this way may be more computationally expensive than reconstructing a new Filtration directly from a set of words. Source code in InDelsTopo/filtration.pydef add_blocks ( self , list_blocks , list_heights = None , prod_symbol = None , already_blocks = False , update_values = False , ): \"\"\" Add new blocks to the Filtration. Extends the current Filtration by inserting additional blocks and their faces. This method allows dynamically modifying an existing filtration while ensuring, as much as possible, that the result remains a valid filtration (i.e., if \u03b1 \u2264 \u03b2, then F.get_complex(\u03b1) \u2286 F.get_complex(\u03b2)). Intended for expert use only, since the resulting structure may not always be a full Insertion Chain Complex C[W], but rather a subcomplex if some supporting blocks are missing. The result may depend on the order in which the blocks are provided. The behavior depends on the value of ``update_values``: - If ``update_values=True``, the heights of existing faces and super-faces are updated as needed to maintain the filtration property. This ensures that the new blocks can be inserted with the provided heights. - If ``update_values=False`` (default), the method adds the blocks only if their heights are consistent with the current filtration. Otherwise, the maximum among the heights of their faces is used instead. Args: list_blocks (list[Block] or list[str]): List of blocks to be added to the Filtration. If ``already_blocks`` is False (default), the elements are assumed to be strings representing blocks and will be converted. If True, they are assumed to be existing ``Block`` objects. list_heights (list[float] or float or None, optional): Heights assigned to each block. If a single numeric value is provided, it is used for all blocks. If None, all blocks receive height 1. prod_symbol (str or None, optional): Product symbol used in block representation (e.g., '*', '.', or ''). If not specified, it is inferred from the input blocks. already_blocks (bool, optional): If True, elements of ``list_blocks`` are assumed to be valid ``Block`` objects. If False (default), the method attempts to convert the input into blocks. update_values (bool, optional): If True, existing heights of faces and super-faces are updated as needed to maintain consistency when inserting the new blocks. If False (default), only new faces are added and the provided heights are applied when valid; otherwise, the lowest consistent height is used instead. Raises: ValueError: - If ``list_heights`` is a list whose length does not match ``list_blocks``. - If ``list_heights`` is not a list, a numeric value, or None. - If the height of a block is lower than the height of one of its faces already present in the filtration (when ``update_values=False``). Notes: - The internal alphabet and product symbol are updated to ensure consistency. - The resulting filtration may vary depending on the order in which blocks are inserted. - Updating an existing filtration in this way may be more computationally expensive than reconstructing a new Filtration directly from a set of words. \"\"\" # Convert into blocks if needed if already_blocks : alphabet = _combine_blocks_alphabet ( list_blocks , self . _alphabet ) else : list_blocks , alphabet , prod_symbol = _convert_words_to_blocks ( list_blocks , prod_symbol = prod_symbol , alphabet = self . _alphabet ) self . _alphabet = alphabet # Uniformalize prod_symbols pylint: disable=protected-access new_prods = [ blk . _prod_symbol for blk in list_blocks ] + [ self . _prod_symbol ] if \"*\" in new_prods : prod_symbol = \"*\" elif \".\" in new_prods : prod_symbol = \".\" else : prod_symbol = \"\" self . _prod_symbol = prod_symbol for blk in list_blocks : blk . _prod_symbol = self . _prod_symbol if list_heights is None : list_heights = [ 1 ] * len ( list_blocks ) elif isinstance ( list_heights , list ): # Check lengths agree if len ( list_blocks ) != len ( list_heights ): raise ValueError ( \"list_heights must be same length as list_blocks\" ) else : try : height = float ( list_heights ) list_heights = [ height ] * len ( list_blocks ) except BaseException : raise ValueError ( \"list_heights must be a list, a numeric value, or None\" ) for block , height in zip ( list_blocks , list_heights ): dim = block . dim # Ensure a dictionary exists for this dimension if dim not in self . filtration_dict : self . filtration_dict [ dim ] = {} # Add or update the main block current_height = self . filtration_dict [ dim ] . get ( block ) if current_height is None or update_values : self . filtration_dict [ dim ][ block ] = height # Update or add all faces for face in block . get_all_faces ( include_self = False ): f_dim = face . dim if f_dim not in self . filtration_dict : self . filtration_dict [ f_dim ] = {} current_height = self . filtration_dict [ f_dim ] . get ( face ) if current_height is None : # New face \u2014 assign current block's height self . filtration_dict [ f_dim ][ face ] = height elif update_values : # Keep the lowest (earliest) height to preserve filtration # order self . filtration_dict [ f_dim ][ face ] = min ( current_height , height ) # Recompute dimension self . dim = max ( self . filtration_dict , default =- 1 ) # Fix values so the result is a filtration for dim in range ( 1 , self . dim + 1 ): for block in self . filtration_dict [ dim ]: facets = block . get_all_facets () all_heights = [ self . filtration_dict [ dim ][ block ]] + [ self . filtration_dict [ dim - 1 ][ facet ] for facet in facets ] new_height = max ( all_heights ) self . filtration_dict [ dim ][ block ] = new_height # Add filtration values self . filtration_values += list_heights self . filtration_values = list ( set ( self . filtration_values )) self . filtration_values . sort () compute_d_skeleton ( W , heights = None , max_dim = 10 , alphabet = None , prod_symbol = None , check_duplicates = True , already_blocks = False , verbose = False ) Compute the d-skeleton of the Insertion Chain Complex generated by a set of words, C[W]. This method replaces any existing data in the Filtration with a new complex supported on W . This method constructs all valid blocks up to the specified maximum dimension ( max_dim ) for a given set of words W with associated heights. It begins by computing the 0- and 1-skeletons (vertices and edges), then iteratively extends to higher dimensions. It updates the internal filtration_dict to the blocks supported on W . Parameters: W ( list of str or Block ) \u2013 List of words (or blocks, if already_blocks=True ) forming the base of the complex. heights ( list of float , default: None ) \u2013 Height values associated with each word. If None, defaults to ones. max_dim ( int , default: 10 ) \u2013 Maximum dimension of the skeleton to compute. Defaults to 10. alphabet ( Alphabet , default: None ) \u2013 Alphabet object used together with the internal self._alphabet and any letters inferred from W . If provided, its symbols are merged with self._alphabet ; otherwise, the new symbols are inferred entirely from the given words. prod_symbol ( str , default: None ) \u2013 Product symbol for block construction ('*', '.', or ''). If None, inferred automatically. check_duplicates ( bool , default: True ) \u2013 Whether to verify that input words are unique. Defaults to True. already_blocks ( bool , default: False ) \u2013 If True, assumes the input W is already a list of Block objects instead of strings. Defaults to False. verbose ( bool , default: False ) \u2013 If True, prints progress information during computation. Example W = ['a b', 'a b b', 'a a b',''] K = Filtration() K.compute_d_skeleton(W, heights=[0.1, 0.3, 0.2,0.4], max_dim=2) K[1] {a b (1,b): 0.3, a (1,a)*b: 0.2} Source code in InDelsTopo/filtration.pydef compute_d_skeleton ( self , W , heights = None , max_dim = 10 , alphabet = None , prod_symbol = None , check_duplicates = True , already_blocks = False , verbose = False , ): \"\"\" Compute the d-skeleton of the Insertion Chain Complex generated by a set of words, C[W]. This method replaces any existing data in the Filtration with a new complex supported on `W`. This method constructs all valid blocks up to the specified maximum dimension (`max_dim`) for a given set of words `W` with associated heights. It begins by computing the 0- and 1-skeletons (vertices and edges), then iteratively extends to higher dimensions. It updates the internal `filtration_dict` to the blocks supported on `W`. Args: W (list of str or Block): List of words (or blocks, if `already_blocks=True`) forming the base of the complex. heights (list of float, optional): Height values associated with each word. If None, defaults to ones. max_dim (int, optional): Maximum dimension of the skeleton to compute. Defaults to 10. alphabet (Alphabet, optional): Alphabet object used together with the internal `self._alphabet` and any letters inferred from `W`. If provided, its symbols are merged with `self._alphabet`; otherwise, the new symbols are inferred entirely from the given words. prod_symbol (str, optional): Product symbol for block construction ('*', '.', or ''). If None, inferred automatically. check_duplicates (bool, optional): Whether to verify that input words are unique. Defaults to True. already_blocks (bool, optional): If True, assumes the input `W` is already a list of `Block` objects instead of strings. Defaults to False. verbose (bool, optional): If True, prints progress information during computation. Example: >>> W = ['a*b', 'a*b*b', 'a*a*b',''] >>> K = Filtration() >>> K.compute_d_skeleton(W, heights=[0.1, 0.3, 0.2,0.4], max_dim=2) >>> K[1] {a*b*(1,b): 0.3, a*(1,a)*b: 0.2} \"\"\" if heights is None : heights = [ 1 ] * len ( W ) else : if len ( heights ) != len ( W ): raise ValueError ( \"List of heighst must be same length as list of words, or None\" ) self . filtration_values = list ( set ( heights )) self . filtration_values . sort () # Restart dictionaries self . filtration_dict = {} # Used when computing the d-skeleton self . _incidence_dict = {} # Compute one Skeleton self . _compute_one_skeleton ( W , heights , already_blocks , max_dim , alphabet , prod_symbol , verbose , check_duplicates , ) if max_dim == 1 : self . dim = max ( self . filtration_dict ) return dim = 2 while ( dim <= max_dim ) and len ( self . _incidence_dict [ dim - 1 ]) > 0 : if verbose : print ( \" \\u2705\\n Computing dimension\" , dim , end = \"\" ) self . _incidence_dict [ dim ] = dict () for word in self . _incidence_dict [ dim - 1 ]: indices = self . _incidence_dict [ dim - 1 ][ word ] possible_indices = _candidate_indices_next ( indices ) for k_indices in possible_indices : lower_facets_pairs = self . _lower_facets_maximal_word_as_pairs ( word , k_indices , True ) # Check if lower_facets are all there all_facets_bool = True for w_max , indices_face in lower_facets_pairs : if ( w_max in self . _incidence_dict [ dim - 1 ] and indices_face in self . _incidence_dict [ dim - 1 ][ w_max ] ): continue else : all_facets_bool = False break if all_facets_bool : # Add to incidence dictionary if word in self . _incidence_dict [ dim ]: self . _incidence_dict [ dim ][ word ] . append ( k_indices ) else : self . _incidence_dict [ dim ][ word ] = [ k_indices ] # Compute height of block and add facets = self . _facets_maximal_word ( word , k_indices , which = \"all\" , casted = True ) height = max ( [ self . filtration_dict [ dim - 1 ][ blk ] for blk in facets ] ) block = self . _block_maximal_word ( word , k_indices , True ) if dim in self . filtration_dict : self . filtration_dict [ dim ][ block ] = height else : self . filtration_dict [ dim ] = { block : height } dim += 1 self . dim = max ( self . filtration_dict ) if verbose : print ( \" \\u274C \" ) del self . _incidence_dict get_alphabet () Returns the alphabet attribute. Source code in InDelsTopo/filtration.py 1215 1216 1217 def get_alphabet ( self ): \"\"\"Returns the alphabet attribute.\"\"\" return self . _alphabet get_block_height ( block , already_block = False ) Returns the height of the block in the filtration or None if it is not in the filtration. Parameters: block ( Block or string ) \u2013 A block to check its height. If already_blocks is False (default), already_block ( bool , default: False ) \u2013 If True, block is assumed to be a valid Block object. If False (default), the method attempts to convert the input into a block. Source code in InDelsTopo/filtration.py 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 def get_block_height ( self , block , already_block = False ): \"\"\" Returns the height of the block in the filtration or None if it is not in the filtration. Args: block (Block or string): A block to check its height. If `already_blocks` is False (default), it is assumed to be a string representing the block. If True, it is assumed to be an existing Block object. already_block (bool, optional): If True, `block` is assumed to be a valid Block object. If False (default), the method attempts to convert the input into a block. \"\"\" # Convert into blocks if needed if not already_block : block = Block ( block , prod_symbol = self . _prod_symbol , alphabet = self . _alphabet ) dim = block . dim if block in self [ dim ]: return self [ dim ][ block ] return None get_complex ( height = None , max_dim = None ) Constructs and returns a Complex object that includes all blocks from the filtration whose height is less than or equal to the specified value. The construction can also be limited to a specified maximum dimension. Parameters: height ( float or int , default: None ) \u2013 The maximum filtration value to include. If None, the largest available filtration value is used. max_dim ( int , default: None ) \u2013 The maximum dimension to include in the complex. If None, the full dimension of the filtration is used. Returns: Complex \u2013 A Complex object containing all blocks up to the specified height and dimension. Source code in InDelsTopo/filtration.py 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 def get_complex ( self , height = None , max_dim = None ): \"\"\" Constructs and returns a Complex object that includes all blocks from the filtration whose height is less than or equal to the specified value. The construction can also be limited to a specified maximum dimension. Args: height (float or int, optional): The maximum filtration value to include. If None, the largest available filtration value is used. max_dim (int, optional): The maximum dimension to include in the complex. If None, the full dimension of the filtration is used. Returns: Complex: A Complex object containing all blocks up to the specified height and dimension. \"\"\" from InDelsTopo.complex import ( Complex , ) # pylint: disable=import-outside-toplevel if height is None : height = max ( self . filtration_values , default = np . inf ) if max_dim is None : max_dim = self . dim max_dim = min ( self . dim , max_dim ) complex_dict = { dim : [ block for block in self . filtration_dict [ dim ] if self . filtration_dict [ dim ][ block ] <= height ] for dim in range ( max_dim + 1 ) } for dim in range ( max_dim , - 1 , - 1 ): if len ( complex_dict [ dim ]) == 0 : del complex_dict [ dim ] else : break return Complex ( alphabet = self . _alphabet , prod_symbol = self . _prod_symbol , complex_dict = complex_dict , height = height , ) get_euler_curve ( x_values = None ) This method evaluates the Euler characteristic of the complex at different filtration heights and returns the resulting curve as paired x- and y-values. Parameters: x_values ( list of float or int , default: None ) \u2013 Filtration heights at which to compute the Euler characteristic. If None, all existing filtration values are used. Returns: tuple \u2013 list of float or int: Sorted filtration heights (x-values). list of int: Corresponding Euler characteristic values (y-values). Source code in InDelsTopo/filtration.py 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 def get_euler_curve ( self , x_values = None ): \"\"\" This method evaluates the Euler characteristic of the complex at different filtration heights and returns the resulting curve as paired x- and y-values. Args: x_values (list of float or int, optional): Filtration heights at which to compute the Euler characteristic. If None, all existing filtration values are used. Returns: tuple: - list of float or int: Sorted filtration heights (x-values). - list of int: Corresponding Euler characteristic values (y-values). \"\"\" if x_values is None : x_values = self . filtration_values x_values . sort () y_values = [ self . get_complex ( h ) . euler_characteristic () for h in x_values ] return x_values , y_values get_graph ( height = None , height_id = None , show_labels = True , max_dim = 5 , positions = None , initial_positions = None , fixed = None , recompute = False , colors_by_dim = None , ax = None ) Generate a graphical representation of the filtration up to a specified dimension. Positions of vertices can be computed automatically or provided manually. Only accurate for low-dimensional complexes (typically dim <= 3). Parameters: height ( float , default: None ) \u2013 Maximum height value for including blocks in the graph. Defaults to the maximum filtration value. height_id ( int , default: None ) \u2013 Index into the sorted list of filtration values. Used if height is None. Defaults to None. show_labels ( bool , default: True ) \u2013 Whether to display labels on the vertices. Defaults to True. max_dim ( int , default: 5 ) \u2013 Maximum dimension of blocks to include in the graph. Defaults to 5. positions ( dict , default: None ) \u2013 Dictionary of vertex positions. If None, positions are computed automatically. Once computed, they are reused everytime this method is called, unless recompute is set to True. initial_positions ( dict , default: None ) \u2013 Initial positions used to seed the automatic layout algorithm. fixed ( list or None , default: None ) \u2013 List of vertex keys to fix in place when computing positions. Defaults to None. recompute ( bool , default: False ) \u2013 Whether to recompute vertex positions even if already stored. Defaults to False. colors_by_dim ( list of str , default: None ) \u2013 List of colors to use for each dimension. If None, defaults to ['black', 'gray', 'yellow', 'red', 'blue', 'purple']. ax ( Axes3DSubplot , default: None ) \u2013 A Matplotlib Axes object to draw the plot on. If None, a new figure and axes are created. Defaults to None. Returns: \u2013 matplotlib.axes.Axes: Matplotlib axes object containing the drawn graph. Source code in InDelsTopo/filtration.py 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 def get_graph ( self , height = None , height_id = None , show_labels = True , max_dim = 5 , positions = None , initial_positions = None , fixed = None , recompute = False , colors_by_dim = None , ax = None , ): \"\"\" Generate a graphical representation of the filtration up to a specified dimension. Positions of vertices can be computed automatically or provided manually. Only accurate for low-dimensional complexes (typically dim <= 3). Args: height (float, optional): Maximum height value for including blocks in the graph. Defaults to the maximum filtration value. height_id (int, optional): Index into the sorted list of filtration values. Used if `height` is None. Defaults to None. show_labels (bool, optional): Whether to display labels on the vertices. Defaults to True. max_dim (int, optional): Maximum dimension of blocks to include in the graph. Defaults to 5. positions (dict, optional): Dictionary of vertex positions. If None, positions are computed automatically. Once computed, they are reused everytime this method is called, unless recompute is set to True. initial_positions (dict, optional): Initial positions used to seed the automatic layout algorithm. fixed (list or None, optional): List of vertex keys to fix in place when computing positions. Defaults to None. recompute (bool, optional): Whether to recompute vertex positions even if already stored. Defaults to False. colors_by_dim (list of str, optional): List of colors to use for each dimension. If None, defaults to ['black', 'gray', 'yellow', 'red', 'blue', 'purple']. ax (matplotlib.axes._subplots.Axes3DSubplot, optional): A Matplotlib Axes object to draw the plot on. If None, a new figure and axes are created. Defaults to None. Returns: matplotlib.axes.Axes: Matplotlib axes object containing the drawn graph. \"\"\" if self . dim == - 1 : return None if ( positions is None ) or recompute : if ( self . _positions_dict is None ) or recompute : self . _positions_dict = graphics . compute_vertex_positions ( self , pos0 = initial_positions , fixed = fixed ) # Make sure position includes all vertices elif any ( vertex not in self . _positions_dict for vertex in self [ 0 ]): # Update with pos0 if isinstance ( initial_positions , dict ): for vertex in initial_positions : self . _positions_dict [ vertex ] = initial_positions [ vertex ] # Compute for all vertices self . _positions_dict = graphics . compute_vertex_positions ( self , pos0 = self . _positions_dict , fixed = list ( self . _positions_dict . keys ()), ) # Get the positions positions = self . _positions_dict if height is None : try : height = self . filtration_values [ height_id ] except BaseException : height = max ( self . filtration_values , default = np . inf ) ax = graphics . make_graph ( self , pos = positions , show_labels = show_labels , max_dim = max_dim , height = height , already_complex = False , colors_by_dim = colors_by_dim , ax = ax , ) return ax get_persistent_homology_barcodes ( max_dim = None , inf_value = np . inf , get_height_indices = False ) Compute persistent homology barcodes for the filtration using Z2 coefficients. The method performs a lower-star filtration on the complex according to the vertex heights and computes persistent homology up to the specified dimension. Parameters: max_dim ( int , default: None ) \u2013 Maximum dimension to compute accurately. The skeleton of dimension up to max_dim+1 is used for this computation if it was previously computed. If None or greater than the filtration's dimension, all dimensions are included. inf_value ( float , default: inf ) \u2013 Value to assign to features that do not die within the filtration. Defaults to infinity. get_height_indices ( bool , default: False ) \u2013 If True, also return the indices corresponding to the birth and death heights in the filtration. Defaults to False. Returns: \u2013 dict or tuple: - If get_height_indices=False : A dictionary mapping dimension d to a list of tuples (birth, death) representing persistent homology intervals. - If get_height_indices=True : A tuple of two dictionaries: 1. Barcodes as above. 2. Corresponding indices of birth and death heights in filtration_values . Notes The algorithm uses a boundary matrix over Z2 and reduces it following the standard persistence algorithm (see arxiv:1506.08903). Features that never die are assigned inf_value as their death time. Source code in InDelsTopo/filtration.py 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 def get_persistent_homology_barcodes ( self , max_dim = None , inf_value = np . inf , get_height_indices = False ): \"\"\" Compute persistent homology barcodes for the filtration using Z2 coefficients. The method performs a lower-star filtration on the complex according to the vertex heights and computes persistent homology up to the specified dimension. Args: max_dim (int, optional): Maximum dimension to compute accurately. The skeleton of dimension up to max_dim+1 is used for this computation if it was previously computed. If None or greater than the filtration's dimension, all dimensions are included. inf_value (float, optional): Value to assign to features that do not die within the filtration. Defaults to infinity. get_height_indices (bool, optional): If True, also return the indices corresponding to the birth and death heights in the filtration. Defaults to False. Returns: dict or tuple: - If `get_height_indices=False`: A dictionary mapping dimension `d` to a list of tuples `(birth, death)` representing persistent homology intervals. - If `get_height_indices=True`: A tuple of two dictionaries: 1. Barcodes as above. 2. Corresponding indices of birth and death heights in `filtration_values`. Notes: The algorithm uses a boundary matrix over Z2 and reduces it following the standard persistence algorithm (see arxiv:1506.08903). Features that never die are assigned `inf_value` as their death time. \"\"\" # Import csc_matrix from scipy.sparse import csc_matrix # pylint: disable=import-outside-toplevel if max_dim is None or max_dim >= self . dim : max_dim = self . dim using_skeleton = False elif max_dim == self . dim - 1 : max_dim = self . dim using_skeleton = True else : max_dim += 1 using_skeleton = True # Order the blocks according to their dimension and height ordered_blocks = [] for dimension in range ( max_dim + 1 ): ordered_blocks += self [ dimension ] ordered_blocks . sort ( key = lambda blk : ( self [ blk . dim ][ blk ], blk . dim )) ordered_blocks_dict = { ordered_blocks [ i ]: i for i in range ( len ( ordered_blocks ))} heights = [ self [ blk . dim ][ blk ] for blk in ordered_blocks ] # Construct the boundary matrix cols = [] rows = [] data = [] for id_col , blk in enumerate ( ordered_blocks ): facets = blk . get_all_facets () for facet in facets : cols . append ( id_col ) rows . append ( ordered_blocks_dict [ facet ]) data . append ( 1 ) N = len ( ordered_blocks ) boundary_matrix = csc_matrix (( data , ( rows , cols )), shape = ( N , N )) . tolil () # Perform row reduction (we follow the algorithm from # https://arxiv.org/pdf/1506.08903) low = [] # maps row index to pivot column index barcodes = {} if get_height_indices : barcodes_indices = {} height_indices = { self . filtration_values [ i ]: i for i in range ( len ( self . filtration_values )) } for j in range ( N ): col = boundary_matrix . getcol ( j ) if col . nnz > 0 : # Set initial value for low(j) low_j = col . nonzero ()[ 0 ][ - 1 ] while low_j in low : i = low . index ( low_j ) # add column i to column j col = col + boundary_matrix . getcol ( i ) col . data = col . data % 2 # Make adition modulo 2 col . eliminate_zeros () if col . nnz > 0 : low_j = col . nonzero ()[ 0 ][ - 1 ] # update low_j value else : low_j = - 1 break boundary_matrix [:, j ] = col # update column j in the matrix low . append ( low_j ) # Save value for low_j else : # Set -1, for undefined low(j) low . append ( - 1 ) # Extract (birth, death) pairs for j , low_j in enumerate ( low ): if low_j >= 0 : birth = heights [ low_j ] death = heights [ j ] if death > birth : dim = ordered_blocks [ low_j ] . dim if dim not in barcodes : barcodes [ dim ] = [] if get_height_indices : barcodes_indices [ dim ] = [] barcodes [ dim ] . append (( birth , death )) if get_height_indices : barcodes_indices [ dim ] . append ( ( height_indices [ birth ], height_indices [ death ]) ) elif j not in low : birth = heights [ j ] dim = ordered_blocks [ j ] . dim if dim not in barcodes : barcodes [ dim ] = [] if get_height_indices : barcodes_indices [ dim ] = [] barcodes [ dim ] . append (( birth , inf_value )) if get_height_indices : barcodes_indices [ dim ] . append (( height_indices [ birth ], np . inf )) if using_skeleton : if max_dim in barcodes : del barcodes [ max_dim ] if get_height_indices : del barcodes_indices [ max_dim ] if get_height_indices : return barcodes , barcodes_indices return barcodes remove_blocks ( list_blocks , prod_symbol = None , include_upfaces = True , already_blocks = False ) Remove blocks from the Filtration. Deletes specified blocks and optionally their super-faces from the Complex. Intended for expert use only, since the resulting structure may not be a full Insertion Chain Complex C[W], but rather a subcomplex if some supported blocks are missing. Parameters: list_blocks ( list of Block or string ) \u2013 A list of blocks to remove. If already_blocks is False (default), the elements are assumed to be strings representing blocks and will be converted. If True, they are assumed to be existing Block objects. prod_symbol ( str or None , default: None ) \u2013 Product symbol used in block representation ( '*', '.', or ''). If not specified, it is inferred from the input blocks. include_upfaces ( bool , default: True ) \u2013 If True, all super faces of the specified blocks are also removed, so the result is a subcomplex. Default is True. already_blocks ( bool , default: False ) \u2013 If True, the elements of list_blocks are assumed to be valid Block objects. If False (default), the method attempts to convert the input into blocks. Source code in InDelsTopo/filtration.py 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 def remove_blocks ( self , list_blocks , prod_symbol = None , include_upfaces = True , already_blocks = False ): \"\"\" Remove blocks from the Filtration. Deletes specified blocks and optionally their super-faces from the Complex. Intended for expert use only, since the resulting structure may not be a full Insertion Chain Complex C[W], but rather a subcomplex if some supported blocks are missing. Args: list_blocks (list of Block or string): A list of blocks to remove. If `already_blocks` is False (default), the elements are assumed to be strings representing blocks and will be converted. If True, they are assumed to be existing Block objects. prod_symbol (str or None, optional): Product symbol used in block representation ( '*', '.', or ''). If not specified, it is inferred from the input blocks. include_upfaces (bool, optional): If True, all super faces of the specified blocks are also removed, so the result is a subcomplex. Default is True. already_blocks (bool, optional): If True, the elements of `list_blocks` are assumed to be valid Block objects. If False (default), the method attempts to convert the input into blocks. \"\"\" # Make sure it is a list if not isinstance ( list_blocks , list ): raise TypeError ( \"list_blocks must be a list\" ) # Convert into blocks if needed if not already_blocks : list_blocks , _alphabet , prod_symbol = _convert_words_to_blocks ( list_blocks , prod_symbol = prod_symbol , alphabet = self . _alphabet ) # Dictionary of blocks to remove blocks_to_remove = { i : [] for i in range ( self . dim + 1 )} for block in list_blocks : if ( block . dim in self . filtration_dict and block in self . filtration_dict [ block . dim ] ): blocks_to_remove [ block . dim ] . append ( block ) # Find super-faces if needed if include_upfaces : for dimension in range ( 1 , self . dim + 1 ): for block in self . filtration_dict [ dimension ]: facets = block . get_all_facets () if any ( facet in blocks_to_remove [ dimension - 1 ] for facet in facets ): blocks_to_remove [ dimension ] . append ( block ) # Remove blocks for dimension in blocks_to_remove : for block in blocks_to_remove [ dimension ]: if block in self . filtration_dict [ dimension ]: del self . filtration_dict [ dimension ][ block ] # Update filtration_dict for dimension in range ( self . dim , - 1 , - 1 ): if len ( self . filtration_dict [ dimension ]) == 0 : del self . filtration_dict [ dimension ] else : break # Update filtration values self . filtration_values = list ( { val for dimension_dict in self . filtration_dict . values () for val in dimension_dict . values () } ) self . filtration_values . sort () # Recompute dimension self . dim = max ( self . filtration_dict , default =- 1 )","title":"InDelsTopo"},{"location":"reference/#indelstopo-api-reference","text":"InDelsTopo: A Python package to analyze topological properties of sets of words when their main source of variation are insertions and deletions, using the Insertion Chain Complex framework.","title":"InDelsTopo API Reference"},{"location":"reference/#InDelsTopo.__version__","text":"","title":"__version__"},{"location":"reference/#InDelsTopo.Alphabet","text":"Represents an alphabet of symbols used to build words. Each symbol in the alphabet is represented as a noncommutative SymPy symbol. For every letter, an associated \"edge\" symbol (or 1-block symbol) is also created. For example, the letter 'a' has a corresponding edge symbol '(1,a)'. Internally, these symbols are handled as elements of a noncommutative SymPy monoid, allowing symbolic manipulations of words as products. This class provides methods to: - Add individual letters. - Update the alphabet with multiple new letters. - Convert words (sequences of letters) into symbolic products of letters. Attributes: letters ( dict ) \u2013 Maps letter strings to their SymPy symbol representation. edges ( dict ) \u2013 Maps letter strings to their corresponding edge (1-block) symbols. letters_str ( list ) \u2013 List of letter strings currently in the alphabet. Source code in InDelsTopo/alphabet.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 class Alphabet : \"\"\" Represents an alphabet of symbols used to build words. Each symbol in the alphabet is represented as a noncommutative SymPy symbol. For every letter, an associated \"edge\" symbol (or 1-block symbol) is also created. For example, the letter 'a' has a corresponding edge symbol '(1,a)'. Internally, these symbols are handled as elements of a noncommutative SymPy monoid, allowing symbolic manipulations of words as products. This class provides methods to: - Add individual letters. - Update the alphabet with multiple new letters. - Convert words (sequences of letters) into symbolic products of letters. Attributes: letters (dict): Maps letter strings to their SymPy symbol representation. edges (dict): Maps letter strings to their corresponding edge (1-block) symbols. letters_str (list): List of letter strings currently in the alphabet. \"\"\" def __init__ ( self , letters_str = None ): \"\"\" Initialize an Alphabet with optional letters. Args: letters_str (list of str, optional): Initial letters for the alphabet. If None, an empty alphabet is created. Duplicate letters are removed. Side Effects: Initializes the following attributes: - letters (dict): Maps letter strings to SymPy symbols. - edges (dict): Maps letter strings to corresponding edge symbols. - letters_str (list): List of unique letter strings in the alphabet. \"\"\" letters = {} edges = {} letters_str = list ( set ( letters_str )) if letters_str is not None else [] for symbol in letters_str : letters [ symbol ] = sym . Symbol ( symbol , commutative = False ) edges [ symbol ] = sym . Symbol ( \"(1,_)\" . replace ( \"_\" , symbol ), commutative = False ) self . letters = letters self . _edges = edges self . letters_str = letters_str def get ( self , letter , dim = 0 ): \"\"\" Return the symbolic representation of a letter or its edge. Args: letter (str): The letter to retrieve. dim (int, optional): Dimension; 0 for the letter symbol, 1 for the edge symbol. Defaults to 0. Returns: SymPy.Symbol: The corresponding SymPy symbol. \"\"\" if dim == 0 : return self . letters [ letter ] if dim == 1 : return self . _edges [ letter ] raise ValueError ( \"Dimension dim must be 0 or 1.\" ) def add_letter ( self , symbol ): \"\"\" Add a new letter to the alphabet if it does not already exist. Args: symbol (str): The new letter to add. \"\"\" if symbol not in self . letters_str : self . letters_str . append ( symbol ) self . letters [ symbol ] = sym . Symbol ( symbol , commutative = False ) self . _edges [ symbol ] = sym . Symbol ( \"(1,_)\" . replace ( \"_\" , symbol ), commutative = False ) def update_letters ( self , letters_str ): \"\"\" Add multiple letters to the alphabet, ignoring duplicates. Args: letters_str (iterable of str): letters to add. \"\"\" new_letters = set ( letters_str ) . difference ( self . letters_str ) for symbol in new_letters : self . letters_str . append ( symbol ) self . letters [ symbol ] = sym . Symbol ( symbol , commutative = False ) self . _edges [ symbol ] = sym . Symbol ( \"(1,_)\" . replace ( \"_\" , symbol ), commutative = False ) def cast_word ( self , word , check_letters = True ): \"\"\" Convert a word (sequence of letters) into a symbolic product. Args: word (iterable of str): The word to convert, as a list of symbols or a string. check_letters (bool, optional): If True, updates the alphabet with any new letters found in the word. Defaults to True. Returns: sympy.Expr: SymPy expression of the word, using the symbols in this alphabet. \"\"\" if check_letters : self . update_letters ( word ) return sym . prod ([ self . letters [ symbol ] for symbol in word ], start = int ( 1 )) def __str__ ( self ): return \"Alphabet with letters: \" + str ( sorted ( self . letters_str )) def __repr__ ( self ): return self . __str__ ()","title":"Alphabet"},{"location":"reference/#InDelsTopo.Alphabet.__init__","text":"Initialize an Alphabet with optional letters. Parameters: letters_str ( list of str , default: None ) \u2013 Initial letters for the alphabet. If None, an empty alphabet is created. Duplicate letters are removed. Side Effects Initializes the following attributes: - letters (dict): Maps letter strings to SymPy symbols. - edges (dict): Maps letter strings to corresponding edge symbols. - letters_str (list): List of unique letter strings in the alphabet. Source code in InDelsTopo/alphabet.py 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 def __init__ ( self , letters_str = None ): \"\"\" Initialize an Alphabet with optional letters. Args: letters_str (list of str, optional): Initial letters for the alphabet. If None, an empty alphabet is created. Duplicate letters are removed. Side Effects: Initializes the following attributes: - letters (dict): Maps letter strings to SymPy symbols. - edges (dict): Maps letter strings to corresponding edge symbols. - letters_str (list): List of unique letter strings in the alphabet. \"\"\" letters = {} edges = {} letters_str = list ( set ( letters_str )) if letters_str is not None else [] for symbol in letters_str : letters [ symbol ] = sym . Symbol ( symbol , commutative = False ) edges [ symbol ] = sym . Symbol ( \"(1,_)\" . replace ( \"_\" , symbol ), commutative = False ) self . letters = letters self . _edges = edges self . letters_str = letters_str","title":"__init__"},{"location":"reference/#InDelsTopo.Alphabet.add_letter","text":"Add a new letter to the alphabet if it does not already exist. Parameters: symbol ( str ) \u2013 The new letter to add. Source code in InDelsTopo/alphabet.py 72 73 74 75 76 77 78 79 80 81 82 83 84 def add_letter ( self , symbol ): \"\"\" Add a new letter to the alphabet if it does not already exist. Args: symbol (str): The new letter to add. \"\"\" if symbol not in self . letters_str : self . letters_str . append ( symbol ) self . letters [ symbol ] = sym . Symbol ( symbol , commutative = False ) self . _edges [ symbol ] = sym . Symbol ( \"(1,_)\" . replace ( \"_\" , symbol ), commutative = False )","title":"add_letter"},{"location":"reference/#InDelsTopo.Alphabet.cast_word","text":"Convert a word (sequence of letters) into a symbolic product. Parameters: word ( iterable of str ) \u2013 The word to convert, as a list of symbols or a string. check_letters ( bool , default: True ) \u2013 If True, updates the alphabet with any new letters found in the word. Defaults to True. Returns: \u2013 sympy.Expr: SymPy expression of the word, using the symbols in this alphabet. Source code in InDelsTopo/alphabet.py 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 def cast_word ( self , word , check_letters = True ): \"\"\" Convert a word (sequence of letters) into a symbolic product. Args: word (iterable of str): The word to convert, as a list of symbols or a string. check_letters (bool, optional): If True, updates the alphabet with any new letters found in the word. Defaults to True. Returns: sympy.Expr: SymPy expression of the word, using the symbols in this alphabet. \"\"\" if check_letters : self . update_letters ( word ) return sym . prod ([ self . letters [ symbol ] for symbol in word ], start = int ( 1 ))","title":"cast_word"},{"location":"reference/#InDelsTopo.Alphabet.get","text":"Return the symbolic representation of a letter or its edge. Parameters: letter ( str ) \u2013 The letter to retrieve. dim ( int , default: 0 ) \u2013 Dimension; 0 for the letter symbol, 1 for the edge symbol. Defaults to 0. Returns: \u2013 SymPy.Symbol: The corresponding SymPy symbol. Source code in InDelsTopo/alphabet.py 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 def get ( self , letter , dim = 0 ): \"\"\" Return the symbolic representation of a letter or its edge. Args: letter (str): The letter to retrieve. dim (int, optional): Dimension; 0 for the letter symbol, 1 for the edge symbol. Defaults to 0. Returns: SymPy.Symbol: The corresponding SymPy symbol. \"\"\" if dim == 0 : return self . letters [ letter ] if dim == 1 : return self . _edges [ letter ] raise ValueError ( \"Dimension dim must be 0 or 1.\" )","title":"get"},{"location":"reference/#InDelsTopo.Alphabet.update_letters","text":"Add multiple letters to the alphabet, ignoring duplicates. Parameters: letters_str ( iterable of str ) \u2013 letters to add. Source code in InDelsTopo/alphabet.py 86 87 88 89 90 91 92 93 94 95 96 97 98 99 def update_letters ( self , letters_str ): \"\"\" Add multiple letters to the alphabet, ignoring duplicates. Args: letters_str (iterable of str): letters to add. \"\"\" new_letters = set ( letters_str ) . difference ( self . letters_str ) for symbol in new_letters : self . letters_str . append ( symbol ) self . letters [ symbol ] = sym . Symbol ( symbol , commutative = False ) self . _edges [ symbol ] = sym . Symbol ( \"(1,_)\" . replace ( \"_\" , symbol ), commutative = False )","title":"update_letters"},{"location":"reference/#InDelsTopo.Block","text":"Bases: ChainBlockBase Represents a Block in the Insertion Chain Complex. A Block can be a valid block or \"0\" if the provided data corresponds to an invalid block. It has the formal expression x_0(1,a_1)x_1...(1,a_m)x_m, where the a_i are single symbols from an alphabet, and the x_i are words over that alphabet (including possibly the empty word). Internally, blocks are stored as a list of factors x_0, ..., x_k and a list of edge symbols a_1, ..., a_k, represented as SymPy expressions and symbols. Blocks can be initialized from a string expression or directly via x_factors and edges. Attributes: dim ( int ) \u2013 Number of edges (dimension) of the block. max_word ( SymPy expression ) \u2013 Maximal word of the block. min_word ( SymPy expression ) \u2013 Minimal word of the block. Internal Attributes _x_factors (list of SymPy expressions or int): Factors of the block. _edges (list of SymPy symbols): Symbols forming the edges of the block. _alphabet (Alphabet): Alphabet used for letters in the block. _expression (SymPy expression): SymPy product representing the block. Source code in InDelsTopo/block.py 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 class Block ( ChainBlockBase ): \"\"\"Represents a Block in the Insertion Chain Complex. A Block can be a valid block or \"0\" if the provided data corresponds to an invalid block. It has the formal expression x_0(1,a_1)x_1...(1,a_m)x_m, where the a_i are single symbols from an alphabet, and the x_i are words over that alphabet (including possibly the empty word). Internally, blocks are stored as a list of factors x_0, ..., x_k and a list of edge symbols a_1, ..., a_k, represented as SymPy expressions and symbols. Blocks can be initialized from a string expression or directly via x_factors and edges. Attributes: dim (int): Number of edges (dimension) of the block. max_word (SymPy expression): Maximal word of the block. min_word (SymPy expression): Minimal word of the block. Internal Attributes: _x_factors (list of SymPy expressions or int): Factors of the block. _edges (list of SymPy symbols): Symbols forming the edges of the block. _alphabet (Alphabet): Alphabet used for letters in the block. _expression (SymPy expression): SymPy product representing the block. \"\"\" def __init__ ( self , expression = None , alphabet = None , prod_symbol = None , * , x_factors = [ int ( 0 )], edges = None , ): \"\"\"Initializes a Block. A Block can be either a valid block or the zero block. It is internally represented by a list of factors `_x_factors` and a list of edge symbols `_edges`. The block can be initialized from: - A string `expression` in the form \"x_0(1,a_1)x_1...(1,a_m)x_m\" (handling powers '^' or '**' and product symbols '*', '.', or concatenation), - Directly from `_x_factors` and `_edges` lists, Args: expression (str, optional): String representation of the block. _alphabet (Alphabet, optional): Alphabet defining the letters. Defaults to an empty Alphabet. _prod_symbol (str, optional): Product symbol to use ('', '*', or '.'). Inferred from the expression if None. _x_factors (list of SymPy expressions or int, optional): Factors x_0, ..., x_k of the block. _edges (list of SymPy symbols, optional): Edge symbols a_1, ..., a_k corresponding to the block. \"\"\" super () . __init__ () # initialize base class attributes x_factors = [ int ( 0 )] if x_factors is None else x_factors edges = [] if edges is None else edges alphabet = Alphabet ([]) if alphabet is None else alphabet # Use expression if provided if isinstance ( expression , str ): if expression == \"1\" : x_factors = [ int ( 1 )] edges = [] prod_symbol = \"\" else : x_factors , edges , alphabet , prod_symbol = _block_str_constructor ( expression , alphabet , prod_symbol ) if len ( x_factors ) == 0 : self . _x_factors = [ int ( 0 )] self . _edges = [] self . dim = - 1 elif len ( x_factors ) - len ( edges ) != 1 : raise Exception ( \"x_factors must be one unit longer than edges.\" ) # Set attributes self . _x_factors = x_factors self . _edges = edges self . dim = len ( edges ) self . _prod_symbol = prod_symbol self . _alphabet = alphabet # Get canonical form self . _canonical_form () # Check is a valid block if not self . _is_valid_block (): self . _x_factors = [ int ( 0 )] self . _edges = [] self . dim = - 1 # Expression edges = [ self . _alphabet . get ( str ( a ), 1 ) for a in self . _edges ] + [ sym . sympify ( 1 )] self . _expression = sym . prod ( [ val for pair in zip ( self . _x_factors , edges ) for val in pair ] ) # Maximal and minimal words if self . dim < 0 : self . max_word = sym . sympify ( 0 ) self . min_word = sym . sympify ( 0 ) elif self . dim == 0 : self . max_word = self . _expression self . min_word = self . _expression else : self . max_word = self . get_vertex ( list ( range ( 1 , self . dim + 1 )), as_word = True ) self . min_word = self . get_vertex ([], as_word = True ) def _canonical_form ( self ): \"\"\"Gets the canonical form of the block by transforming each factor of the form '(1,a)a^r' into 'a^r(1,a)'.\"\"\" for k in range ( self . dim , 0 , - 1 ): factors = list ( sym . sympify ( self . _x_factors [ k ]) . as_coeff_mul ()[ 1 ]) try : first_factor = factors . pop ( 0 ) except IndexError : first_factor = sym . sympify ( 1 ) if first_factor . as_base_exp ()[ 0 ] == self . _edges [ k - 1 ]: self . _x_factors [ k - 1 ] = self . _x_factors [ k - 1 ] * first_factor self . _x_factors [ k ] = sym . Mul ( sym . prod ( factors )) def _is_valid_block ( self ): \"\"\"Check whether a block, already in canonical form, is valid.\"\"\" if self . dim > 0 : position_ones = [ i for i , s in enumerate ( self . _x_factors ) if s == sym . sympify ( 1 ) ] for k in position_ones : if 0 < k < self . dim and self . _edges [ k ] == self . _edges [ k - 1 ]: return False elif self . dim == 0 : if self . _x_factors [ 0 ] == int ( 0 ): return False return True def _to_chain ( self ): \"\"\"Convert the block to a Chain object. Useful to enable algebraic operations with chains. \"\"\" from InDelsTopo.chain import Chain # pylint: disable=import-outside-toplevel if self . dim >= 0 : return Chain ( dict_blocks = { self : 1 }) return Chain ( dict_blocks = {}) def get_face ( self , indices_plus , indices_minus ): \"\"\"Return the face \u03c3(indices_plus, indices_minus) of the block \u03c3. indices_plus and indices_minus are disjoint subsets of {1, ..., m}, where m is the dimension of the block. They must be given as lists of integers, and may be empty. The output is the block \u03c3(indices_plus, indices_minus), which is either a valid Block of dimension m \u2212 |indices_plus \u222a indices_minus| or the zero Block. Args: indices_plus (list of int): Indices in {1, ..., m} of edges (1, a_i) collapsed to a_i. indices_minus (list of int): Indices in {1,..., m} of edges (1, a_i) collapsed to 1. Returns: Block: The resulting face block \u03c3(indices_plus, indices_minus) if valid, or the zero Block, otherwise. \"\"\" indices_all = indices_plus + indices_minus if len ( set ( indices_plus ) . intersection ( indices_minus )) > 0 : raise ValueError ( \"indices_plus and indices_minus must be disjoint\" ) if len ( set ( indices_all ) . difference ( set ( range ( 1 , self . dim + 1 )))) > 0 : warnings . warn ( \"indices_plus or indices_minus contains elements outside of {1, ...\" + str ( self . dim ) + \"} which have been ignored\" ) new_x_factors = [ self . _x_factors [ 0 ]] new_edges = [] for i in range ( 1 , self . dim + 1 ): if i in indices_all : current_x_factor = new_x_factors [ - 1 ] if i in indices_plus : x = self . _edges [ i - 1 ] else : x = sym . sympify ( 1 ) new_x_factors [ - 1 ] = current_x_factor * x * self . _x_factors [ i ] else : new_edges . append ( self . _edges [ i - 1 ]) new_x_factors . append ( self . _x_factors [ i ]) return Block ( x_factors = new_x_factors , edges = new_edges , alphabet = self . _alphabet , prod_symbol = self . _prod_symbol , ) def get_upper_facets ( self ): \"\"\"Return the list of upper facets of the block. Each upper facet is obtained by collapsing a single edge (1, a_i) to a_i, for i = 1, ..., m, where m is the dimension of the block. Returns: list of Block: A list of Blocks representing the upper facets of the block. \"\"\" upper_facets = [ self . get_face ([ i ], []) for i in range ( 1 , self . dim + 1 )] return upper_facets def get_lower_facets ( self ): \"\"\"Return the list of lower facets of the block. Each lower facet is obtained by collapsing a single edge (1, a_i) to 1, for i = 1, ..., m, where m is the dimension of the block. Invalid blocks are excluded from the output. Returns: list of Block: A list of valid Blocks representing the lower facets of the block. \"\"\" lower_facets = [ self . get_face ([], [ i ]) for i in range ( 1 , self . dim + 1 )] lower_facets = [ C for C in lower_facets if C . dim >= 0 ] return lower_facets def get_all_facets ( self ): \"\"\"Return all facets of the block. Combines both the upper and lower facets of the block. Returns: list of Block: A list of Blocks representing all facets of the block. \"\"\" return self . get_upper_facets () + self . get_lower_facets () def get_all_faces ( self , include_self = False ): \"\"\"Return all faces of the block, ordered by dimension. Faces are obtained recursively by taking all facets of the block, then all facets of those facets, and so on, down to dimension 0. Args: include_self (bool, optional): If True, include the block itself in the returned list. Defaults to False. Returns: list of Block: A list of Blocks representing all faces, orted by increasing dimension. \"\"\" if include_self : all_faces = set ([ self ]) else : all_faces = set () current_faces = [ self ] for _ in range ( self . dim ): current_faces = [ facet for c in current_faces for facet in c . get_all_facets () ] all_faces = all_faces . union ( current_faces ) all_faces = list ( all_faces ) all_faces . sort ( key = lambda x : x . dim ) return all_faces def get_vertex ( self , indices , as_word = True ): \"\"\"Return the vertex v_I(\u03c3) of the block determined by a sequence of I = indices. The vertex is obtained by collapsing the edges (1,a_i) indexed by 'I' into a_i, and the remaining ones to 1. Returns the vertex as a 0-block, or as a SymPy expression if as_word=True. Args: indices (list of int): Indices in {1,..., dim(\u03c3)} as_word (bool, optional): If True, return the vertex as a SymPy expression (word). If False, return the corresponding Block. Defaults to True. Returns: Block or SymPy Expression: The resulting vertex as a Block or Sympy expression, depending on `as_word`. \"\"\" if len ( set ( indices ) . difference ( set ( range ( 1 , self . dim + 1 )))) > 0 : warnings . warn ( \"indices contains elements outside of {1, ...\" + str ( self . dim ) + \"} which have been ignored\" ) indices_minus = list ( set ( range ( 1 , self . dim + 1 )) . difference ( indices )) vertex = self . get_face ( indices , indices_minus ) if as_word : return vertex . get_expression () return vertex def get_all_vertices ( self , as_words = True ): \"\"\"Return all vertices of the block. Args: as_words (bool, optional): If True, return vertices as SymPy expressions (words). If False, return them as Block objects. Defaults to True. Returns: list of Block or SymPy Expression: All vertices of the block as Blocks or words, depending on `as_words`. \"\"\" vertices = set () all_indices = _powerset ( list ( range ( 1 , self . dim + 1 ))) for indices in all_indices : vertices . add ( self . get_vertex ( list ( indices ), as_words )) return list ( vertices ) def boundary ( self ): \"\"\"Computes the boundary of a block.\"\"\" from InDelsTopo.chain import Chain # pylint: disable=import-outside-toplevel result = Chain ( dict_blocks = {}) for i in range ( 1 , self . dim + 1 ): result += ( - 1 ) ** ( i + 1 ) * ( self . get_face ([ i ], []) - self . get_face ([], [ i ]) ) return result def _le_recursive ( self , other_block ): \"\"\"Recursively determine whether this block is a face of another block. This internal helper performs the recursive part of the face relation once trivial and extremal cases have been handled. It is not meant to be called directly\u2014use the operator form `A <= B` instead. Args: other_block (Block): The block to compare against. Returns: bool: True if `self` is a (possibly proper) face of `other_block`, False otherwise. \"\"\" # If same dimension, compare block equality if self . dim == other_block . dim : return self == other_block # Compare edges sequences pylint: disable=protected-access if not _is_subsequence ( self . _edges , other_block . _edges ): return False # Expand and compare the maximal words symbol by symbol word1 = self . max_word word2 = other_block . max_word word1_extended = [ symbol for symbol , times in _expand_symp_word ( word1 )[ 0 ] for i in range ( times ) ] word2_extended = [ symbol for symbol , times in _expand_symp_word ( word2 )[ 0 ] for i in range ( times ) ] if not _is_subsequence ( word1_extended , word2_extended ): return False # Recursive step # If maximal words are equal, descend through upper facets; # otherwise, through lower facets. if word1 == word2 : return any ( self . _le_recursive ( facet ) for facet in other_block . get_upper_facets () ) else : return any ( self . _le_recursive ( facet ) for facet in other_block . get_lower_facets () ) def __le__ ( self , other_block ): \"\"\" Determine whether this Block is a face (\u2264) of another Block. A Block `A` is considered less than or equal to another Block `B` if it represents a lower-dimensional face of `B`. \"\"\" # Make sure both are block instances if not isinstance ( other_block , Block ): return NotImplemented # \"Empty\" block is face of all blocks if self . dim == - 1 : return True # Compare dimensions if self . dim > other_block . dim : return False # Apply the comparison recursively return self . _le_recursive ( other_block ) def __lt__ ( self , other_block ): \"\"\"Return True if this Block is a proper face (<) of another Block.\"\"\" if not isinstance ( other_block , Block ): return NotImplemented if self . __eq__ ( other_block ): return False return self . __le__ ( other_block )","title":"Block"},{"location":"reference/#InDelsTopo.Block.__init__","text":"Initializes a Block. A Block can be either a valid block or the zero block. It is internally represented by a list of factors _x_factors and a list of edge symbols _edges . The block can be initialized from A string expression in the form \"x_0(1,a_1)x_1...(1,a_m)x_m\" (handling powers '^' or '* ' and product symbols ' ', '.', or concatenation), Directly from _x_factors and _edges lists, Parameters: expression ( str , default: None ) \u2013 String representation of the block. _alphabet ( Alphabet ) \u2013 Alphabet defining the letters. Defaults to an empty Alphabet. _prod_symbol ( str ) \u2013 Product symbol to use ('', '*', or '.'). Inferred from the expression if None. _x_factors ( list of SymPy expressions or int ) \u2013 Factors x_0, ..., x_k of the block. _edges ( list of SymPy symbols ) \u2013 Edge symbols a_1, ..., a_k corresponding to the block. Source code in InDelsTopo/block.py 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 def __init__ ( self , expression = None , alphabet = None , prod_symbol = None , * , x_factors = [ int ( 0 )], edges = None , ): \"\"\"Initializes a Block. A Block can be either a valid block or the zero block. It is internally represented by a list of factors `_x_factors` and a list of edge symbols `_edges`. The block can be initialized from: - A string `expression` in the form \"x_0(1,a_1)x_1...(1,a_m)x_m\" (handling powers '^' or '**' and product symbols '*', '.', or concatenation), - Directly from `_x_factors` and `_edges` lists, Args: expression (str, optional): String representation of the block. _alphabet (Alphabet, optional): Alphabet defining the letters. Defaults to an empty Alphabet. _prod_symbol (str, optional): Product symbol to use ('', '*', or '.'). Inferred from the expression if None. _x_factors (list of SymPy expressions or int, optional): Factors x_0, ..., x_k of the block. _edges (list of SymPy symbols, optional): Edge symbols a_1, ..., a_k corresponding to the block. \"\"\" super () . __init__ () # initialize base class attributes x_factors = [ int ( 0 )] if x_factors is None else x_factors edges = [] if edges is None else edges alphabet = Alphabet ([]) if alphabet is None else alphabet # Use expression if provided if isinstance ( expression , str ): if expression == \"1\" : x_factors = [ int ( 1 )] edges = [] prod_symbol = \"\" else : x_factors , edges , alphabet , prod_symbol = _block_str_constructor ( expression , alphabet , prod_symbol ) if len ( x_factors ) == 0 : self . _x_factors = [ int ( 0 )] self . _edges = [] self . dim = - 1 elif len ( x_factors ) - len ( edges ) != 1 : raise Exception ( \"x_factors must be one unit longer than edges.\" ) # Set attributes self . _x_factors = x_factors self . _edges = edges self . dim = len ( edges ) self . _prod_symbol = prod_symbol self . _alphabet = alphabet # Get canonical form self . _canonical_form () # Check is a valid block if not self . _is_valid_block (): self . _x_factors = [ int ( 0 )] self . _edges = [] self . dim = - 1 # Expression edges = [ self . _alphabet . get ( str ( a ), 1 ) for a in self . _edges ] + [ sym . sympify ( 1 )] self . _expression = sym . prod ( [ val for pair in zip ( self . _x_factors , edges ) for val in pair ] ) # Maximal and minimal words if self . dim < 0 : self . max_word = sym . sympify ( 0 ) self . min_word = sym . sympify ( 0 ) elif self . dim == 0 : self . max_word = self . _expression self . min_word = self . _expression else : self . max_word = self . get_vertex ( list ( range ( 1 , self . dim + 1 )), as_word = True ) self . min_word = self . get_vertex ([], as_word = True )","title":"__init__"},{"location":"reference/#InDelsTopo.Block.__le__","text":"Determine whether this Block is a face (\u2264) of another Block. A Block A is considered less than or equal to another Block B if it represents a lower-dimensional face of B . Source code in InDelsTopo/block.py 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 def __le__ ( self , other_block ): \"\"\" Determine whether this Block is a face (\u2264) of another Block. A Block `A` is considered less than or equal to another Block `B` if it represents a lower-dimensional face of `B`. \"\"\" # Make sure both are block instances if not isinstance ( other_block , Block ): return NotImplemented # \"Empty\" block is face of all blocks if self . dim == - 1 : return True # Compare dimensions if self . dim > other_block . dim : return False # Apply the comparison recursively return self . _le_recursive ( other_block )","title":"__le__"},{"location":"reference/#InDelsTopo.Block.__lt__","text":"Return True if this Block is a proper face (<) of another Block. Source code in InDelsTopo/block.py 531 532 533 534 535 536 537 def __lt__ ( self , other_block ): \"\"\"Return True if this Block is a proper face (<) of another Block.\"\"\" if not isinstance ( other_block , Block ): return NotImplemented if self . __eq__ ( other_block ): return False return self . __le__ ( other_block )","title":"__lt__"},{"location":"reference/#InDelsTopo.Block.boundary","text":"Computes the boundary of a block. Source code in InDelsTopo/block.py 448 449 450 451 452 453 454 455 456 457 def boundary ( self ): \"\"\"Computes the boundary of a block.\"\"\" from InDelsTopo.chain import Chain # pylint: disable=import-outside-toplevel result = Chain ( dict_blocks = {}) for i in range ( 1 , self . dim + 1 ): result += ( - 1 ) ** ( i + 1 ) * ( self . get_face ([ i ], []) - self . get_face ([], [ i ]) ) return result","title":"boundary"},{"location":"reference/#InDelsTopo.Block.get_all_faces","text":"Return all faces of the block, ordered by dimension. Faces are obtained recursively by taking all facets of the block, then all facets of those facets, and so on, down to dimension 0. Parameters: include_self ( bool , default: False ) \u2013 If True, include the block itself in the returned list. Defaults to False. Returns: \u2013 list of Block: A list of Blocks representing all faces, orted by increasing dimension. Source code in InDelsTopo/block.py 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 def get_all_faces ( self , include_self = False ): \"\"\"Return all faces of the block, ordered by dimension. Faces are obtained recursively by taking all facets of the block, then all facets of those facets, and so on, down to dimension 0. Args: include_self (bool, optional): If True, include the block itself in the returned list. Defaults to False. Returns: list of Block: A list of Blocks representing all faces, orted by increasing dimension. \"\"\" if include_self : all_faces = set ([ self ]) else : all_faces = set () current_faces = [ self ] for _ in range ( self . dim ): current_faces = [ facet for c in current_faces for facet in c . get_all_facets () ] all_faces = all_faces . union ( current_faces ) all_faces = list ( all_faces ) all_faces . sort ( key = lambda x : x . dim ) return all_faces","title":"get_all_faces"},{"location":"reference/#InDelsTopo.Block.get_all_facets","text":"Return all facets of the block. Combines both the upper and lower facets of the block. Returns: \u2013 list of Block: A list of Blocks representing all facets of the block. Source code in InDelsTopo/block.py 363 364 365 366 367 368 369 370 def get_all_facets ( self ): \"\"\"Return all facets of the block. Combines both the upper and lower facets of the block. Returns: list of Block: A list of Blocks representing all facets of the block. \"\"\" return self . get_upper_facets () + self . get_lower_facets ()","title":"get_all_facets"},{"location":"reference/#InDelsTopo.Block.get_all_vertices","text":"Return all vertices of the block. Parameters: as_words ( bool , default: True ) \u2013 If True, return vertices as SymPy expressions (words). If False, return them as Block objects. Defaults to True. Returns: \u2013 list of Block or SymPy Expression: All vertices of the block as Blocks \u2013 or words, depending on as_words . Source code in InDelsTopo/block.py 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 def get_all_vertices ( self , as_words = True ): \"\"\"Return all vertices of the block. Args: as_words (bool, optional): If True, return vertices as SymPy expressions (words). If False, return them as Block objects. Defaults to True. Returns: list of Block or SymPy Expression: All vertices of the block as Blocks or words, depending on `as_words`. \"\"\" vertices = set () all_indices = _powerset ( list ( range ( 1 , self . dim + 1 ))) for indices in all_indices : vertices . add ( self . get_vertex ( list ( indices ), as_words )) return list ( vertices )","title":"get_all_vertices"},{"location":"reference/#InDelsTopo.Block.get_face","text":"Return the face \u03c3(indices_plus, indices_minus) of the block \u03c3. indices_plus and indices_minus are disjoint subsets of {1, ..., m}, where m is the dimension of the block. They must be given as lists of integers, and may be empty. The output is the block \u03c3(indices_plus, indices_minus), which is either a valid Block of dimension m \u2212 |indices_plus \u222a indices_minus| or the zero Block. Parameters: indices_plus ( list of int ) \u2013 Indices in {1, ..., m} of edges (1, a_i) collapsed to a_i. indices_minus ( list of int ) \u2013 Indices in {1,..., m} of edges (1, a_i) collapsed to 1. Returns: Block \u2013 The resulting face block \u03c3(indices_plus, indices_minus) if valid, \u2013 or the zero Block, otherwise. Source code in InDelsTopo/block.py 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 def get_face ( self , indices_plus , indices_minus ): \"\"\"Return the face \u03c3(indices_plus, indices_minus) of the block \u03c3. indices_plus and indices_minus are disjoint subsets of {1, ..., m}, where m is the dimension of the block. They must be given as lists of integers, and may be empty. The output is the block \u03c3(indices_plus, indices_minus), which is either a valid Block of dimension m \u2212 |indices_plus \u222a indices_minus| or the zero Block. Args: indices_plus (list of int): Indices in {1, ..., m} of edges (1, a_i) collapsed to a_i. indices_minus (list of int): Indices in {1,..., m} of edges (1, a_i) collapsed to 1. Returns: Block: The resulting face block \u03c3(indices_plus, indices_minus) if valid, or the zero Block, otherwise. \"\"\" indices_all = indices_plus + indices_minus if len ( set ( indices_plus ) . intersection ( indices_minus )) > 0 : raise ValueError ( \"indices_plus and indices_minus must be disjoint\" ) if len ( set ( indices_all ) . difference ( set ( range ( 1 , self . dim + 1 )))) > 0 : warnings . warn ( \"indices_plus or indices_minus contains elements outside of {1, ...\" + str ( self . dim ) + \"} which have been ignored\" ) new_x_factors = [ self . _x_factors [ 0 ]] new_edges = [] for i in range ( 1 , self . dim + 1 ): if i in indices_all : current_x_factor = new_x_factors [ - 1 ] if i in indices_plus : x = self . _edges [ i - 1 ] else : x = sym . sympify ( 1 ) new_x_factors [ - 1 ] = current_x_factor * x * self . _x_factors [ i ] else : new_edges . append ( self . _edges [ i - 1 ]) new_x_factors . append ( self . _x_factors [ i ]) return Block ( x_factors = new_x_factors , edges = new_edges , alphabet = self . _alphabet , prod_symbol = self . _prod_symbol , )","title":"get_face"},{"location":"reference/#InDelsTopo.Block.get_lower_facets","text":"Return the list of lower facets of the block. Each lower facet is obtained by collapsing a single edge (1, a_i) to 1, for i = 1, ..., m, where m is the dimension of the block. Invalid blocks are excluded from the output. Returns: \u2013 list of Block: A list of valid Blocks representing the lower facets of the block. Source code in InDelsTopo/block.py 349 350 351 352 353 354 355 356 357 358 359 360 361 def get_lower_facets ( self ): \"\"\"Return the list of lower facets of the block. Each lower facet is obtained by collapsing a single edge (1, a_i) to 1, for i = 1, ..., m, where m is the dimension of the block. Invalid blocks are excluded from the output. Returns: list of Block: A list of valid Blocks representing the lower facets of the block. \"\"\" lower_facets = [ self . get_face ([], [ i ]) for i in range ( 1 , self . dim + 1 )] lower_facets = [ C for C in lower_facets if C . dim >= 0 ] return lower_facets","title":"get_lower_facets"},{"location":"reference/#InDelsTopo.Block.get_upper_facets","text":"Return the list of upper facets of the block. Each upper facet is obtained by collapsing a single edge (1, a_i) to a_i, for i = 1, ..., m, where m is the dimension of the block. Returns: \u2013 list of Block: A list of Blocks representing the upper facets of the block. Source code in InDelsTopo/block.py 337 338 339 340 341 342 343 344 345 346 347 def get_upper_facets ( self ): \"\"\"Return the list of upper facets of the block. Each upper facet is obtained by collapsing a single edge (1, a_i) to a_i, for i = 1, ..., m, where m is the dimension of the block. Returns: list of Block: A list of Blocks representing the upper facets of the block. \"\"\" upper_facets = [ self . get_face ([ i ], []) for i in range ( 1 , self . dim + 1 )] return upper_facets","title":"get_upper_facets"},{"location":"reference/#InDelsTopo.Block.get_vertex","text":"Return the vertex v_I(\u03c3) of the block determined by a sequence of I = indices. The vertex is obtained by collapsing the edges (1,a_i) indexed by 'I' into a_i, and the remaining ones to 1. Returns the vertex as a 0-block, or as a SymPy expression if as_word=True. Parameters: indices ( list of int ) \u2013 Indices in {1,..., dim(\u03c3)} as_word ( bool , default: True ) \u2013 If True, return the vertex as a SymPy expression (word). If False, return the corresponding Block. Defaults to True. Returns: \u2013 Block or SymPy Expression: The resulting vertex as a Block or Sympy expression, \u2013 depending on as_word . Source code in InDelsTopo/block.py 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 def get_vertex ( self , indices , as_word = True ): \"\"\"Return the vertex v_I(\u03c3) of the block determined by a sequence of I = indices. The vertex is obtained by collapsing the edges (1,a_i) indexed by 'I' into a_i, and the remaining ones to 1. Returns the vertex as a 0-block, or as a SymPy expression if as_word=True. Args: indices (list of int): Indices in {1,..., dim(\u03c3)} as_word (bool, optional): If True, return the vertex as a SymPy expression (word). If False, return the corresponding Block. Defaults to True. Returns: Block or SymPy Expression: The resulting vertex as a Block or Sympy expression, depending on `as_word`. \"\"\" if len ( set ( indices ) . difference ( set ( range ( 1 , self . dim + 1 )))) > 0 : warnings . warn ( \"indices contains elements outside of {1, ...\" + str ( self . dim ) + \"} which have been ignored\" ) indices_minus = list ( set ( range ( 1 , self . dim + 1 )) . difference ( indices )) vertex = self . get_face ( indices , indices_minus ) if as_word : return vertex . get_expression () return vertex","title":"get_vertex"},{"location":"reference/#InDelsTopo.Chain","text":"Bases: ChainBlockBase Represents a chain in the Insertion Chain Complex: a linear combination of valid blocks with integer coefficients. It can be initialized from a string expression, a list of coefficients and blocks, or a dictionary mapping blocks to coefficients. Supports algebraic operations (addition, subtraction, and scalar multiplication), equality checking, string and LaTeX representations, and computation of the boundary. Attributes: dim ( int ) \u2013 Maximum dimension among the blocks in the chain, or -1 if empty. Internal_attributes _expression(SymPy expression): represents the chain as a sum of block expressions. _alphabet (Alphabet): The Alphabet instance used for all blocks in the chain. _dict_blocks (dict): (for internal use only) dictionary mapping Block objects to integer coefficients. _prod_symbol (str): Either '', '*', or '.'. Source code in InDelsTopo/chain.pyclass Chain ( ChainBlockBase ): \"\"\" Represents a chain in the Insertion Chain Complex: a linear combination of valid blocks with integer coefficients. It can be initialized from a string expression, a list of coefficients and blocks, or a dictionary mapping blocks to coefficients. Supports algebraic operations (addition, subtraction, and scalar multiplication), equality checking, string and LaTeX representations, and computation of the boundary. Attributes: dim (int): Maximum dimension among the blocks in the chain, or -1 if empty. Internal_attributes: _expression(SymPy expression): represents the chain as a sum of block expressions. _alphabet (Alphabet): The Alphabet instance used for all blocks in the chain. _dict_blocks (dict): (for internal use only) dictionary mapping Block objects to integer coefficients. _prod_symbol (str): Either '', '*', or '.'. \"\"\" def __init__ ( self , expression = None , alphabet = None , prod_symbol = None , * , list_coeffs = None , list_blocks = None , dict_blocks = None , ): \"\"\" Represents a chain in the Insertion Chain Complex: a linear combination of valid blocks with integer coefficients. Each term can include an integer coefficient followed by a block, e.g., '2abc(1,a)b^ac(1,b)ac - (1,c)(1,a)b^2'. The class can be initialized from: - a string expression (preferred way for end users), - a list of coefficients and blocks, or - a dictionary mapping blocks to coefficients. Args: expression (str, optional): Chain written as a string of blocks. This is the preferred way for end users to construct a chain. alphabet (Alphabet, optional): Alphabet object defining the set of letters. If set to None, a new empty alphabet is created. prod_symbol (str, optional): Product symbol to use in blocks. Must be one of {'', '*', '.'}. If None, it is inferred from the expression: '*' if '*' appears, '.' if '.' appears, or '' otherwise. list_coeffs (list of int, optional): Integer coefficients of the chain terms. Must be provided together with `list_blocks`. Ignored if `expression` or `dict_blocks` is given. list_blocks (list of Block, optional): Block objects corresponding to the coefficients in `list_coeffs`. Ignored if `expression` or `dict_blocks` is given. dict_blocks (dict, optional): Dictionary mapping Block objects to integer coefficients. If provided, it takes precedence over `expression`,`list_coeffs`, and `list_blocks`. \"\"\" super () . __init__ () alphabet = Alphabet ([]) if alphabet is None else alphabet # If dict_blocks provided use that one if dict_blocks is not None : # Check all keys are instances of Block if not all ( isinstance ( b , Block ) for b in dict_blocks . keys ()): raise TypeError ( \"All keys of dict_blocks must be instances of Block\" ) # Check all values are integers if not all ( isinstance ( c , int ) for c in dict_blocks . values ()): raise TypeError ( \"All values of dict_blocks must be integers\" ) self . _dict_blocks = dict_blocks self . _alphabet = _combine_blocks_alphabet ( dict_blocks . keys (), alphabet ) # Use provided prod_symbol or use a suitable: concatenation for symbols of # length 1, \".\" otherwise if prod_symbol in [ \"\" , \".\" , \"*\" ]: self . _prod_symbol = prod_symbol elif ( max ([ len ( symbol ) for symbol in self . _alphabet . letters_str ], default = 1 ) > 1 ): self . _prod_symbol = \".\" else : self . _prod_symbol = \"\" # Otherwise, if expression is present, or list_coeff, list_blocks are # present, use that. else : if isinstance ( expression , str ): list_coeffs , list_blocks , alphabet , prod_symbol = ( _chain_str_constructor ( expression , alphabet , prod_symbol ) ) self . _alphabet = alphabet self . _prod_symbol = prod_symbol else : # Check list_coeffs and list_blocks are valid and create alphabet and prod_symbol # Check list_coeffs and list_blocks have same length if len ( list_coeffs ) != len ( list_blocks ): raise ValueError ( \"list_coeffs and list_blocks must have the same length\" ) # Check all elements in list_blocks are instances of Block if not all ( isinstance ( b , Block ) for b in list_blocks ): raise TypeError ( \"All elements of list_blocks must be instances of Block\" ) # Check all elements in list_coeffs are integers if not all ( isinstance ( c , int ) for c in list_coeffs ): raise TypeError ( \"All elements of list_coeffs must be integers\" ) # Set alphabet self . _alphabet = _combine_blocks_alphabet ( dict_blocks . keys (), alphabet ) # Use provided prod_symbol or use a suitable: concatenation for symbols of # length 1, \".\" otherwise if prod_symbol in [ \"\" , \".\" , \"*\" ]: self . _prod_symbol = prod_symbol elif ( max ( [ len ( symbol ) for symbol in self . _alphabet . letters_str ], default = 1 , ) > 1 ): self . _prod_symbol = \".\" else : self . _prod_symbol = \"\" # Create dictionary self . _dict_blocks = {} for i , block in enumerate ( list_blocks ): if block not in self . _dict_blocks : self . _dict_blocks [ block ] = list_coeffs [ i ] else : self . _dict_blocks [ block ] += list_coeffs [ i ] # Clean dict_blocks _clean_dictionary_blocks ( self . _dict_blocks ) # Set up attributes self . _create_expression () self . dim = max ([ B . dim for B in self . _dict_blocks ] + [ - 1 ]) def _create_expression ( self ): \"\"\"Build the SymPy expression from the chain's blocks and coefficients.\"\"\" # Create expression self . _expression = int ( 0 ) + sum ( [ int ( self . _dict_blocks [ block ]) * block . get_expression () for block in self . _dict_blocks ] ) def __add__ ( self , other ): new_dict = copy . deepcopy ( self . _to_chain () . _dict_blocks ) other = other . _to_chain () for block in other . _dict_blocks : if block in new_dict : new_dict [ block ] += other . _dict_blocks [ block ] else : new_dict [ block ] = other . _dict_blocks [ block ] _clean_dictionary_blocks ( new_dict ) return Chain ( dict_blocks = new_dict ) def __rmul__ ( self , coeff ): dict_blocks = self . _to_chain () . _dict_blocks . copy () if coeff != 0 : new_dict = { c : coeff * dict_blocks [ c ] for c in dict_blocks } else : new_dict = {} return Chain ( dict_blocks = new_dict , alphabet = self . _alphabet , prod_symbol = self . _prod_symbol ) def boundary ( self ): \"\"\"Return the boundary of the chain as a new Chain.\"\"\" new_dict = {} for block in self . _dict_blocks : coeff = self . _dict_blocks [ block ] dict_boundary = block . boundary () . get_dict_blocks () for new_block in dict_boundary : if new_block in new_dict : new_dict [ new_block ] += coeff * dict_boundary [ new_block ] else : new_dict [ new_block ] = coeff * dict_boundary [ new_block ] _clean_dictionary_blocks ( new_dict ) return Chain ( dict_blocks = new_dict , alphabet = self . _alphabet , prod_symbol = self . _prod_symbol ) def get_dict_blocks ( self ): \"\"\"Return a copy of the internal blocks dictionary.\"\"\" return self . _dict_blocks . copy ()","title":"Chain"},{"location":"reference/#InDelsTopo.Chain.__init__","text":"Represents a chain in the Insertion Chain Complex: a linear combination of valid blocks with integer coefficients. Each term can include an integer coefficient followed by a block, e.g., '2abc(1,a)b^ac(1,b)ac - (1,c)(1,a)b^2'. The class can be initialized from a string expression (preferred way for end users), a list of coefficients and blocks, or a dictionary mapping blocks to coefficients. Parameters: expression ( str , default: None ) \u2013 Chain written as a string of blocks. This is the preferred way for end users to construct a chain. alphabet ( Alphabet , default: None ) \u2013 Alphabet object defining the set of letters. If set to None, a new empty alphabet is created. prod_symbol ( str , default: None ) \u2013 Product symbol to use in blocks. Must be one of {'', ' ', '.'}. If None, it is inferred from the expression: ' ' if '*' appears, '.' if '.' appears, or '' otherwise. list_coeffs ( list of int , default: None ) \u2013 Integer coefficients of the chain terms. Must be provided together with list_blocks . Ignored if expression or dict_blocks is given. list_blocks ( list of Block , default: None ) \u2013 Block objects corresponding to the coefficients in list_coeffs . Ignored if expression or dict_blocks is given. dict_blocks ( dict , default: None ) \u2013 Dictionary mapping Block objects to integer coefficients. If provided, it takes precedence over expression , list_coeffs , and list_blocks . Source code in InDelsTopo/chain.pydef __init__ ( self , expression = None , alphabet = None , prod_symbol = None , * , list_coeffs = None , list_blocks = None , dict_blocks = None , ): \"\"\" Represents a chain in the Insertion Chain Complex: a linear combination of valid blocks with integer coefficients. Each term can include an integer coefficient followed by a block, e.g., '2abc(1,a)b^ac(1,b)ac - (1,c)(1,a)b^2'. The class can be initialized from: - a string expression (preferred way for end users), - a list of coefficients and blocks, or - a dictionary mapping blocks to coefficients. Args: expression (str, optional): Chain written as a string of blocks. This is the preferred way for end users to construct a chain. alphabet (Alphabet, optional): Alphabet object defining the set of letters. If set to None, a new empty alphabet is created. prod_symbol (str, optional): Product symbol to use in blocks. Must be one of {'', '*', '.'}. If None, it is inferred from the expression: '*' if '*' appears, '.' if '.' appears, or '' otherwise. list_coeffs (list of int, optional): Integer coefficients of the chain terms. Must be provided together with `list_blocks`. Ignored if `expression` or `dict_blocks` is given. list_blocks (list of Block, optional): Block objects corresponding to the coefficients in `list_coeffs`. Ignored if `expression` or `dict_blocks` is given. dict_blocks (dict, optional): Dictionary mapping Block objects to integer coefficients. If provided, it takes precedence over `expression`,`list_coeffs`, and `list_blocks`. \"\"\" super () . __init__ () alphabet = Alphabet ([]) if alphabet is None else alphabet # If dict_blocks provided use that one if dict_blocks is not None : # Check all keys are instances of Block if not all ( isinstance ( b , Block ) for b in dict_blocks . keys ()): raise TypeError ( \"All keys of dict_blocks must be instances of Block\" ) # Check all values are integers if not all ( isinstance ( c , int ) for c in dict_blocks . values ()): raise TypeError ( \"All values of dict_blocks must be integers\" ) self . _dict_blocks = dict_blocks self . _alphabet = _combine_blocks_alphabet ( dict_blocks . keys (), alphabet ) # Use provided prod_symbol or use a suitable: concatenation for symbols of # length 1, \".\" otherwise if prod_symbol in [ \"\" , \".\" , \"*\" ]: self . _prod_symbol = prod_symbol elif ( max ([ len ( symbol ) for symbol in self . _alphabet . letters_str ], default = 1 ) > 1 ): self . _prod_symbol = \".\" else : self . _prod_symbol = \"\" # Otherwise, if expression is present, or list_coeff, list_blocks are # present, use that. else : if isinstance ( expression , str ): list_coeffs , list_blocks , alphabet , prod_symbol = ( _chain_str_constructor ( expression , alphabet , prod_symbol ) ) self . _alphabet = alphabet self . _prod_symbol = prod_symbol else : # Check list_coeffs and list_blocks are valid and create alphabet and prod_symbol # Check list_coeffs and list_blocks have same length if len ( list_coeffs ) != len ( list_blocks ): raise ValueError ( \"list_coeffs and list_blocks must have the same length\" ) # Check all elements in list_blocks are instances of Block if not all ( isinstance ( b , Block ) for b in list_blocks ): raise TypeError ( \"All elements of list_blocks must be instances of Block\" ) # Check all elements in list_coeffs are integers if not all ( isinstance ( c , int ) for c in list_coeffs ): raise TypeError ( \"All elements of list_coeffs must be integers\" ) # Set alphabet self . _alphabet = _combine_blocks_alphabet ( dict_blocks . keys (), alphabet ) # Use provided prod_symbol or use a suitable: concatenation for symbols of # length 1, \".\" otherwise if prod_symbol in [ \"\" , \".\" , \"*\" ]: self . _prod_symbol = prod_symbol elif ( max ( [ len ( symbol ) for symbol in self . _alphabet . letters_str ], default = 1 , ) > 1 ): self . _prod_symbol = \".\" else : self . _prod_symbol = \"\" # Create dictionary self . _dict_blocks = {} for i , block in enumerate ( list_blocks ): if block not in self . _dict_blocks : self . _dict_blocks [ block ] = list_coeffs [ i ] else : self . _dict_blocks [ block ] += list_coeffs [ i ] # Clean dict_blocks _clean_dictionary_blocks ( self . _dict_blocks ) # Set up attributes self . _create_expression () self . dim = max ([ B . dim for B in self . _dict_blocks ] + [ - 1 ])","title":"__init__"},{"location":"reference/#InDelsTopo.Chain.boundary","text":"Return the boundary of the chain as a new Chain. Source code in InDelsTopo/chain.py 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 def boundary ( self ): \"\"\"Return the boundary of the chain as a new Chain.\"\"\" new_dict = {} for block in self . _dict_blocks : coeff = self . _dict_blocks [ block ] dict_boundary = block . boundary () . get_dict_blocks () for new_block in dict_boundary : if new_block in new_dict : new_dict [ new_block ] += coeff * dict_boundary [ new_block ] else : new_dict [ new_block ] = coeff * dict_boundary [ new_block ] _clean_dictionary_blocks ( new_dict ) return Chain ( dict_blocks = new_dict , alphabet = self . _alphabet , prod_symbol = self . _prod_symbol )","title":"boundary"},{"location":"reference/#InDelsTopo.Chain.get_dict_blocks","text":"Return a copy of the internal blocks dictionary. Source code in InDelsTopo/chain.py 344 345 346 def get_dict_blocks ( self ): \"\"\"Return a copy of the internal blocks dictionary.\"\"\" return self . _dict_blocks . copy ()","title":"get_dict_blocks"},{"location":"reference/#InDelsTopo.Complex","text":"Represents an Insertion Chain Complex C[W] for a set of words W. The class stores the blocks of the complex in each dimension and provides methods to compute topological invariants such as the Euler characteristic and Betti numbers (over Z_2 or Z when using a SageMath kernel). It also supports graphical visualization of the complex in low dimensions. The k-dimensional blocks can be accessed via indexing syntax: K[k] returns the list of k-blocks. Attributes: dim ( int ) \u2013 Maximum dimension of the complex. complex_dict ( dict [ int , list [ Block ]] ) \u2013 Maps each dimension to its corresponding list of blocks. height ( float | None ) \u2013 Height value associated with the complex. Internal attributes _alphabet (Alphabet): Alphabet object containing all symbols used in W. _prod_symbol (str): Product symbol used in the blocks. _positions_dict (dict | None): Stores vertex positions for graphical visualization. Notes This class can be used to build and analyze Insertion Chain Complexes directly, or as a sublevel complex of a filtration. Homology computations over Z require SageMath; otherwise, only Z_2 computations are available using SciPy. It initializes as an empty complex. It can be made into the insertion chain complex of a set of words W by using the method compute_d_skeleton(W) . Blocks can be added or removed by using the methods add_blocks and remove_blocks . Example W = [\"ab\", \"aab\", \"abb\"] K = Complex() # Creates an empty complex K.compute_d_skeleton(W) # makes K = C[W] K[1] # Access 1-dimensional blocks [a(1,a)b, ab(1,b)] Source code in InDelsTopo/complex.pyclass Complex : \"\"\" Represents an Insertion Chain Complex C[W] for a set of words W. The class stores the blocks of the complex in each dimension and provides methods to compute topological invariants such as the Euler characteristic and Betti numbers (over Z_2 or Z when using a SageMath kernel). It also supports graphical visualization of the complex in low dimensions. The k-dimensional blocks can be accessed via indexing syntax: `K[k]` returns the list of k-blocks. Attributes: dim (int): Maximum dimension of the complex. complex_dict (dict[int, list[Block]]): Maps each dimension to its corresponding list of blocks. height (float | None): Height value associated with the complex. Internal attributes: _alphabet (Alphabet): Alphabet object containing all symbols used in W. _prod_symbol (str): Product symbol used in the blocks. _positions_dict (dict | None): Stores vertex positions for graphical visualization. Notes: - This class can be used to build and analyze Insertion Chain Complexes directly, or as a sublevel complex of a filtration. - Homology computations over Z require SageMath; otherwise, only Z_2 computations are available using SciPy. - It initializes as an empty complex. It can be made into the insertion chain complex of a set of words `W` by using the method `compute_d_skeleton(W)`. - Blocks can be added or removed by using the methods `add_blocks` and `remove_blocks`. Example: >>> W = [\"ab\", \"aab\", \"abb\"] >>> K = Complex() # Creates an empty complex >>> K.compute_d_skeleton(W) # makes K = C[W] >>> K[1] # Access 1-dimensional blocks [a(1,a)b, ab(1,b)] \"\"\" def __init__ ( self , alphabet = None , prod_symbol = None , * , complex_dict = None , height = None ): \"\"\" Initialize an Insertion Chain Complex. This constructor creates a new complex object, which can either start empty (with no blocks) or be initialized from a given dictionary of blocks. Optionally, the complex can store a height value, useful when representing a level in a filtration. Args: alphabet (Alphabet | None, optional): The alphabet containing all symbols to be used. Defaults to None. prod_symbol (str | None, optional): Product symbol used for block construction, Must be one of {'', '*', '.'}. If None, it is inferred from the expression: set to '*' if '*' appears, to '.' if '.' appears, or to '' (concatenation) otherwise. complex_dict (dict[int, list[Block]] | None, optional): Mapping from dimension `d` to the list of d-dimensional blocks. If provided, it initializes the complex structure directly. Defaults to None. height (float | None, optional): Height value associated with the complex, used when part of a filtration. Defaults to None. \"\"\" self . _alphabet = alphabet self . _prod_symbol = prod_symbol self . dim = - 1 self . complex_dict = {} self . height = None self . _positions_dict = None if not complex_dict is None : self . dim = max ( complex_dict . keys (), default =- 1 ) self . complex_dict = complex_dict self . height = height def compute_d_skeleton ( self , W , height = None , max_dim = 10 , alphabet = None , prod_symbol = None , check_duplicates = True , already_blocks = False , verbose = False , ): \"\"\" Compute the d-skeleton of the Insertion Chain Complex generated by a set of words, C[W]. This method replaces any existing data in the Complex with a new complex supported on `W`. This method constructs all valid blocks up to the specified maximum dimension (`max_dim`) for a given set of words `W`. It begins by computing the 0- and 1-skeletons (vertices and edges), then iteratively extends to higher dimensions. It updates the internal `complex_dict` to the blocks supported on `W`. Args: W (list of str or Block): List of words (or blocks, if `already_blocks=True`) forming the base of the complex. height (float, optional): Height value associated with the complex, used when part of a filtration. Defaults to None. max_dim (int, optional): Maximum dimension of the skeleton to compute. Defaults to 10. alphabet (Alphabet, optional): Alphabet object used together with the internal `self._alphabet` and any letters inferred from `W`. If provided, its symbols are merged with `self._alphabet`; otherwise, the new symbols are inferred entirely from the given words. prod_symbol (str, optional): Product symbol for block construction ('*', '.', or ''). If None, inferred automatically. check_duplicates (bool, optional): Whether to verify that input words are unique. Defaults to True. already_blocks (bool, optional): If True, assumes the input `W` is already a list of `Block` objects instead of strings. Defaults to False. verbose (bool, optional): If True, prints progress information during computation. Example: >>> W = ['a*b', 'a*b*b', 'a*a*b',''] >>> K = Filtration() >>> K.compute_d_skeleton(W, heights=[0.1, 0.3, 0.2,0.4], max_dim=2) >>> K[1] {a*b*(1,b): 0.3, a*(1,a)*b: 0.2} \"\"\" K = Filtration () K . compute_d_skeleton ( W , heights = None , max_dim = max_dim , alphabet = alphabet , prod_symbol = prod_symbol , check_duplicates = check_duplicates , already_blocks = already_blocks , verbose = verbose , ) complex_dict = { dim : list ( K [ dim ] . keys ()) for dim in K . filtration_dict } self . complex_dict = complex_dict self . height = height self . dim = K . dim self . _alphabet = K . get_alphabet () del K def get_maximal_blocks ( self ): \"\"\" Return the maximal blocks of the complex, ordered by subfaces. A block is maximal if it is not a subface of any higher-dimensional block. The method identifies all such maximal blocks in each dimension and returns them as a dictionary. Returns: dict[int, list[Block]]: A dictionary mapping each dimension to a list of maximal blocks (i.e., blocks not covered by higher-dimensional ones). Notes: - Empty dimensions are removed from the output dictionary. \"\"\" covered_dict = {} max_dim = self . dim if max_dim >= 0 : for dim in range ( max_dim , - 1 , - 1 ): covered_dict [ dim - 1 ] = set ([]) for block in self . complex_dict [ dim ]: covered_dict [ dim - 1 ] . update ( block . get_all_facets ()) # Remove faces covered by a higher one maximal_dict = { max_dim : self . complex_dict [ max_dim ] . copy ()} for dim in range ( max_dim ): maximal_dict [ dim ] = list ( set ( self . complex_dict [ dim ]) . difference ( covered_dict [ dim ]) ) # Remove empty dimensions for dim in range ( max_dim ): if len ( maximal_dict [ dim ]) == 0 : del maximal_dict [ dim ] return maximal_dict return {} def get_complex ( self , max_dim = None ): \"\"\" Return a subcomplex of the current complex up to the specified dimension. If `max_dim` is not provided or is greater than or equal to the current dimension, the method returns the complex itself. Otherwise, it returns a new `Complex` object containing only the blocks up to dimension `max_dim`. Args: max_dim (int or None, optional): Maximum dimension of blocks to include in the returned complex. If None or greater than the complex dimension, the full complex is returned. Returns: Complex: A subcomplex containing blocks up to dimension `max_dim`. \"\"\" if max_dim is None or max_dim >= self . dim : return self complex_dict = { dim : list ( self . complex_dict [ dim ]) for dim in range ( max_dim + 1 )} for dim in range ( max_dim , - 1 , - 1 ): if len ( complex_dict [ dim ]) == 0 : del complex_dict [ dim ] else : break return Complex ( alphabet = self . _alphabet , prod_symbol = self . _prod_symbol , complex_dict = complex_dict , height = self . height , ) def add_blocks ( self , list_blocks , prod_symbol = None , already_blocks = False ): \"\"\" Add new blocks to the Complex. Extends the current Complex by inserting additional blocks and their faces. Intended for expert use only, since the resulting structure may not be a full Insertion Chain Complex C[W], but rather a subcomplex if some supported blocks are missing. Args: list_blocks (list[Block] or list[str]): List of blocks to be added to the Filtration. If ``already_blocks`` is False (default), the elements are assumed to be strings representing blocks and will be converted. If True, they are assumed to be existing ``Block`` objects. prod_symbol (str or None, optional): Product symbol used in block representation ('*', '.', or ''). If not specified, it is inferred from the input blocks. already_blocks (bool, optional): If True, elements of ``list_blocks`` are assumed to be valid ``Block`` objects. If False (default), the method attempts to convert the input into blocks. Notes: The internal alphabet and product symbol are updated to ensure consistency. \"\"\" # Convert into blocks if needed if already_blocks : alphabet = _combine_blocks_alphabet ( list_blocks , self . _alphabet ) else : list_blocks , alphabet , prod_symbol = _convert_words_to_blocks ( list_blocks , prod_symbol = prod_symbol , alphabet = self . _alphabet ) self . _alphabet = alphabet # Uniformalize prod_symbols pylint: disable=protected-access new_prods = [ blk . _prod_symbol for blk in list_blocks ] + [ self . _prod_symbol ] if \"*\" in new_prods : prod_symbol = \"*\" elif \".\" in new_prods : prod_symbol = \".\" else : prod_symbol = \"\" self . _prod_symbol = prod_symbol for blk in list_blocks : blk . _prod_symbol = self . _prod_symbol # Add blocks and faces to complex_dict for block in list_blocks : for face in block . get_all_faces ( True ): dimension = face . dim if dimension in self . complex_dict : if not face in self . complex_dict [ dimension ]: try : self . complex_dict [ dimension ] . append ( face ) except KeyError : self . complex_dict [ dimension ] = [ face ] else : self . complex_dict [ dimension ] = [ face ] # Recompute dimension self . dim = max ( self . complex_dict , default =- 1 ) def remove_blocks ( self , list_blocks , prod_symbol = None , include_upfaces = True , already_blocks = False ): \"\"\" Remove blocks from the Complex. Deletes specified blocks and optionally their super-faces from the Complex. Intended for expert use only, since the resulting structure may not be a full Insertion Chain Complex C[W], but rather a subcomplex if some supported blocks are missing. Args: list_blocks (list of Block or string): A list of blocks to remove. If `already_blocks` is False (default), the elements are assumed to be strings representing blocks and will be converted. If True, they are assumed to be existing Block objects. prod_symbol (str or None, optional): Product symbol used in block representation ( '*', '.', or ''). If not specified, it is inferred from the input blocks. include_upfaces (bool, optional): If True, all super faces of the specified blocks are also removed, so the result is a subcomplex. Default is True. already_blocks (bool, optional): If True, the elements of `list_blocks` are assumed to be valid Block objects. If False (default), the method attempts to convert the input into blocks. \"\"\" # Make sure it is a list if not isinstance ( list_blocks , list ): raise TypeError ( \"list_blocks must be a list\" ) # Convert into blocks if needed if not already_blocks : list_blocks , _alphabet , prod_symbol = _convert_words_to_blocks ( list_blocks , prod_symbol = prod_symbol , alphabet = self . _alphabet ) # Dictionary of blocks to remove blocks_to_remove = { i : [] for i in range ( self . dim + 1 )} for block in list_blocks : if block . dim in self . complex_dict and block in self . complex_dict [ block . dim ]: blocks_to_remove [ block . dim ] . append ( block ) # Find super-faces if needed if include_upfaces : for dimension in range ( 1 , self . dim + 1 ): for block in self . complex_dict [ dimension ]: facets = block . get_all_facets () if any ( facet in blocks_to_remove [ dimension - 1 ] for facet in facets ): blocks_to_remove [ dimension ] . append ( block ) # Remove blocks for dimension in blocks_to_remove : for block in blocks_to_remove [ dimension ]: if block in self . complex_dict [ dimension ]: self . complex_dict [ dimension ] . remove ( block ) # Update complex_dict for dimension in range ( self . dim , - 1 , - 1 ): if len ( self . complex_dict [ dimension ]) == 0 : del self . complex_dict [ dimension ] else : break # Recompute dimension self . dim = max ( self . complex_dict , default =- 1 ) def euler_characteristic ( self ): \"\"\" This method computes the Euler characteristic of the complex. \"\"\" faces = [( k , len ( self . complex_dict [ k ])) for k in self . complex_dict ] characteristic = int ( np . sum ([( - 1 ) ** k * m for ( k , m ) in faces ])) return characteristic def __getitem__ ( self , key ): if 0 <= key <= self . dim : return self . complex_dict [ key ] return {} def get_graph ( self , show_labels = True , max_dim = 5 , positions = None , initial_positions = None , fixed = None , recompute = False , colors_by_dim = None , ax = None , ): \"\"\" Generate a graphical representation of the complex up to a specified dimension. Positions of vertices can be computed automatically or provided manually. Only accurate for low-dimensional complexes (typically dim <= 3). Args: show_labels (bool, optional): Whether to display labels on the vertices. Defaults to True. max_dim (int, optional): Maximum dimension of blocks to include in the graph. Defaults to 5. positions (dict, optional): Dictionary of vertex positions. If None, positions are computed automatically. Once computed, they are reused everytime this method is called, unless recompute is set to True. initial_positions (dict, optional): Initial positions used to seed the automatic layout algorithm. fixed (list or None, optional): List of vertex keys to fix in place when computing positions. Defaults to None. recompute (bool, optional): Whether to recompute vertex positions even if already stored. Defaults to False. colors_by_dim (list of str, optional): List of colors to use for each dimension. If None, defaults to ['black', 'gray', 'yellow', 'red', 'blue', 'purple']. ax (matplotlib.axes._subplots.Axes3DSubplot, optional): A Matplotlib Axes object to draw the plot on. If None, a new figure and axes are created. Defaults to None. Returns: matplotlib.axes.Axes: Matplotlib axes object containing the drawn graph. \"\"\" if self . dim == - 1 : return None if ( positions is None ) or recompute : if ( self . _positions_dict is None ) or recompute : self . _positions_dict = graphics . compute_vertex_positions ( self , pos0 = initial_positions , fixed = fixed ) # Make sure position includes all vertices elif any ( vertex not in self . _positions_dict for vertex in self [ 0 ]): # Update with pos0 if isinstance ( initial_positions , dict ): for vertex in initial_positions : self . _positions_dict [ vertex ] = initial_positions [ vertex ] # Compute for all vertices self . _positions_dict = graphics . compute_vertex_positions ( self , pos0 = self . _positions_dict , fixed = list ( self . _positions_dict . keys ()), ) # Get the positions positions = self . _positions_dict ax = graphics . make_graph ( self , pos = positions , show_labels = show_labels , max_dim = max_dim , height = None , already_complex = True , colors_by_dim = colors_by_dim , ax = ax , ) return ax def get_betti_numbers_z2 ( self , max_dim = None ): \"\"\" Returns the betti numbers in Z_2 coefficients up to the specified dimension max_dim. \"\"\" # Import csc_matrix from scipy.sparse import csc_matrix if max_dim is None or max_dim >= self . dim : max_dim = self . dim using_skeleton = False elif max_dim == self . dim - 1 : max_dim = self . dim using_skeleton = True else : max_dim += 1 using_skeleton = True # Order the blocks according to their dimension ordered_blocks = [] for d in range ( max_dim + 1 ): ordered_blocks += self [ d ] ordered_blocks . sort ( key = lambda B : B . dim ) ordered_blocks_dict = { ordered_blocks [ i ]: i for i in range ( len ( ordered_blocks ))} # Construct the boundary matrix cols = [] rows = [] data = [] for id_col , block in enumerate ( ordered_blocks ): facets = block . get_all_facets () for face in facets : cols . append ( id_col ) rows . append ( ordered_blocks_dict [ face ]) data . append ( 1 ) N = len ( ordered_blocks ) boundary_matrix = csc_matrix (( data , ( rows , cols )), shape = ( N , N )) . tolil () # Perform row reduction (we follow the algorithm from https://arxiv.org/pdf/1506.08903) low = [] # maps row index to pivot column index betti_numbers = { dim : 0 for dim in range ( max_dim + 1 )} for j in range ( N ): col = boundary_matrix . getcol ( j ) if col . nnz > 0 : # Set initial value for low(j) low_j = col . nonzero ()[ 0 ][ - 1 ] while low_j in low : i = low . index ( low_j ) # add column i to column j col = col + boundary_matrix . getcol ( i ) col . data = col . data % 2 # Make adition modulo 2 col . eliminate_zeros () if col . nnz > 0 : low_j = col . nonzero ()[ 0 ][ - 1 ] # update low_j value else : low_j = - 1 break boundary_matrix [:, j ] = col # update column j in the matrix low . append ( low_j ) # Save value for low_j else : # Set -1, for undefined low(j) low . append ( - 1 ) # Extract surviving cycles for j , low_j in enumerate ( low ): if low_j < 0 and not j in low : dim = ordered_blocks [ j ] . dim betti_numbers [ dim ] += 1 if using_skeleton : if max_dim in betti_numbers : del betti_numbers [ max_dim ] return betti_numbers def get_chain_complex_sage ( self , get_ordered_blocks = False ): \"\"\" Construct and return the associated chain complex as a SageMath object. This method is intended to be used in a SageMath kernel. It builds a chain complex using Sage's `ChainComplex()` constructor. Optionally, it can also return the blocks sorted within each dimension. Args: get_ordered_blocks (bool, optional): If True, also return the blocks ordered by their expressions within each dimension. Defaults to False. Returns: ChainComplex or tuple[ChainComplex, dict[int, list[Block]]]: - If `get_ordered_blocks` is False, returns a ChainComplex object representing the boundary operators. - If `get_ordered_blocks` is True, returns a tuple `(ChainComplex, Blocks_ordered)`, where `Blocks_ordered` is a dictionary of lists of blocks sorted by expression. Notes: - Requires SageMath to be installed and accessible in the current environment. - If SageMath is not found, the function prints a warning and returns None. - Any other errors during construction are caught and printed. \"\"\" try : from InDelsTopo import homology_sagemath return homology_sagemath . create_chain_complex ( self . complex_dict , get_ordered_blocks ) except ImportError : print ( \"Could not find SageMath functions. \" \"This module requires SageMath to run and cannot be \" \"executed in a standard Python environment.\" ) return None except Exception as e : print ( f \"An error occurred: { e } \" ) return None def get_homology_sage ( self , save_chain_complex = False , used_saved_chain_complex = True , ** kwargs ): \"\"\" Return the homology of the associated chain complex using SageMath. This method should be run in a SageMath kernel. It constructs a SageMath chain complex and computes its homology using Sage's built-in `homology()` method. Parameters: save_chain_complex (bool): If True, the chain complex is saved as an attribute (`self._sage_chain_complex`) to speed up future computations. used_saved_chain_complex (bool): If True, it will attempt to use the saved chain_complex attribute, otherwise, it will be computed from scratch. **kwargs: Additional keyword arguments passed directly to SageMath's `homology()` method. Returns: The homology object returned by SageMath. \"\"\" chain_complex = getattr ( self , \"_sage_chain_complex\" , None ) if not used_saved_chain_complex or chain_complex is None : chain_complex = self . get_chain_complex_sage () if save_chain_complex : self . _sage_chain_complex = chain_complex return chain_complex . homology ( ** kwargs ) def __str__ ( self ): to_print = \"Insertion Chain Complex \\n \" to_print += \"alphabet: \" + str ( self . _alphabet ) + \". \\n \" if not self . height is None : to_print += \"height: \" + str ( self . height ) + \". \\n \" to_print += \"dimension: \" + str ( self . dim ) + \". \\n \" to_print += \"vertices: \" + str ( len ( self [ 0 ])) + \". \\n \" to_print += ( \"blocks: \" + str ( sum ([ len ( self [ k ]) for k in range ( self . dim + 1 )])) + \".\" ) return to_print def __repr__ ( self ): return self . __str__ () def get_alphabet ( self ): \"\"\"Returns the alphabet attribute.\"\"\" return self . _alphabet","title":"Complex"},{"location":"reference/#InDelsTopo.Complex.__init__","text":"Initialize an Insertion Chain Complex. This constructor creates a new complex object, which can either start empty (with no blocks) or be initialized from a given dictionary of blocks. Optionally, the complex can store a height value, useful when representing a level in a filtration. Parameters: alphabet ( Alphabet | None , default: None ) \u2013 The alphabet containing all symbols to be used. Defaults to None. prod_symbol ( str | None , default: None ) \u2013 Product symbol used for block construction, Must be one of {'', ' ', '.'}. If None, it is inferred from the expression: set to ' ' if '*' appears, to '.' if '.' appears, or to '' (concatenation) otherwise. complex_dict ( dict [ int , list [ Block ]] | None , default: None ) \u2013 Mapping from dimension d to the list of d-dimensional blocks. If provided, it initializes the complex structure directly. Defaults to None. height ( float | None , default: None ) \u2013 Height value associated with the complex, used when part of a filtration. Defaults to None. Source code in InDelsTopo/complex.py 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 def __init__ ( self , alphabet = None , prod_symbol = None , * , complex_dict = None , height = None ): \"\"\" Initialize an Insertion Chain Complex. This constructor creates a new complex object, which can either start empty (with no blocks) or be initialized from a given dictionary of blocks. Optionally, the complex can store a height value, useful when representing a level in a filtration. Args: alphabet (Alphabet | None, optional): The alphabet containing all symbols to be used. Defaults to None. prod_symbol (str | None, optional): Product symbol used for block construction, Must be one of {'', '*', '.'}. If None, it is inferred from the expression: set to '*' if '*' appears, to '.' if '.' appears, or to '' (concatenation) otherwise. complex_dict (dict[int, list[Block]] | None, optional): Mapping from dimension `d` to the list of d-dimensional blocks. If provided, it initializes the complex structure directly. Defaults to None. height (float | None, optional): Height value associated with the complex, used when part of a filtration. Defaults to None. \"\"\" self . _alphabet = alphabet self . _prod_symbol = prod_symbol self . dim = - 1 self . complex_dict = {} self . height = None self . _positions_dict = None if not complex_dict is None : self . dim = max ( complex_dict . keys (), default =- 1 ) self . complex_dict = complex_dict self . height = height","title":"__init__"},{"location":"reference/#InDelsTopo.Complex.add_blocks","text":"Add new blocks to the Complex. Extends the current Complex by inserting additional blocks and their faces. Intended for expert use only, since the resulting structure may not be a full Insertion Chain Complex C[W], but rather a subcomplex if some supported blocks are missing. Parameters: list_blocks ( list [ Block ] or list [ str ] ) \u2013 List of blocks to be added to the Filtration. If already_blocks is False (default), the elements are assumed to be strings representing blocks and will be converted. If True, they are assumed to be existing Block objects. prod_symbol ( str or None , default: None ) \u2013 Product symbol used in block representation ('*', '.', or ''). If not specified, it is inferred from the input blocks. already_blocks ( bool , default: False ) \u2013 If True, elements of list_blocks are assumed to be valid Block objects. If False (default), the method attempts to convert the input into blocks. Notes The internal alphabet and product symbol are updated to ensure consistency. Source code in InDelsTopo/complex.py 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 def add_blocks ( self , list_blocks , prod_symbol = None , already_blocks = False ): \"\"\" Add new blocks to the Complex. Extends the current Complex by inserting additional blocks and their faces. Intended for expert use only, since the resulting structure may not be a full Insertion Chain Complex C[W], but rather a subcomplex if some supported blocks are missing. Args: list_blocks (list[Block] or list[str]): List of blocks to be added to the Filtration. If ``already_blocks`` is False (default), the elements are assumed to be strings representing blocks and will be converted. If True, they are assumed to be existing ``Block`` objects. prod_symbol (str or None, optional): Product symbol used in block representation ('*', '.', or ''). If not specified, it is inferred from the input blocks. already_blocks (bool, optional): If True, elements of ``list_blocks`` are assumed to be valid ``Block`` objects. If False (default), the method attempts to convert the input into blocks. Notes: The internal alphabet and product symbol are updated to ensure consistency. \"\"\" # Convert into blocks if needed if already_blocks : alphabet = _combine_blocks_alphabet ( list_blocks , self . _alphabet ) else : list_blocks , alphabet , prod_symbol = _convert_words_to_blocks ( list_blocks , prod_symbol = prod_symbol , alphabet = self . _alphabet ) self . _alphabet = alphabet # Uniformalize prod_symbols pylint: disable=protected-access new_prods = [ blk . _prod_symbol for blk in list_blocks ] + [ self . _prod_symbol ] if \"*\" in new_prods : prod_symbol = \"*\" elif \".\" in new_prods : prod_symbol = \".\" else : prod_symbol = \"\" self . _prod_symbol = prod_symbol for blk in list_blocks : blk . _prod_symbol = self . _prod_symbol # Add blocks and faces to complex_dict for block in list_blocks : for face in block . get_all_faces ( True ): dimension = face . dim if dimension in self . complex_dict : if not face in self . complex_dict [ dimension ]: try : self . complex_dict [ dimension ] . append ( face ) except KeyError : self . complex_dict [ dimension ] = [ face ] else : self . complex_dict [ dimension ] = [ face ] # Recompute dimension self . dim = max ( self . complex_dict , default =- 1 )","title":"add_blocks"},{"location":"reference/#InDelsTopo.Complex.compute_d_skeleton","text":"Compute the d-skeleton of the Insertion Chain Complex generated by a set of words, C[W]. This method replaces any existing data in the Complex with a new complex supported on W . This method constructs all valid blocks up to the specified maximum dimension ( max_dim ) for a given set of words W . It begins by computing the 0- and 1-skeletons (vertices and edges), then iteratively extends to higher dimensions. It updates the internal complex_dict to the blocks supported on W . Parameters: W ( list of str or Block ) \u2013 List of words (or blocks, if already_blocks=True ) forming the base of the complex. height ( float , default: None ) \u2013 Height value associated with the complex, used when part of a filtration. Defaults to None. max_dim ( int , default: 10 ) \u2013 Maximum dimension of the skeleton to compute. Defaults to 10. alphabet ( Alphabet , default: None ) \u2013 Alphabet object used together with the internal self._alphabet and any letters inferred from W . If provided, its symbols are merged with self._alphabet ; otherwise, the new symbols are inferred entirely from the given words. prod_symbol ( str , default: None ) \u2013 Product symbol for block construction ('*', '.', or ''). If None, inferred automatically. check_duplicates ( bool , default: True ) \u2013 Whether to verify that input words are unique. Defaults to True. already_blocks ( bool , default: False ) \u2013 If True, assumes the input W is already a list of Block objects instead of strings. Defaults to False. verbose ( bool , default: False ) \u2013 If True, prints progress information during computation. Example W = ['a b', 'a b b', 'a a b',''] K = Filtration() K.compute_d_skeleton(W, heights=[0.1, 0.3, 0.2,0.4], max_dim=2) K[1] {a b (1,b): 0.3, a (1,a)*b: 0.2} Source code in InDelsTopo/complex.py 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 def compute_d_skeleton ( self , W , height = None , max_dim = 10 , alphabet = None , prod_symbol = None , check_duplicates = True , already_blocks = False , verbose = False , ): \"\"\" Compute the d-skeleton of the Insertion Chain Complex generated by a set of words, C[W]. This method replaces any existing data in the Complex with a new complex supported on `W`. This method constructs all valid blocks up to the specified maximum dimension (`max_dim`) for a given set of words `W`. It begins by computing the 0- and 1-skeletons (vertices and edges), then iteratively extends to higher dimensions. It updates the internal `complex_dict` to the blocks supported on `W`. Args: W (list of str or Block): List of words (or blocks, if `already_blocks=True`) forming the base of the complex. height (float, optional): Height value associated with the complex, used when part of a filtration. Defaults to None. max_dim (int, optional): Maximum dimension of the skeleton to compute. Defaults to 10. alphabet (Alphabet, optional): Alphabet object used together with the internal `self._alphabet` and any letters inferred from `W`. If provided, its symbols are merged with `self._alphabet`; otherwise, the new symbols are inferred entirely from the given words. prod_symbol (str, optional): Product symbol for block construction ('*', '.', or ''). If None, inferred automatically. check_duplicates (bool, optional): Whether to verify that input words are unique. Defaults to True. already_blocks (bool, optional): If True, assumes the input `W` is already a list of `Block` objects instead of strings. Defaults to False. verbose (bool, optional): If True, prints progress information during computation. Example: >>> W = ['a*b', 'a*b*b', 'a*a*b',''] >>> K = Filtration() >>> K.compute_d_skeleton(W, heights=[0.1, 0.3, 0.2,0.4], max_dim=2) >>> K[1] {a*b*(1,b): 0.3, a*(1,a)*b: 0.2} \"\"\" K = Filtration () K . compute_d_skeleton ( W , heights = None , max_dim = max_dim , alphabet = alphabet , prod_symbol = prod_symbol , check_duplicates = check_duplicates , already_blocks = already_blocks , verbose = verbose , ) complex_dict = { dim : list ( K [ dim ] . keys ()) for dim in K . filtration_dict } self . complex_dict = complex_dict self . height = height self . dim = K . dim self . _alphabet = K . get_alphabet () del K","title":"compute_d_skeleton"},{"location":"reference/#InDelsTopo.Complex.euler_characteristic","text":"This method computes the Euler characteristic of the complex. Source code in InDelsTopo/complex.py 363 364 365 366 367 368 369 def euler_characteristic ( self ): \"\"\" This method computes the Euler characteristic of the complex. \"\"\" faces = [( k , len ( self . complex_dict [ k ])) for k in self . complex_dict ] characteristic = int ( np . sum ([( - 1 ) ** k * m for ( k , m ) in faces ])) return characteristic","title":"euler_characteristic"},{"location":"reference/#InDelsTopo.Complex.get_alphabet","text":"Returns the alphabet attribute. Source code in InDelsTopo/complex.py 610 611 612 def get_alphabet ( self ): \"\"\"Returns the alphabet attribute.\"\"\" return self . _alphabet","title":"get_alphabet"},{"location":"reference/#InDelsTopo.Complex.get_betti_numbers_z2","text":"Returns the betti numbers in Z_2 coefficients up to the specified dimension max_dim. Source code in InDelsTopo/complex.py 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 def get_betti_numbers_z2 ( self , max_dim = None ): \"\"\" Returns the betti numbers in Z_2 coefficients up to the specified dimension max_dim. \"\"\" # Import csc_matrix from scipy.sparse import csc_matrix if max_dim is None or max_dim >= self . dim : max_dim = self . dim using_skeleton = False elif max_dim == self . dim - 1 : max_dim = self . dim using_skeleton = True else : max_dim += 1 using_skeleton = True # Order the blocks according to their dimension ordered_blocks = [] for d in range ( max_dim + 1 ): ordered_blocks += self [ d ] ordered_blocks . sort ( key = lambda B : B . dim ) ordered_blocks_dict = { ordered_blocks [ i ]: i for i in range ( len ( ordered_blocks ))} # Construct the boundary matrix cols = [] rows = [] data = [] for id_col , block in enumerate ( ordered_blocks ): facets = block . get_all_facets () for face in facets : cols . append ( id_col ) rows . append ( ordered_blocks_dict [ face ]) data . append ( 1 ) N = len ( ordered_blocks ) boundary_matrix = csc_matrix (( data , ( rows , cols )), shape = ( N , N )) . tolil () # Perform row reduction (we follow the algorithm from https://arxiv.org/pdf/1506.08903) low = [] # maps row index to pivot column index betti_numbers = { dim : 0 for dim in range ( max_dim + 1 )} for j in range ( N ): col = boundary_matrix . getcol ( j ) if col . nnz > 0 : # Set initial value for low(j) low_j = col . nonzero ()[ 0 ][ - 1 ] while low_j in low : i = low . index ( low_j ) # add column i to column j col = col + boundary_matrix . getcol ( i ) col . data = col . data % 2 # Make adition modulo 2 col . eliminate_zeros () if col . nnz > 0 : low_j = col . nonzero ()[ 0 ][ - 1 ] # update low_j value else : low_j = - 1 break boundary_matrix [:, j ] = col # update column j in the matrix low . append ( low_j ) # Save value for low_j else : # Set -1, for undefined low(j) low . append ( - 1 ) # Extract surviving cycles for j , low_j in enumerate ( low ): if low_j < 0 and not j in low : dim = ordered_blocks [ j ] . dim betti_numbers [ dim ] += 1 if using_skeleton : if max_dim in betti_numbers : del betti_numbers [ max_dim ] return betti_numbers","title":"get_betti_numbers_z2"},{"location":"reference/#InDelsTopo.Complex.get_chain_complex_sage","text":"Construct and return the associated chain complex as a SageMath object. This method is intended to be used in a SageMath kernel. It builds a chain complex using Sage's ChainComplex() constructor. Optionally, it can also return the blocks sorted within each dimension. Parameters: get_ordered_blocks ( bool , default: False ) \u2013 If True, also return the blocks ordered by their expressions within each dimension. Defaults to False. Returns: \u2013 ChainComplex or tuple[ChainComplex, dict[int, list[Block]]]: - If get_ordered_blocks is False, returns a ChainComplex object representing the boundary operators. - If get_ordered_blocks is True, returns a tuple (ChainComplex, Blocks_ordered) , where Blocks_ordered is a dictionary of lists of blocks sorted by expression. Notes: - Requires SageMath to be installed and accessible in the current environment. - If SageMath is not found, the function prints a warning and returns None. - Any other errors during construction are caught and printed. Source code in InDelsTopo/complex.py 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 def get_chain_complex_sage ( self , get_ordered_blocks = False ): \"\"\" Construct and return the associated chain complex as a SageMath object. This method is intended to be used in a SageMath kernel. It builds a chain complex using Sage's `ChainComplex()` constructor. Optionally, it can also return the blocks sorted within each dimension. Args: get_ordered_blocks (bool, optional): If True, also return the blocks ordered by their expressions within each dimension. Defaults to False. Returns: ChainComplex or tuple[ChainComplex, dict[int, list[Block]]]: - If `get_ordered_blocks` is False, returns a ChainComplex object representing the boundary operators. - If `get_ordered_blocks` is True, returns a tuple `(ChainComplex, Blocks_ordered)`, where `Blocks_ordered` is a dictionary of lists of blocks sorted by expression. Notes: - Requires SageMath to be installed and accessible in the current environment. - If SageMath is not found, the function prints a warning and returns None. - Any other errors during construction are caught and printed. \"\"\" try : from InDelsTopo import homology_sagemath return homology_sagemath . create_chain_complex ( self . complex_dict , get_ordered_blocks ) except ImportError : print ( \"Could not find SageMath functions. \" \"This module requires SageMath to run and cannot be \" \"executed in a standard Python environment.\" ) return None except Exception as e : print ( f \"An error occurred: { e } \" ) return None","title":"get_chain_complex_sage"},{"location":"reference/#InDelsTopo.Complex.get_complex","text":"Return a subcomplex of the current complex up to the specified dimension. If max_dim is not provided or is greater than or equal to the current dimension, the method returns the complex itself. Otherwise, it returns a new Complex object containing only the blocks up to dimension max_dim . Parameters: max_dim ( int or None , default: None ) \u2013 Maximum dimension of blocks to include in the returned complex. If None or greater than the complex dimension, the full complex is returned. Returns: Complex \u2013 A subcomplex containing blocks up to dimension max_dim . Source code in InDelsTopo/complex.py 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 def get_complex ( self , max_dim = None ): \"\"\" Return a subcomplex of the current complex up to the specified dimension. If `max_dim` is not provided or is greater than or equal to the current dimension, the method returns the complex itself. Otherwise, it returns a new `Complex` object containing only the blocks up to dimension `max_dim`. Args: max_dim (int or None, optional): Maximum dimension of blocks to include in the returned complex. If None or greater than the complex dimension, the full complex is returned. Returns: Complex: A subcomplex containing blocks up to dimension `max_dim`. \"\"\" if max_dim is None or max_dim >= self . dim : return self complex_dict = { dim : list ( self . complex_dict [ dim ]) for dim in range ( max_dim + 1 )} for dim in range ( max_dim , - 1 , - 1 ): if len ( complex_dict [ dim ]) == 0 : del complex_dict [ dim ] else : break return Complex ( alphabet = self . _alphabet , prod_symbol = self . _prod_symbol , complex_dict = complex_dict , height = self . height , )","title":"get_complex"},{"location":"reference/#InDelsTopo.Complex.get_graph","text":"Generate a graphical representation of the complex up to a specified dimension. Positions of vertices can be computed automatically or provided manually. Only accurate for low-dimensional complexes (typically dim <= 3). Parameters: show_labels ( bool , default: True ) \u2013 Whether to display labels on the vertices. Defaults to True. max_dim ( int , default: 5 ) \u2013 Maximum dimension of blocks to include in the graph. Defaults to 5. positions ( dict , default: None ) \u2013 Dictionary of vertex positions. If None, positions are computed automatically. Once computed, they are reused everytime this method is called, unless recompute is set to True. initial_positions ( dict , default: None ) \u2013 Initial positions used to seed the automatic layout algorithm. fixed ( list or None , default: None ) \u2013 List of vertex keys to fix in place when computing positions. Defaults to None. recompute ( bool , default: False ) \u2013 Whether to recompute vertex positions even if already stored. Defaults to False. colors_by_dim ( list of str , default: None ) \u2013 List of colors to use for each dimension. If None, defaults to ['black', 'gray', 'yellow', 'red', 'blue', 'purple']. ax ( Axes3DSubplot , default: None ) \u2013 A Matplotlib Axes object to draw the plot on. If None, a new figure and axes are created. Defaults to None. Returns: \u2013 matplotlib.axes.Axes: Matplotlib axes object containing the drawn graph. Source code in InDelsTopo/complex.py 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 def get_graph ( self , show_labels = True , max_dim = 5 , positions = None , initial_positions = None , fixed = None , recompute = False , colors_by_dim = None , ax = None , ): \"\"\" Generate a graphical representation of the complex up to a specified dimension. Positions of vertices can be computed automatically or provided manually. Only accurate for low-dimensional complexes (typically dim <= 3). Args: show_labels (bool, optional): Whether to display labels on the vertices. Defaults to True. max_dim (int, optional): Maximum dimension of blocks to include in the graph. Defaults to 5. positions (dict, optional): Dictionary of vertex positions. If None, positions are computed automatically. Once computed, they are reused everytime this method is called, unless recompute is set to True. initial_positions (dict, optional): Initial positions used to seed the automatic layout algorithm. fixed (list or None, optional): List of vertex keys to fix in place when computing positions. Defaults to None. recompute (bool, optional): Whether to recompute vertex positions even if already stored. Defaults to False. colors_by_dim (list of str, optional): List of colors to use for each dimension. If None, defaults to ['black', 'gray', 'yellow', 'red', 'blue', 'purple']. ax (matplotlib.axes._subplots.Axes3DSubplot, optional): A Matplotlib Axes object to draw the plot on. If None, a new figure and axes are created. Defaults to None. Returns: matplotlib.axes.Axes: Matplotlib axes object containing the drawn graph. \"\"\" if self . dim == - 1 : return None if ( positions is None ) or recompute : if ( self . _positions_dict is None ) or recompute : self . _positions_dict = graphics . compute_vertex_positions ( self , pos0 = initial_positions , fixed = fixed ) # Make sure position includes all vertices elif any ( vertex not in self . _positions_dict for vertex in self [ 0 ]): # Update with pos0 if isinstance ( initial_positions , dict ): for vertex in initial_positions : self . _positions_dict [ vertex ] = initial_positions [ vertex ] # Compute for all vertices self . _positions_dict = graphics . compute_vertex_positions ( self , pos0 = self . _positions_dict , fixed = list ( self . _positions_dict . keys ()), ) # Get the positions positions = self . _positions_dict ax = graphics . make_graph ( self , pos = positions , show_labels = show_labels , max_dim = max_dim , height = None , already_complex = True , colors_by_dim = colors_by_dim , ax = ax , ) return ax","title":"get_graph"},{"location":"reference/#InDelsTopo.Complex.get_homology_sage","text":"Return the homology of the associated chain complex using SageMath. This method should be run in a SageMath kernel. It constructs a SageMath chain complex and computes its homology using Sage's built-in homology() method. Parameters: save_chain_complex ( bool , default: False ) \u2013 If True, the chain complex is saved as an attribute ( self._sage_chain_complex ) to speed up future computations. used_saved_chain_complex ( bool , default: True ) \u2013 If True, it will attempt to use the saved chain_complex attribute, otherwise, it will be computed from scratch. **kwargs \u2013 Additional keyword arguments passed directly to SageMath's homology() method. Returns: \u2013 The homology object returned by SageMath. Source code in InDelsTopo/complex.py 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 def get_homology_sage ( self , save_chain_complex = False , used_saved_chain_complex = True , ** kwargs ): \"\"\" Return the homology of the associated chain complex using SageMath. This method should be run in a SageMath kernel. It constructs a SageMath chain complex and computes its homology using Sage's built-in `homology()` method. Parameters: save_chain_complex (bool): If True, the chain complex is saved as an attribute (`self._sage_chain_complex`) to speed up future computations. used_saved_chain_complex (bool): If True, it will attempt to use the saved chain_complex attribute, otherwise, it will be computed from scratch. **kwargs: Additional keyword arguments passed directly to SageMath's `homology()` method. Returns: The homology object returned by SageMath. \"\"\" chain_complex = getattr ( self , \"_sage_chain_complex\" , None ) if not used_saved_chain_complex or chain_complex is None : chain_complex = self . get_chain_complex_sage () if save_chain_complex : self . _sage_chain_complex = chain_complex return chain_complex . homology ( ** kwargs )","title":"get_homology_sage"},{"location":"reference/#InDelsTopo.Complex.get_maximal_blocks","text":"Return the maximal blocks of the complex, ordered by subfaces. A block is maximal if it is not a subface of any higher-dimensional block. The method identifies all such maximal blocks in each dimension and returns them as a dictionary. Returns: \u2013 dict[int, list[Block]]: A dictionary mapping each dimension to a list \u2013 of maximal blocks (i.e., blocks not covered by higher-dimensional ones). Notes Empty dimensions are removed from the output dictionary. Source code in InDelsTopo/complex.py 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 def get_maximal_blocks ( self ): \"\"\" Return the maximal blocks of the complex, ordered by subfaces. A block is maximal if it is not a subface of any higher-dimensional block. The method identifies all such maximal blocks in each dimension and returns them as a dictionary. Returns: dict[int, list[Block]]: A dictionary mapping each dimension to a list of maximal blocks (i.e., blocks not covered by higher-dimensional ones). Notes: - Empty dimensions are removed from the output dictionary. \"\"\" covered_dict = {} max_dim = self . dim if max_dim >= 0 : for dim in range ( max_dim , - 1 , - 1 ): covered_dict [ dim - 1 ] = set ([]) for block in self . complex_dict [ dim ]: covered_dict [ dim - 1 ] . update ( block . get_all_facets ()) # Remove faces covered by a higher one maximal_dict = { max_dim : self . complex_dict [ max_dim ] . copy ()} for dim in range ( max_dim ): maximal_dict [ dim ] = list ( set ( self . complex_dict [ dim ]) . difference ( covered_dict [ dim ]) ) # Remove empty dimensions for dim in range ( max_dim ): if len ( maximal_dict [ dim ]) == 0 : del maximal_dict [ dim ] return maximal_dict return {}","title":"get_maximal_blocks"},{"location":"reference/#InDelsTopo.Complex.remove_blocks","text":"Remove blocks from the Complex. Deletes specified blocks and optionally their super-faces from the Complex. Intended for expert use only, since the resulting structure may not be a full Insertion Chain Complex C[W], but rather a subcomplex if some supported blocks are missing. Parameters: list_blocks ( list of Block or string ) \u2013 A list of blocks to remove. If already_blocks is False (default), the elements are assumed to be strings representing blocks and will be converted. If True, they are assumed to be existing Block objects. prod_symbol ( str or None , default: None ) \u2013 Product symbol used in block representation ( '*', '.', or ''). If not specified, it is inferred from the input blocks. include_upfaces ( bool , default: True ) \u2013 If True, all super faces of the specified blocks are also removed, so the result is a subcomplex. Default is True. already_blocks ( bool , default: False ) \u2013 If True, the elements of list_blocks are assumed to be valid Block objects. If False (default), the method attempts to convert the input into blocks. Source code in InDelsTopo/complex.py 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 def remove_blocks ( self , list_blocks , prod_symbol = None , include_upfaces = True , already_blocks = False ): \"\"\" Remove blocks from the Complex. Deletes specified blocks and optionally their super-faces from the Complex. Intended for expert use only, since the resulting structure may not be a full Insertion Chain Complex C[W], but rather a subcomplex if some supported blocks are missing. Args: list_blocks (list of Block or string): A list of blocks to remove. If `already_blocks` is False (default), the elements are assumed to be strings representing blocks and will be converted. If True, they are assumed to be existing Block objects. prod_symbol (str or None, optional): Product symbol used in block representation ( '*', '.', or ''). If not specified, it is inferred from the input blocks. include_upfaces (bool, optional): If True, all super faces of the specified blocks are also removed, so the result is a subcomplex. Default is True. already_blocks (bool, optional): If True, the elements of `list_blocks` are assumed to be valid Block objects. If False (default), the method attempts to convert the input into blocks. \"\"\" # Make sure it is a list if not isinstance ( list_blocks , list ): raise TypeError ( \"list_blocks must be a list\" ) # Convert into blocks if needed if not already_blocks : list_blocks , _alphabet , prod_symbol = _convert_words_to_blocks ( list_blocks , prod_symbol = prod_symbol , alphabet = self . _alphabet ) # Dictionary of blocks to remove blocks_to_remove = { i : [] for i in range ( self . dim + 1 )} for block in list_blocks : if block . dim in self . complex_dict and block in self . complex_dict [ block . dim ]: blocks_to_remove [ block . dim ] . append ( block ) # Find super-faces if needed if include_upfaces : for dimension in range ( 1 , self . dim + 1 ): for block in self . complex_dict [ dimension ]: facets = block . get_all_facets () if any ( facet in blocks_to_remove [ dimension - 1 ] for facet in facets ): blocks_to_remove [ dimension ] . append ( block ) # Remove blocks for dimension in blocks_to_remove : for block in blocks_to_remove [ dimension ]: if block in self . complex_dict [ dimension ]: self . complex_dict [ dimension ] . remove ( block ) # Update complex_dict for dimension in range ( self . dim , - 1 , - 1 ): if len ( self . complex_dict [ dimension ]) == 0 : del self . complex_dict [ dimension ] else : break # Recompute dimension self . dim = max ( self . complex_dict , default =- 1 )","title":"remove_blocks"},{"location":"reference/#InDelsTopo.Filtration","text":"Represents a lower-star filtration on a Letter Insertion Chain Complex C[W], for a set of words W with associated heights. It stores the blocks of the complex at each dimension with their corresponding heights. Provides methods for computing the Euler Characteristic Curve, persistent homology barcodes (with Z/Z2 coefficients), and a graphical representation of (accurate for low dimensions). One can access the k-th dimensional blocks by indexing the filtration as 'K[k]'. This returns a dictionary mapping each k-block to its height. Attributes: dim ( int ) \u2013 Maximum dimension of the filtration. filtration_dict ( dict ) \u2013 Maps dimension d to a dictionary of blocks and their heights. filtration_values ( list ) \u2013 Sorted list of heights used in the filtration. Internal Attributes _alphabet (Alphabet): Alphabet containing all symbols in W. _prod_symbol (str): Product symbol used for constructing blocks ('*', '.', or '' for concatenation). _positions_dict (dict or None): Stores vertex positions for graph representations. Notes It initializes as an empty filtration. It can be made into the filtration of insertion chain complexes of a set of words W by using the method compute_d_skeleton(W, heights) . Blocks can be added or removed by using the methods add_blocks and remove_blocks . Example: W = [\"ab\", \"aab\", \"abb\"] heights = [0.1, 0.3, 0.5] K = Filtration() # Creates an empty complex K.compute_d_skeleton(W, heights, max_dim=5) # makes K = a filtration of C[W] K[1] # Access 1-dimensional blocks and their heights {a(1,a)b: 0.3, ab(1,b): 0.5} Source code in InDelsTopo/filtration.pyclass Filtration : \"\"\" Represents a lower-star filtration on a Letter Insertion Chain Complex C[W], for a set of words W with associated heights. It stores the blocks of the complex at each dimension with their corresponding heights. Provides methods for computing the Euler Characteristic Curve, persistent homology barcodes (with Z/Z2 coefficients), and a graphical representation of (accurate for low dimensions). One can access the k-th dimensional blocks by indexing the filtration as 'K[k]'. This returns a dictionary mapping each k-block to its height. Attributes: dim (int): Maximum dimension of the filtration. filtration_dict (dict): Maps dimension d to a dictionary of blocks and their heights. filtration_values (list): Sorted list of heights used in the filtration. Internal Attributes: _alphabet (Alphabet): Alphabet containing all symbols in W. _prod_symbol (str): Product symbol used for constructing blocks ('*', '.', or '' for concatenation). _positions_dict (dict or None): Stores vertex positions for graph representations. Notes: - It initializes as an empty filtration. It can be made into the filtration of insertion chain complexes of a set of words `W` by using the method `compute_d_skeleton(W, heights)`. - Blocks can be added or removed by using the methods `add_blocks` and `remove_blocks`. Example: >>> W = [\"ab\", \"aab\", \"abb\"] >>> heights = [0.1, 0.3, 0.5] >>> K = Filtration() # Creates an empty complex >>> K.compute_d_skeleton(W, heights, max_dim=5) # makes K = a filtration of C[W] >>> K[1] # Access 1-dimensional blocks and their heights {a(1,a)b: 0.3, ab(1,b): 0.5} \"\"\" def __init__ ( self , alphabet = None , prod_symbol = None ): \"\"\" Returns an empty Filtration object. Args: alphabet (Alphabet, optional): Alphabet object defining valid symbols. If None, a new empty `Alphabet` is created. prod_symbol (str, optional): The product symbol to use. Must be one of {'', '*', '.'}. If None, it is inferred from the expression: set to '*' if '*' appears, to '.' if '.' appears, or to '' (concatenation) otherwise. \"\"\" # User inputs self . _alphabet = alphabet self . _prod_symbol = prod_symbol # Filtration data self . dim = - 1 self . filtration_dict = {} self . filtration_values = [] # Used when creating a graph self . _positions_dict = None def _facets_maximal_word ( self , word , indices , which = \"all\" , casted = False ): \"\"\" Generates the (upper/lower/all) facets of a block given as maximal word-indices pair. Args: w (str or SymPy expression): The maximal word, provided as a string if `casted=False`, or as a processed (casted) word using the `cast_word` method from `Alphabet`. indices (list[int]): A list of indices that are converted into edges to construct a block. which (str, optional): Which facets to produce, must be one of 'upper', 'lower', or 'all'. Defaults to 'all'. casted (bool, optional): Specifies whether the word has been pre-casted using `Alphabet`. If False, it is treated as a string. Defaults to False. Returns: List[Block]: A list of facets. \"\"\" if not casted : word = self . _alphabet . cast_word ( word ) factors = list ( word . as_coeff_mul ()[ 1 ]) upper_factors = [] lower_factors = [] length = len ( factors ) for i in range ( length ): base , exp = factors [ i ] . as_base_exp () if i in indices : upper_factor = self . _alphabet . get ( str ( base ), 1 ) if exp == 1 : lower_factor = int ( 1 ) else : lower_factor = base ** ( exp - 1 ) upper_factors . append ( lower_factor * upper_factor ) if which in [ \"all\" , \"lower\" ]: lower_factors . append ( lower_factor ) else : upper_factors . append ( factors [ i ]) lower_factors . append ( factors [ i ]) upper_facets = [] lower_facets = [] for i in indices : if which in [ \"all\" , \"upper\" ]: block_exp = sym . prod ( upper_factors [: i ] + [ factors [ i ]] + upper_factors [ i + 1 :], start = int ( 1 ), ) block = Block ( str ( block_exp ), prod_symbol = \"*\" , alphabet = self . _alphabet ) # Fix prod_symbol pylint: disable=protected-access block . _prod_symbol = self . _prod_symbol upper_facets . append ( block ) if which in [ \"all\" , \"lower\" ]: block_exp = sym . prod ( upper_factors [: i ] + [ lower_factors [ i ]] + upper_factors [ i + 1 :], start = int ( 1 ), ) block = Block ( str ( block_exp ), prod_symbol = \"*\" , alphabet = self . _alphabet ) lower_facets . append ( block ) # Fix prod_symbol pylint: disable=protected-access block . _prod_symbol = self . _prod_symbol # Filter 0's in lower facets if which in [ \"all\" , \"lower\" ]: while Block () in lower_facets : lower_facets . remove ( Block ()) # Return the result if which == \"upper\" : return upper_facets if which == \"lower\" : return lower_facets return upper_facets + lower_facets def _block_maximal_word ( self , word , indices , casted = False ): \"\"\" Generates block based on the given maximal word and indices. Args: w (str or SymPy expression): The maximal word, provided as a string if `casted=False`, or as a processed (casted) word using the `cast_word` method from `Alphabet`. indices (list[int]): A list of indices that are converted into edges to construct a block. Returns: Block: The block represented by w(indices). \"\"\" if not casted : word = self . _alphabet . cast_word ( word ) factors = list ( word . as_coeff_mul ()[ 1 ]) new_factors = [] length = len ( factors ) for i in range ( length ): base , exp = factors [ i ] . as_base_exp () if i in indices : upper_factor = self . _alphabet . get ( str ( base ), 1 ) if exp == 1 : lower_factor = int ( 1 ) else : lower_factor = base ** ( exp - 1 ) new_factors . append ( lower_factor * upper_factor ) else : new_factors . append ( factors [ i ]) block_exp = sym . prod ( new_factors , start = int ( 1 )) block = Block ( str ( block_exp ), prod_symbol = \"*\" , alphabet = self . _alphabet ) # Fix prod_symbol block . _prod_symbol = self . _prod_symbol # pylint: disable=protected-access return block def _lower_facets_maximal_word_as_pairs ( self , word , indices , casted = False ): \"\"\" Generates the lower facets of a block in word-indices representation, as pairs of maximal word and indices. Args: w (str or SymPy expression: The maximal word, provided as a string if `casted=False`, or as a processed (casted) word using the `cast_word` method from `Alphabet`. indices (list[int]): A list of indices that are converted into edges to construct a block. casted (bool, optional): Specifies whether the word has been pre-casted using `Alphabet`. If False, the word is treated as a string. Defaults to False. Returns: Returns: list[tuple[Expr, list[int]]]: List of pairs `(w, l)`, where `w` is a SymPy expression, and `l` is a list of indices giving the word-indices representation of the lower facets. \"\"\" if not casted : word = self . _alphabet . cast_word ( word ) factors = list ( word . as_coeff_mul ()[ 1 ]) upper_factors = [] lower_factors = [] base_exp_pairs = [ factor . as_base_exp () for factor in factors ] length = len ( base_exp_pairs ) for i in range ( length ): base = base_exp_pairs [ i ][ 0 ] exp = base_exp_pairs [ i ][ 1 ] if i in indices : upper_factor = self . _alphabet . get ( str ( base ), 1 ) if exp == 1 : lower_factor = int ( 1 ) else : lower_factor = base ** ( exp - 1 ) upper_factors . append ( lower_factor * upper_factor ) lower_factors . append ( lower_factor ) else : upper_factors . append ( factors [ i ]) lower_factors . append ( factors [ i ]) lower_facets = [] for i in indices : exp_i = base_exp_pairs [ i ][ 1 ] if i == 0 : base_before = int ( 1 ) else : base_before = base_exp_pairs [ i - 1 ][ 0 ] if i + 1 >= length : base_after = int ( 1 ) else : base_after = base_exp_pairs [ i + 1 ][ 0 ] # Check if the resulting block is valid if ( (( i - 1 ) in indices ) and (( i + 1 ) in indices ) and ( exp_i ) == 1 and ( base_before == base_after ) ): continue # Compute maximal word w_max = sym . prod ( factors [: i ] + [ lower_factors [ i ]] + factors [ i + 1 :], start = int ( 1 ) ) # Compute the new indices new_indices = [ _compute_new_index_lower_facet ( j , i , exp_i , base_before , base_after ) for j in indices if i != j ] lower_facets . append (( w_max , new_indices )) return lower_facets def _check_edge ( self , word1 , word1_extended , word2_extended ): \"\"\" Internal helper function used to check whether two vertices form a 1-block and, if so, construct that 1-block. Assummes |word1|=|word2|+1. Args: word1 (SymPy expression or str): Base word corresponding to the first block. It is assumed that |w_1| = |w_2| + 1. word1_extended (list of tuple): List of (letter, exponent) pairs representing the expanded form of `word1`. word2_extended (list of tuple): List of (letter, exponent) pairs representing the expanded form of the second word. Returns: tuple: - bool: True if `word1` and `word2` are connected. - Block or None: The corresponding 1-block, if an edge is found. - int or None: The index `j` such that the pair (w_1, [j]) gives the 1-block in word\u2013indices form. \"\"\" word1_extended_extra = [ letter for letter , count in word1_extended for _ in range ( count ) ] word2_extended_extra = [ letter for letter , count in word2_extended for _ in range ( count ) ] i = 0 for j , pair in enumerate ( word1_extended ): if ( word2_extended_extra == word1_extended_extra [: i ] + word1_extended_extra [ i + 1 :] ): return True , self . _block_maximal_word ( word1 , [ j ], True ), j i += pair [ 1 ] return False , None , None def _compute_one_skeleton ( self , list_words , list_heights , already_blocks , max_dim = 1 , alphabet = None , prod_symbol = None , verbose = False , check_duplicates = True , ): \"\"\" This is an internal method used to initialize the filtration at dimensions 0 and 1. The filtration and incidence dictionaries are updated in place. Args: list_words (list of str or Block objects): vertices for the filtration. list_heights (list of int): heights associated to the words. already_blocks (bool): If True, assumes the words are already block objects; otherwise, they are converted to blocks. max_dim (int or None): Maximum dimension to compute. Default is 1. alphabet (Alphabet or None): If None, uses `self._alphabet`. prod_symbol (str or None): Symbol used for concatenation in word representations. verbose (bool, optional): If True, prints progress messages. Default is False. check_duplicates (bool, optional): If True, checks that all words are unique. Defaults to True. \"\"\" if alphabet is None : alphabet = self . _alphabet elif not isinstance ( alphabet , Alphabet ): raise ValueError ( \"alphabet must be a valid Alphabet object or None\" ) elif isinstance ( self . _alphabet , Alphabet ): alphabet . update_letters ( self . _alphabet . letters_str ) if verbose : print ( \"Computing dimension 0 \\u2705 \" ) if already_blocks : list_vertices = list_words alphabet = _combine_blocks_alphabet ( list_words , self . _alphabet ) else : list_vertices , alphabet , prod_symbol = _convert_words_to_blocks ( [ str ( w ) for w in list_words ], prod_symbol = prod_symbol , alphabet = self . _alphabet , ) self . _alphabet = alphabet self . _prod_symbol = prod_symbol # Check each word is provided only once if check_duplicates : if len ( list_vertices ) != len ( set ( list_vertices )): raise ValueError ( \"List of words has duplicated words\" ) # Initialize Dictionary at dim=0 self . filtration_dict [ 0 ] = dict ( zip ( list_vertices , list_heights )) if max_dim == 0 : return if verbose : print ( \"Computing dimension 1\" , end = \"\" ) # Computing Graph (dim=1) self . filtration_dict [ 1 ] = dict () self . _incidence_dict [ 1 ] = dict () list_vertices . sort ( key = lambda x : _expand_symp_word ( x . get_expression ())[ 1 ], reverse = True ) list_expanded_vertices = [ _expand_symp_word ( x . get_expression ()) for x in list_vertices ] for i , word1 in enumerate ( list_vertices ): word1_extended , word1_len = list_expanded_vertices [ i ] for j in range ( i + 1 , len ( list_vertices )): word2 = list_vertices [ j ] word2_extended , word2_len = list_expanded_vertices [ j ] if word1_len - word2_len == 1 : is_edge , block , block_index = self . _check_edge ( word1 . get_expression (), word1_extended , word2_extended ) if is_edge : self . filtration_dict [ 1 ][ block ] = max ( self . filtration_dict [ 0 ][ word1 ], self . filtration_dict [ 0 ][ word2 ], ) if word1 . get_expression () in self . _incidence_dict [ 1 ]: self . _incidence_dict [ 1 ][ word1 . get_expression ()] . append ( [ block_index ] ) else : self . _incidence_dict [ 1 ][ word1 . get_expression ()] = [ [ block_index ] ] elif word1_len - word2_len > 1 : break if len ( self . filtration_dict [ 1 ]) == 0 : del self . filtration_dict [ 1 ] def compute_d_skeleton ( self , W , heights = None , max_dim = 10 , alphabet = None , prod_symbol = None , check_duplicates = True , already_blocks = False , verbose = False , ): \"\"\" Compute the d-skeleton of the Insertion Chain Complex generated by a set of words, C[W]. This method replaces any existing data in the Filtration with a new complex supported on `W`. This method constructs all valid blocks up to the specified maximum dimension (`max_dim`) for a given set of words `W` with associated heights. It begins by computing the 0- and 1-skeletons (vertices and edges), then iteratively extends to higher dimensions. It updates the internal `filtration_dict` to the blocks supported on `W`. Args: W (list of str or Block): List of words (or blocks, if `already_blocks=True`) forming the base of the complex. heights (list of float, optional): Height values associated with each word. If None, defaults to ones. max_dim (int, optional): Maximum dimension of the skeleton to compute. Defaults to 10. alphabet (Alphabet, optional): Alphabet object used together with the internal `self._alphabet` and any letters inferred from `W`. If provided, its symbols are merged with `self._alphabet`; otherwise, the new symbols are inferred entirely from the given words. prod_symbol (str, optional): Product symbol for block construction ('*', '.', or ''). If None, inferred automatically. check_duplicates (bool, optional): Whether to verify that input words are unique. Defaults to True. already_blocks (bool, optional): If True, assumes the input `W` is already a list of `Block` objects instead of strings. Defaults to False. verbose (bool, optional): If True, prints progress information during computation. Example: >>> W = ['a*b', 'a*b*b', 'a*a*b',''] >>> K = Filtration() >>> K.compute_d_skeleton(W, heights=[0.1, 0.3, 0.2,0.4], max_dim=2) >>> K[1] {a*b*(1,b): 0.3, a*(1,a)*b: 0.2} \"\"\" if heights is None : heights = [ 1 ] * len ( W ) else : if len ( heights ) != len ( W ): raise ValueError ( \"List of heighst must be same length as list of words, or None\" ) self . filtration_values = list ( set ( heights )) self . filtration_values . sort () # Restart dictionaries self . filtration_dict = {} # Used when computing the d-skeleton self . _incidence_dict = {} # Compute one Skeleton self . _compute_one_skeleton ( W , heights , already_blocks , max_dim , alphabet , prod_symbol , verbose , check_duplicates , ) if max_dim == 1 : self . dim = max ( self . filtration_dict ) return dim = 2 while ( dim <= max_dim ) and len ( self . _incidence_dict [ dim - 1 ]) > 0 : if verbose : print ( \" \\u2705\\n Computing dimension\" , dim , end = \"\" ) self . _incidence_dict [ dim ] = dict () for word in self . _incidence_dict [ dim - 1 ]: indices = self . _incidence_dict [ dim - 1 ][ word ] possible_indices = _candidate_indices_next ( indices ) for k_indices in possible_indices : lower_facets_pairs = self . _lower_facets_maximal_word_as_pairs ( word , k_indices , True ) # Check if lower_facets are all there all_facets_bool = True for w_max , indices_face in lower_facets_pairs : if ( w_max in self . _incidence_dict [ dim - 1 ] and indices_face in self . _incidence_dict [ dim - 1 ][ w_max ] ): continue else : all_facets_bool = False break if all_facets_bool : # Add to incidence dictionary if word in self . _incidence_dict [ dim ]: self . _incidence_dict [ dim ][ word ] . append ( k_indices ) else : self . _incidence_dict [ dim ][ word ] = [ k_indices ] # Compute height of block and add facets = self . _facets_maximal_word ( word , k_indices , which = \"all\" , casted = True ) height = max ( [ self . filtration_dict [ dim - 1 ][ blk ] for blk in facets ] ) block = self . _block_maximal_word ( word , k_indices , True ) if dim in self . filtration_dict : self . filtration_dict [ dim ][ block ] = height else : self . filtration_dict [ dim ] = { block : height } dim += 1 self . dim = max ( self . filtration_dict ) if verbose : print ( \" \\u274C \" ) del self . _incidence_dict def add_blocks ( self , list_blocks , list_heights = None , prod_symbol = None , already_blocks = False , update_values = False , ): \"\"\" Add new blocks to the Filtration. Extends the current Filtration by inserting additional blocks and their faces. This method allows dynamically modifying an existing filtration while ensuring, as much as possible, that the result remains a valid filtration (i.e., if \u03b1 \u2264 \u03b2, then F.get_complex(\u03b1) \u2286 F.get_complex(\u03b2)). Intended for expert use only, since the resulting structure may not always be a full Insertion Chain Complex C[W], but rather a subcomplex if some supporting blocks are missing. The result may depend on the order in which the blocks are provided. The behavior depends on the value of ``update_values``: - If ``update_values=True``, the heights of existing faces and super-faces are updated as needed to maintain the filtration property. This ensures that the new blocks can be inserted with the provided heights. - If ``update_values=False`` (default), the method adds the blocks only if their heights are consistent with the current filtration. Otherwise, the maximum among the heights of their faces is used instead. Args: list_blocks (list[Block] or list[str]): List of blocks to be added to the Filtration. If ``already_blocks`` is False (default), the elements are assumed to be strings representing blocks and will be converted. If True, they are assumed to be existing ``Block`` objects. list_heights (list[float] or float or None, optional): Heights assigned to each block. If a single numeric value is provided, it is used for all blocks. If None, all blocks receive height 1. prod_symbol (str or None, optional): Product symbol used in block representation (e.g., '*', '.', or ''). If not specified, it is inferred from the input blocks. already_blocks (bool, optional): If True, elements of ``list_blocks`` are assumed to be valid ``Block`` objects. If False (default), the method attempts to convert the input into blocks. update_values (bool, optional): If True, existing heights of faces and super-faces are updated as needed to maintain consistency when inserting the new blocks. If False (default), only new faces are added and the provided heights are applied when valid; otherwise, the lowest consistent height is used instead. Raises: ValueError: - If ``list_heights`` is a list whose length does not match ``list_blocks``. - If ``list_heights`` is not a list, a numeric value, or None. - If the height of a block is lower than the height of one of its faces already present in the filtration (when ``update_values=False``). Notes: - The internal alphabet and product symbol are updated to ensure consistency. - The resulting filtration may vary depending on the order in which blocks are inserted. - Updating an existing filtration in this way may be more computationally expensive than reconstructing a new Filtration directly from a set of words. \"\"\" # Convert into blocks if needed if already_blocks : alphabet = _combine_blocks_alphabet ( list_blocks , self . _alphabet ) else : list_blocks , alphabet , prod_symbol = _convert_words_to_blocks ( list_blocks , prod_symbol = prod_symbol , alphabet = self . _alphabet ) self . _alphabet = alphabet # Uniformalize prod_symbols pylint: disable=protected-access new_prods = [ blk . _prod_symbol for blk in list_blocks ] + [ self . _prod_symbol ] if \"*\" in new_prods : prod_symbol = \"*\" elif \".\" in new_prods : prod_symbol = \".\" else : prod_symbol = \"\" self . _prod_symbol = prod_symbol for blk in list_blocks : blk . _prod_symbol = self . _prod_symbol if list_heights is None : list_heights = [ 1 ] * len ( list_blocks ) elif isinstance ( list_heights , list ): # Check lengths agree if len ( list_blocks ) != len ( list_heights ): raise ValueError ( \"list_heights must be same length as list_blocks\" ) else : try : height = float ( list_heights ) list_heights = [ height ] * len ( list_blocks ) except BaseException : raise ValueError ( \"list_heights must be a list, a numeric value, or None\" ) for block , height in zip ( list_blocks , list_heights ): dim = block . dim # Ensure a dictionary exists for this dimension if dim not in self . filtration_dict : self . filtration_dict [ dim ] = {} # Add or update the main block current_height = self . filtration_dict [ dim ] . get ( block ) if current_height is None or update_values : self . filtration_dict [ dim ][ block ] = height # Update or add all faces for face in block . get_all_faces ( include_self = False ): f_dim = face . dim if f_dim not in self . filtration_dict : self . filtration_dict [ f_dim ] = {} current_height = self . filtration_dict [ f_dim ] . get ( face ) if current_height is None : # New face \u2014 assign current block's height self . filtration_dict [ f_dim ][ face ] = height elif update_values : # Keep the lowest (earliest) height to preserve filtration # order self . filtration_dict [ f_dim ][ face ] = min ( current_height , height ) # Recompute dimension self . dim = max ( self . filtration_dict , default =- 1 ) # Fix values so the result is a filtration for dim in range ( 1 , self . dim + 1 ): for block in self . filtration_dict [ dim ]: facets = block . get_all_facets () all_heights = [ self . filtration_dict [ dim ][ block ]] + [ self . filtration_dict [ dim - 1 ][ facet ] for facet in facets ] new_height = max ( all_heights ) self . filtration_dict [ dim ][ block ] = new_height # Add filtration values self . filtration_values += list_heights self . filtration_values = list ( set ( self . filtration_values )) self . filtration_values . sort () def remove_blocks ( self , list_blocks , prod_symbol = None , include_upfaces = True , already_blocks = False ): \"\"\" Remove blocks from the Filtration. Deletes specified blocks and optionally their super-faces from the Complex. Intended for expert use only, since the resulting structure may not be a full Insertion Chain Complex C[W], but rather a subcomplex if some supported blocks are missing. Args: list_blocks (list of Block or string): A list of blocks to remove. If `already_blocks` is False (default), the elements are assumed to be strings representing blocks and will be converted. If True, they are assumed to be existing Block objects. prod_symbol (str or None, optional): Product symbol used in block representation ( '*', '.', or ''). If not specified, it is inferred from the input blocks. include_upfaces (bool, optional): If True, all super faces of the specified blocks are also removed, so the result is a subcomplex. Default is True. already_blocks (bool, optional): If True, the elements of `list_blocks` are assumed to be valid Block objects. If False (default), the method attempts to convert the input into blocks. \"\"\" # Make sure it is a list if not isinstance ( list_blocks , list ): raise TypeError ( \"list_blocks must be a list\" ) # Convert into blocks if needed if not already_blocks : list_blocks , _alphabet , prod_symbol = _convert_words_to_blocks ( list_blocks , prod_symbol = prod_symbol , alphabet = self . _alphabet ) # Dictionary of blocks to remove blocks_to_remove = { i : [] for i in range ( self . dim + 1 )} for block in list_blocks : if ( block . dim in self . filtration_dict and block in self . filtration_dict [ block . dim ] ): blocks_to_remove [ block . dim ] . append ( block ) # Find super-faces if needed if include_upfaces : for dimension in range ( 1 , self . dim + 1 ): for block in self . filtration_dict [ dimension ]: facets = block . get_all_facets () if any ( facet in blocks_to_remove [ dimension - 1 ] for facet in facets ): blocks_to_remove [ dimension ] . append ( block ) # Remove blocks for dimension in blocks_to_remove : for block in blocks_to_remove [ dimension ]: if block in self . filtration_dict [ dimension ]: del self . filtration_dict [ dimension ][ block ] # Update filtration_dict for dimension in range ( self . dim , - 1 , - 1 ): if len ( self . filtration_dict [ dimension ]) == 0 : del self . filtration_dict [ dimension ] else : break # Update filtration values self . filtration_values = list ( { val for dimension_dict in self . filtration_dict . values () for val in dimension_dict . values () } ) self . filtration_values . sort () # Recompute dimension self . dim = max ( self . filtration_dict , default =- 1 ) def get_complex ( self , height = None , max_dim = None ): \"\"\" Constructs and returns a Complex object that includes all blocks from the filtration whose height is less than or equal to the specified value. The construction can also be limited to a specified maximum dimension. Args: height (float or int, optional): The maximum filtration value to include. If None, the largest available filtration value is used. max_dim (int, optional): The maximum dimension to include in the complex. If None, the full dimension of the filtration is used. Returns: Complex: A Complex object containing all blocks up to the specified height and dimension. \"\"\" from InDelsTopo.complex import ( Complex , ) # pylint: disable=import-outside-toplevel if height is None : height = max ( self . filtration_values , default = np . inf ) if max_dim is None : max_dim = self . dim max_dim = min ( self . dim , max_dim ) complex_dict = { dim : [ block for block in self . filtration_dict [ dim ] if self . filtration_dict [ dim ][ block ] <= height ] for dim in range ( max_dim + 1 ) } for dim in range ( max_dim , - 1 , - 1 ): if len ( complex_dict [ dim ]) == 0 : del complex_dict [ dim ] else : break return Complex ( alphabet = self . _alphabet , prod_symbol = self . _prod_symbol , complex_dict = complex_dict , height = height , ) def get_euler_curve ( self , x_values = None ): \"\"\" This method evaluates the Euler characteristic of the complex at different filtration heights and returns the resulting curve as paired x- and y-values. Args: x_values (list of float or int, optional): Filtration heights at which to compute the Euler characteristic. If None, all existing filtration values are used. Returns: tuple: - list of float or int: Sorted filtration heights (x-values). - list of int: Corresponding Euler characteristic values (y-values). \"\"\" if x_values is None : x_values = self . filtration_values x_values . sort () y_values = [ self . get_complex ( h ) . euler_characteristic () for h in x_values ] return x_values , y_values def get_persistent_homology_barcodes ( self , max_dim = None , inf_value = np . inf , get_height_indices = False ): \"\"\" Compute persistent homology barcodes for the filtration using Z2 coefficients. The method performs a lower-star filtration on the complex according to the vertex heights and computes persistent homology up to the specified dimension. Args: max_dim (int, optional): Maximum dimension to compute accurately. The skeleton of dimension up to max_dim+1 is used for this computation if it was previously computed. If None or greater than the filtration's dimension, all dimensions are included. inf_value (float, optional): Value to assign to features that do not die within the filtration. Defaults to infinity. get_height_indices (bool, optional): If True, also return the indices corresponding to the birth and death heights in the filtration. Defaults to False. Returns: dict or tuple: - If `get_height_indices=False`: A dictionary mapping dimension `d` to a list of tuples `(birth, death)` representing persistent homology intervals. - If `get_height_indices=True`: A tuple of two dictionaries: 1. Barcodes as above. 2. Corresponding indices of birth and death heights in `filtration_values`. Notes: The algorithm uses a boundary matrix over Z2 and reduces it following the standard persistence algorithm (see arxiv:1506.08903). Features that never die are assigned `inf_value` as their death time. \"\"\" # Import csc_matrix from scipy.sparse import csc_matrix # pylint: disable=import-outside-toplevel if max_dim is None or max_dim >= self . dim : max_dim = self . dim using_skeleton = False elif max_dim == self . dim - 1 : max_dim = self . dim using_skeleton = True else : max_dim += 1 using_skeleton = True # Order the blocks according to their dimension and height ordered_blocks = [] for dimension in range ( max_dim + 1 ): ordered_blocks += self [ dimension ] ordered_blocks . sort ( key = lambda blk : ( self [ blk . dim ][ blk ], blk . dim )) ordered_blocks_dict = { ordered_blocks [ i ]: i for i in range ( len ( ordered_blocks ))} heights = [ self [ blk . dim ][ blk ] for blk in ordered_blocks ] # Construct the boundary matrix cols = [] rows = [] data = [] for id_col , blk in enumerate ( ordered_blocks ): facets = blk . get_all_facets () for facet in facets : cols . append ( id_col ) rows . append ( ordered_blocks_dict [ facet ]) data . append ( 1 ) N = len ( ordered_blocks ) boundary_matrix = csc_matrix (( data , ( rows , cols )), shape = ( N , N )) . tolil () # Perform row reduction (we follow the algorithm from # https://arxiv.org/pdf/1506.08903) low = [] # maps row index to pivot column index barcodes = {} if get_height_indices : barcodes_indices = {} height_indices = { self . filtration_values [ i ]: i for i in range ( len ( self . filtration_values )) } for j in range ( N ): col = boundary_matrix . getcol ( j ) if col . nnz > 0 : # Set initial value for low(j) low_j = col . nonzero ()[ 0 ][ - 1 ] while low_j in low : i = low . index ( low_j ) # add column i to column j col = col + boundary_matrix . getcol ( i ) col . data = col . data % 2 # Make adition modulo 2 col . eliminate_zeros () if col . nnz > 0 : low_j = col . nonzero ()[ 0 ][ - 1 ] # update low_j value else : low_j = - 1 break boundary_matrix [:, j ] = col # update column j in the matrix low . append ( low_j ) # Save value for low_j else : # Set -1, for undefined low(j) low . append ( - 1 ) # Extract (birth, death) pairs for j , low_j in enumerate ( low ): if low_j >= 0 : birth = heights [ low_j ] death = heights [ j ] if death > birth : dim = ordered_blocks [ low_j ] . dim if dim not in barcodes : barcodes [ dim ] = [] if get_height_indices : barcodes_indices [ dim ] = [] barcodes [ dim ] . append (( birth , death )) if get_height_indices : barcodes_indices [ dim ] . append ( ( height_indices [ birth ], height_indices [ death ]) ) elif j not in low : birth = heights [ j ] dim = ordered_blocks [ j ] . dim if dim not in barcodes : barcodes [ dim ] = [] if get_height_indices : barcodes_indices [ dim ] = [] barcodes [ dim ] . append (( birth , inf_value )) if get_height_indices : barcodes_indices [ dim ] . append (( height_indices [ birth ], np . inf )) if using_skeleton : if max_dim in barcodes : del barcodes [ max_dim ] if get_height_indices : del barcodes_indices [ max_dim ] if get_height_indices : return barcodes , barcodes_indices return barcodes def get_graph ( self , height = None , height_id = None , show_labels = True , max_dim = 5 , positions = None , initial_positions = None , fixed = None , recompute = False , colors_by_dim = None , ax = None , ): \"\"\" Generate a graphical representation of the filtration up to a specified dimension. Positions of vertices can be computed automatically or provided manually. Only accurate for low-dimensional complexes (typically dim <= 3). Args: height (float, optional): Maximum height value for including blocks in the graph. Defaults to the maximum filtration value. height_id (int, optional): Index into the sorted list of filtration values. Used if `height` is None. Defaults to None. show_labels (bool, optional): Whether to display labels on the vertices. Defaults to True. max_dim (int, optional): Maximum dimension of blocks to include in the graph. Defaults to 5. positions (dict, optional): Dictionary of vertex positions. If None, positions are computed automatically. Once computed, they are reused everytime this method is called, unless recompute is set to True. initial_positions (dict, optional): Initial positions used to seed the automatic layout algorithm. fixed (list or None, optional): List of vertex keys to fix in place when computing positions. Defaults to None. recompute (bool, optional): Whether to recompute vertex positions even if already stored. Defaults to False. colors_by_dim (list of str, optional): List of colors to use for each dimension. If None, defaults to ['black', 'gray', 'yellow', 'red', 'blue', 'purple']. ax (matplotlib.axes._subplots.Axes3DSubplot, optional): A Matplotlib Axes object to draw the plot on. If None, a new figure and axes are created. Defaults to None. Returns: matplotlib.axes.Axes: Matplotlib axes object containing the drawn graph. \"\"\" if self . dim == - 1 : return None if ( positions is None ) or recompute : if ( self . _positions_dict is None ) or recompute : self . _positions_dict = graphics . compute_vertex_positions ( self , pos0 = initial_positions , fixed = fixed ) # Make sure position includes all vertices elif any ( vertex not in self . _positions_dict for vertex in self [ 0 ]): # Update with pos0 if isinstance ( initial_positions , dict ): for vertex in initial_positions : self . _positions_dict [ vertex ] = initial_positions [ vertex ] # Compute for all vertices self . _positions_dict = graphics . compute_vertex_positions ( self , pos0 = self . _positions_dict , fixed = list ( self . _positions_dict . keys ()), ) # Get the positions positions = self . _positions_dict if height is None : try : height = self . filtration_values [ height_id ] except BaseException : height = max ( self . filtration_values , default = np . inf ) ax = graphics . make_graph ( self , pos = positions , show_labels = show_labels , max_dim = max_dim , height = height , already_complex = False , colors_by_dim = colors_by_dim , ax = ax , ) return ax def __str__ ( self ): to_print = \"Filtration of Insertion Chain Complexes: \\n \" to_print += \"alphabet: \" + str ( self . _alphabet ) + \". \\n \" try : filtration_values_range = ( \"[\" + str ( self . filtration_values [ 0 ]) + \",\" + str ( self . filtration_values [ - 1 ]) + \"]\" ) except BaseException : filtration_values_range = \"[]\" to_print += \"heights in: \" + filtration_values_range + \". \\n \" to_print += \"dimension: \" + str ( self . dim ) + \". \\n \" to_print += \"vertices: \" + str ( len ( self [ 0 ])) + \". \\n \" to_print += ( \"blocks: \" + str ( sum ([ len ( self [ k ]) for k in range ( self . dim + 1 )])) + \".\" ) return to_print def __repr__ ( self ): return self . __str__ () def __getitem__ ( self , key ): if 0 <= key <= self . dim : return self . filtration_dict [ key ] return {} def get_alphabet ( self ): \"\"\"Returns the alphabet attribute.\"\"\" return self . _alphabet def get_block_height ( self , block , already_block = False ): \"\"\" Returns the height of the block in the filtration or None if it is not in the filtration. Args: block (Block or string): A block to check its height. If `already_blocks` is False (default), it is assumed to be a string representing the block. If True, it is assumed to be an existing Block object. already_block (bool, optional): If True, `block` is assumed to be a valid Block object. If False (default), the method attempts to convert the input into a block. \"\"\" # Convert into blocks if needed if not already_block : block = Block ( block , prod_symbol = self . _prod_symbol , alphabet = self . _alphabet ) dim = block . dim if block in self [ dim ]: return self [ dim ][ block ] return None","title":"Filtration"},{"location":"reference/#InDelsTopo.Filtration.__init__","text":"Returns an empty Filtration object. Parameters: alphabet ( Alphabet , default: None ) \u2013 Alphabet object defining valid symbols. If None, a new empty Alphabet is created. prod_symbol ( str , default: None ) \u2013 The product symbol to use. Must be one of {'', ' ', '.'}. If None, it is inferred from the expression: set to ' ' if '*' appears, to '.' if '.' appears, or to '' (concatenation) otherwise. Source code in InDelsTopo/filtration.py 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 def __init__ ( self , alphabet = None , prod_symbol = None ): \"\"\" Returns an empty Filtration object. Args: alphabet (Alphabet, optional): Alphabet object defining valid symbols. If None, a new empty `Alphabet` is created. prod_symbol (str, optional): The product symbol to use. Must be one of {'', '*', '.'}. If None, it is inferred from the expression: set to '*' if '*' appears, to '.' if '.' appears, or to '' (concatenation) otherwise. \"\"\" # User inputs self . _alphabet = alphabet self . _prod_symbol = prod_symbol # Filtration data self . dim = - 1 self . filtration_dict = {} self . filtration_values = [] # Used when creating a graph self . _positions_dict = None","title":"__init__"},{"location":"reference/#InDelsTopo.Filtration.add_blocks","text":"Add new blocks to the Filtration. Extends the current Filtration by inserting additional blocks and their faces. This method allows dynamically modifying an existing filtration while ensuring, as much as possible, that the result remains a valid filtration (i.e., if \u03b1 \u2264 \u03b2, then F.get_complex(\u03b1) \u2286 F.get_complex(\u03b2)). Intended for expert use only, since the resulting structure may not always be a full Insertion Chain Complex C[W], but rather a subcomplex if some supporting blocks are missing. The result may depend on the order in which the blocks are provided. The behavior depends on the value of update_values : - If ``update_values=True``, the heights of existing faces and super-faces are updated as needed to maintain the filtration property. This ensures that the new blocks can be inserted with the provided heights. - If ``update_values=False`` (default), the method adds the blocks only if their heights are consistent with the current filtration. Otherwise, the maximum among the heights of their faces is used instead. Parameters: list_blocks ( list [ Block ] or list [ str ] ) \u2013 List of blocks to be added to the Filtration. If already_blocks is False (default), the elements are assumed to be strings representing blocks and will be converted. If True, they are assumed to be existing Block objects. list_heights ( list [ float ] or float or None , default: None ) \u2013 Heights assigned to each block. If a single numeric value is provided, it is used for all blocks. If None, all blocks receive height 1. prod_symbol ( str or None , default: None ) \u2013 Product symbol used in block representation (e.g., '*', '.', or ''). If not specified, it is inferred from the input blocks. already_blocks ( bool , default: False ) \u2013 If True, elements of list_blocks are assumed to be valid Block objects. If False (default), the method attempts to convert the input into blocks. update_values ( bool , default: False ) \u2013 If True, existing heights of faces and super-faces are updated as needed to maintain consistency when inserting the new blocks. If False (default), only new faces are added and the provided heights are applied when valid; otherwise, the lowest consistent height is used instead. Raises: ValueError \u2013 If list_heights is a list whose length does not match list_blocks . If list_heights is not a list, a numeric value, or None. If the height of a block is lower than the height of one of its faces already present in the filtration (when update_values=False ). Notes The internal alphabet and product symbol are updated to ensure consistency. The resulting filtration may vary depending on the order in which blocks are inserted. Updating an existing filtration in this way may be more computationally expensive than reconstructing a new Filtration directly from a set of words. Source code in InDelsTopo/filtration.pydef add_blocks ( self , list_blocks , list_heights = None , prod_symbol = None , already_blocks = False , update_values = False , ): \"\"\" Add new blocks to the Filtration. Extends the current Filtration by inserting additional blocks and their faces. This method allows dynamically modifying an existing filtration while ensuring, as much as possible, that the result remains a valid filtration (i.e., if \u03b1 \u2264 \u03b2, then F.get_complex(\u03b1) \u2286 F.get_complex(\u03b2)). Intended for expert use only, since the resulting structure may not always be a full Insertion Chain Complex C[W], but rather a subcomplex if some supporting blocks are missing. The result may depend on the order in which the blocks are provided. The behavior depends on the value of ``update_values``: - If ``update_values=True``, the heights of existing faces and super-faces are updated as needed to maintain the filtration property. This ensures that the new blocks can be inserted with the provided heights. - If ``update_values=False`` (default), the method adds the blocks only if their heights are consistent with the current filtration. Otherwise, the maximum among the heights of their faces is used instead. Args: list_blocks (list[Block] or list[str]): List of blocks to be added to the Filtration. If ``already_blocks`` is False (default), the elements are assumed to be strings representing blocks and will be converted. If True, they are assumed to be existing ``Block`` objects. list_heights (list[float] or float or None, optional): Heights assigned to each block. If a single numeric value is provided, it is used for all blocks. If None, all blocks receive height 1. prod_symbol (str or None, optional): Product symbol used in block representation (e.g., '*', '.', or ''). If not specified, it is inferred from the input blocks. already_blocks (bool, optional): If True, elements of ``list_blocks`` are assumed to be valid ``Block`` objects. If False (default), the method attempts to convert the input into blocks. update_values (bool, optional): If True, existing heights of faces and super-faces are updated as needed to maintain consistency when inserting the new blocks. If False (default), only new faces are added and the provided heights are applied when valid; otherwise, the lowest consistent height is used instead. Raises: ValueError: - If ``list_heights`` is a list whose length does not match ``list_blocks``. - If ``list_heights`` is not a list, a numeric value, or None. - If the height of a block is lower than the height of one of its faces already present in the filtration (when ``update_values=False``). Notes: - The internal alphabet and product symbol are updated to ensure consistency. - The resulting filtration may vary depending on the order in which blocks are inserted. - Updating an existing filtration in this way may be more computationally expensive than reconstructing a new Filtration directly from a set of words. \"\"\" # Convert into blocks if needed if already_blocks : alphabet = _combine_blocks_alphabet ( list_blocks , self . _alphabet ) else : list_blocks , alphabet , prod_symbol = _convert_words_to_blocks ( list_blocks , prod_symbol = prod_symbol , alphabet = self . _alphabet ) self . _alphabet = alphabet # Uniformalize prod_symbols pylint: disable=protected-access new_prods = [ blk . _prod_symbol for blk in list_blocks ] + [ self . _prod_symbol ] if \"*\" in new_prods : prod_symbol = \"*\" elif \".\" in new_prods : prod_symbol = \".\" else : prod_symbol = \"\" self . _prod_symbol = prod_symbol for blk in list_blocks : blk . _prod_symbol = self . _prod_symbol if list_heights is None : list_heights = [ 1 ] * len ( list_blocks ) elif isinstance ( list_heights , list ): # Check lengths agree if len ( list_blocks ) != len ( list_heights ): raise ValueError ( \"list_heights must be same length as list_blocks\" ) else : try : height = float ( list_heights ) list_heights = [ height ] * len ( list_blocks ) except BaseException : raise ValueError ( \"list_heights must be a list, a numeric value, or None\" ) for block , height in zip ( list_blocks , list_heights ): dim = block . dim # Ensure a dictionary exists for this dimension if dim not in self . filtration_dict : self . filtration_dict [ dim ] = {} # Add or update the main block current_height = self . filtration_dict [ dim ] . get ( block ) if current_height is None or update_values : self . filtration_dict [ dim ][ block ] = height # Update or add all faces for face in block . get_all_faces ( include_self = False ): f_dim = face . dim if f_dim not in self . filtration_dict : self . filtration_dict [ f_dim ] = {} current_height = self . filtration_dict [ f_dim ] . get ( face ) if current_height is None : # New face \u2014 assign current block's height self . filtration_dict [ f_dim ][ face ] = height elif update_values : # Keep the lowest (earliest) height to preserve filtration # order self . filtration_dict [ f_dim ][ face ] = min ( current_height , height ) # Recompute dimension self . dim = max ( self . filtration_dict , default =- 1 ) # Fix values so the result is a filtration for dim in range ( 1 , self . dim + 1 ): for block in self . filtration_dict [ dim ]: facets = block . get_all_facets () all_heights = [ self . filtration_dict [ dim ][ block ]] + [ self . filtration_dict [ dim - 1 ][ facet ] for facet in facets ] new_height = max ( all_heights ) self . filtration_dict [ dim ][ block ] = new_height # Add filtration values self . filtration_values += list_heights self . filtration_values = list ( set ( self . filtration_values )) self . filtration_values . sort ()","title":"add_blocks"},{"location":"reference/#InDelsTopo.Filtration.compute_d_skeleton","text":"Compute the d-skeleton of the Insertion Chain Complex generated by a set of words, C[W]. This method replaces any existing data in the Filtration with a new complex supported on W . This method constructs all valid blocks up to the specified maximum dimension ( max_dim ) for a given set of words W with associated heights. It begins by computing the 0- and 1-skeletons (vertices and edges), then iteratively extends to higher dimensions. It updates the internal filtration_dict to the blocks supported on W . Parameters: W ( list of str or Block ) \u2013 List of words (or blocks, if already_blocks=True ) forming the base of the complex. heights ( list of float , default: None ) \u2013 Height values associated with each word. If None, defaults to ones. max_dim ( int , default: 10 ) \u2013 Maximum dimension of the skeleton to compute. Defaults to 10. alphabet ( Alphabet , default: None ) \u2013 Alphabet object used together with the internal self._alphabet and any letters inferred from W . If provided, its symbols are merged with self._alphabet ; otherwise, the new symbols are inferred entirely from the given words. prod_symbol ( str , default: None ) \u2013 Product symbol for block construction ('*', '.', or ''). If None, inferred automatically. check_duplicates ( bool , default: True ) \u2013 Whether to verify that input words are unique. Defaults to True. already_blocks ( bool , default: False ) \u2013 If True, assumes the input W is already a list of Block objects instead of strings. Defaults to False. verbose ( bool , default: False ) \u2013 If True, prints progress information during computation. Example W = ['a b', 'a b b', 'a a b',''] K = Filtration() K.compute_d_skeleton(W, heights=[0.1, 0.3, 0.2,0.4], max_dim=2) K[1] {a b (1,b): 0.3, a (1,a)*b: 0.2} Source code in InDelsTopo/filtration.pydef compute_d_skeleton ( self , W , heights = None , max_dim = 10 , alphabet = None , prod_symbol = None , check_duplicates = True , already_blocks = False , verbose = False , ): \"\"\" Compute the d-skeleton of the Insertion Chain Complex generated by a set of words, C[W]. This method replaces any existing data in the Filtration with a new complex supported on `W`. This method constructs all valid blocks up to the specified maximum dimension (`max_dim`) for a given set of words `W` with associated heights. It begins by computing the 0- and 1-skeletons (vertices and edges), then iteratively extends to higher dimensions. It updates the internal `filtration_dict` to the blocks supported on `W`. Args: W (list of str or Block): List of words (or blocks, if `already_blocks=True`) forming the base of the complex. heights (list of float, optional): Height values associated with each word. If None, defaults to ones. max_dim (int, optional): Maximum dimension of the skeleton to compute. Defaults to 10. alphabet (Alphabet, optional): Alphabet object used together with the internal `self._alphabet` and any letters inferred from `W`. If provided, its symbols are merged with `self._alphabet`; otherwise, the new symbols are inferred entirely from the given words. prod_symbol (str, optional): Product symbol for block construction ('*', '.', or ''). If None, inferred automatically. check_duplicates (bool, optional): Whether to verify that input words are unique. Defaults to True. already_blocks (bool, optional): If True, assumes the input `W` is already a list of `Block` objects instead of strings. Defaults to False. verbose (bool, optional): If True, prints progress information during computation. Example: >>> W = ['a*b', 'a*b*b', 'a*a*b',''] >>> K = Filtration() >>> K.compute_d_skeleton(W, heights=[0.1, 0.3, 0.2,0.4], max_dim=2) >>> K[1] {a*b*(1,b): 0.3, a*(1,a)*b: 0.2} \"\"\" if heights is None : heights = [ 1 ] * len ( W ) else : if len ( heights ) != len ( W ): raise ValueError ( \"List of heighst must be same length as list of words, or None\" ) self . filtration_values = list ( set ( heights )) self . filtration_values . sort () # Restart dictionaries self . filtration_dict = {} # Used when computing the d-skeleton self . _incidence_dict = {} # Compute one Skeleton self . _compute_one_skeleton ( W , heights , already_blocks , max_dim , alphabet , prod_symbol , verbose , check_duplicates , ) if max_dim == 1 : self . dim = max ( self . filtration_dict ) return dim = 2 while ( dim <= max_dim ) and len ( self . _incidence_dict [ dim - 1 ]) > 0 : if verbose : print ( \" \\u2705\\n Computing dimension\" , dim , end = \"\" ) self . _incidence_dict [ dim ] = dict () for word in self . _incidence_dict [ dim - 1 ]: indices = self . _incidence_dict [ dim - 1 ][ word ] possible_indices = _candidate_indices_next ( indices ) for k_indices in possible_indices : lower_facets_pairs = self . _lower_facets_maximal_word_as_pairs ( word , k_indices , True ) # Check if lower_facets are all there all_facets_bool = True for w_max , indices_face in lower_facets_pairs : if ( w_max in self . _incidence_dict [ dim - 1 ] and indices_face in self . _incidence_dict [ dim - 1 ][ w_max ] ): continue else : all_facets_bool = False break if all_facets_bool : # Add to incidence dictionary if word in self . _incidence_dict [ dim ]: self . _incidence_dict [ dim ][ word ] . append ( k_indices ) else : self . _incidence_dict [ dim ][ word ] = [ k_indices ] # Compute height of block and add facets = self . _facets_maximal_word ( word , k_indices , which = \"all\" , casted = True ) height = max ( [ self . filtration_dict [ dim - 1 ][ blk ] for blk in facets ] ) block = self . _block_maximal_word ( word , k_indices , True ) if dim in self . filtration_dict : self . filtration_dict [ dim ][ block ] = height else : self . filtration_dict [ dim ] = { block : height } dim += 1 self . dim = max ( self . filtration_dict ) if verbose : print ( \" \\u274C \" ) del self . _incidence_dict","title":"compute_d_skeleton"},{"location":"reference/#InDelsTopo.Filtration.get_alphabet","text":"Returns the alphabet attribute. Source code in InDelsTopo/filtration.py 1215 1216 1217 def get_alphabet ( self ): \"\"\"Returns the alphabet attribute.\"\"\" return self . _alphabet","title":"get_alphabet"},{"location":"reference/#InDelsTopo.Filtration.get_block_height","text":"Returns the height of the block in the filtration or None if it is not in the filtration. Parameters: block ( Block or string ) \u2013 A block to check its height. If already_blocks is False (default), already_block ( bool , default: False ) \u2013 If True, block is assumed to be a valid Block object. If False (default), the method attempts to convert the input into a block. Source code in InDelsTopo/filtration.py 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 def get_block_height ( self , block , already_block = False ): \"\"\" Returns the height of the block in the filtration or None if it is not in the filtration. Args: block (Block or string): A block to check its height. If `already_blocks` is False (default), it is assumed to be a string representing the block. If True, it is assumed to be an existing Block object. already_block (bool, optional): If True, `block` is assumed to be a valid Block object. If False (default), the method attempts to convert the input into a block. \"\"\" # Convert into blocks if needed if not already_block : block = Block ( block , prod_symbol = self . _prod_symbol , alphabet = self . _alphabet ) dim = block . dim if block in self [ dim ]: return self [ dim ][ block ] return None","title":"get_block_height"},{"location":"reference/#InDelsTopo.Filtration.get_complex","text":"Constructs and returns a Complex object that includes all blocks from the filtration whose height is less than or equal to the specified value. The construction can also be limited to a specified maximum dimension. Parameters: height ( float or int , default: None ) \u2013 The maximum filtration value to include. If None, the largest available filtration value is used. max_dim ( int , default: None ) \u2013 The maximum dimension to include in the complex. If None, the full dimension of the filtration is used. Returns: Complex \u2013 A Complex object containing all blocks up to the specified height and dimension. Source code in InDelsTopo/filtration.py 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 def get_complex ( self , height = None , max_dim = None ): \"\"\" Constructs and returns a Complex object that includes all blocks from the filtration whose height is less than or equal to the specified value. The construction can also be limited to a specified maximum dimension. Args: height (float or int, optional): The maximum filtration value to include. If None, the largest available filtration value is used. max_dim (int, optional): The maximum dimension to include in the complex. If None, the full dimension of the filtration is used. Returns: Complex: A Complex object containing all blocks up to the specified height and dimension. \"\"\" from InDelsTopo.complex import ( Complex , ) # pylint: disable=import-outside-toplevel if height is None : height = max ( self . filtration_values , default = np . inf ) if max_dim is None : max_dim = self . dim max_dim = min ( self . dim , max_dim ) complex_dict = { dim : [ block for block in self . filtration_dict [ dim ] if self . filtration_dict [ dim ][ block ] <= height ] for dim in range ( max_dim + 1 ) } for dim in range ( max_dim , - 1 , - 1 ): if len ( complex_dict [ dim ]) == 0 : del complex_dict [ dim ] else : break return Complex ( alphabet = self . _alphabet , prod_symbol = self . _prod_symbol , complex_dict = complex_dict , height = height , )","title":"get_complex"},{"location":"reference/#InDelsTopo.Filtration.get_euler_curve","text":"This method evaluates the Euler characteristic of the complex at different filtration heights and returns the resulting curve as paired x- and y-values. Parameters: x_values ( list of float or int , default: None ) \u2013 Filtration heights at which to compute the Euler characteristic. If None, all existing filtration values are used. Returns: tuple \u2013 list of float or int: Sorted filtration heights (x-values). list of int: Corresponding Euler characteristic values (y-values). Source code in InDelsTopo/filtration.py 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 def get_euler_curve ( self , x_values = None ): \"\"\" This method evaluates the Euler characteristic of the complex at different filtration heights and returns the resulting curve as paired x- and y-values. Args: x_values (list of float or int, optional): Filtration heights at which to compute the Euler characteristic. If None, all existing filtration values are used. Returns: tuple: - list of float or int: Sorted filtration heights (x-values). - list of int: Corresponding Euler characteristic values (y-values). \"\"\" if x_values is None : x_values = self . filtration_values x_values . sort () y_values = [ self . get_complex ( h ) . euler_characteristic () for h in x_values ] return x_values , y_values","title":"get_euler_curve"},{"location":"reference/#InDelsTopo.Filtration.get_graph","text":"Generate a graphical representation of the filtration up to a specified dimension. Positions of vertices can be computed automatically or provided manually. Only accurate for low-dimensional complexes (typically dim <= 3). Parameters: height ( float , default: None ) \u2013 Maximum height value for including blocks in the graph. Defaults to the maximum filtration value. height_id ( int , default: None ) \u2013 Index into the sorted list of filtration values. Used if height is None. Defaults to None. show_labels ( bool , default: True ) \u2013 Whether to display labels on the vertices. Defaults to True. max_dim ( int , default: 5 ) \u2013 Maximum dimension of blocks to include in the graph. Defaults to 5. positions ( dict , default: None ) \u2013 Dictionary of vertex positions. If None, positions are computed automatically. Once computed, they are reused everytime this method is called, unless recompute is set to True. initial_positions ( dict , default: None ) \u2013 Initial positions used to seed the automatic layout algorithm. fixed ( list or None , default: None ) \u2013 List of vertex keys to fix in place when computing positions. Defaults to None. recompute ( bool , default: False ) \u2013 Whether to recompute vertex positions even if already stored. Defaults to False. colors_by_dim ( list of str , default: None ) \u2013 List of colors to use for each dimension. If None, defaults to ['black', 'gray', 'yellow', 'red', 'blue', 'purple']. ax ( Axes3DSubplot , default: None ) \u2013 A Matplotlib Axes object to draw the plot on. If None, a new figure and axes are created. Defaults to None. Returns: \u2013 matplotlib.axes.Axes: Matplotlib axes object containing the drawn graph. Source code in InDelsTopo/filtration.py 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 def get_graph ( self , height = None , height_id = None , show_labels = True , max_dim = 5 , positions = None , initial_positions = None , fixed = None , recompute = False , colors_by_dim = None , ax = None , ): \"\"\" Generate a graphical representation of the filtration up to a specified dimension. Positions of vertices can be computed automatically or provided manually. Only accurate for low-dimensional complexes (typically dim <= 3). Args: height (float, optional): Maximum height value for including blocks in the graph. Defaults to the maximum filtration value. height_id (int, optional): Index into the sorted list of filtration values. Used if `height` is None. Defaults to None. show_labels (bool, optional): Whether to display labels on the vertices. Defaults to True. max_dim (int, optional): Maximum dimension of blocks to include in the graph. Defaults to 5. positions (dict, optional): Dictionary of vertex positions. If None, positions are computed automatically. Once computed, they are reused everytime this method is called, unless recompute is set to True. initial_positions (dict, optional): Initial positions used to seed the automatic layout algorithm. fixed (list or None, optional): List of vertex keys to fix in place when computing positions. Defaults to None. recompute (bool, optional): Whether to recompute vertex positions even if already stored. Defaults to False. colors_by_dim (list of str, optional): List of colors to use for each dimension. If None, defaults to ['black', 'gray', 'yellow', 'red', 'blue', 'purple']. ax (matplotlib.axes._subplots.Axes3DSubplot, optional): A Matplotlib Axes object to draw the plot on. If None, a new figure and axes are created. Defaults to None. Returns: matplotlib.axes.Axes: Matplotlib axes object containing the drawn graph. \"\"\" if self . dim == - 1 : return None if ( positions is None ) or recompute : if ( self . _positions_dict is None ) or recompute : self . _positions_dict = graphics . compute_vertex_positions ( self , pos0 = initial_positions , fixed = fixed ) # Make sure position includes all vertices elif any ( vertex not in self . _positions_dict for vertex in self [ 0 ]): # Update with pos0 if isinstance ( initial_positions , dict ): for vertex in initial_positions : self . _positions_dict [ vertex ] = initial_positions [ vertex ] # Compute for all vertices self . _positions_dict = graphics . compute_vertex_positions ( self , pos0 = self . _positions_dict , fixed = list ( self . _positions_dict . keys ()), ) # Get the positions positions = self . _positions_dict if height is None : try : height = self . filtration_values [ height_id ] except BaseException : height = max ( self . filtration_values , default = np . inf ) ax = graphics . make_graph ( self , pos = positions , show_labels = show_labels , max_dim = max_dim , height = height , already_complex = False , colors_by_dim = colors_by_dim , ax = ax , ) return ax","title":"get_graph"},{"location":"reference/#InDelsTopo.Filtration.get_persistent_homology_barcodes","text":"Compute persistent homology barcodes for the filtration using Z2 coefficients. The method performs a lower-star filtration on the complex according to the vertex heights and computes persistent homology up to the specified dimension. Parameters: max_dim ( int , default: None ) \u2013 Maximum dimension to compute accurately. The skeleton of dimension up to max_dim+1 is used for this computation if it was previously computed. If None or greater than the filtration's dimension, all dimensions are included. inf_value ( float , default: inf ) \u2013 Value to assign to features that do not die within the filtration. Defaults to infinity. get_height_indices ( bool , default: False ) \u2013 If True, also return the indices corresponding to the birth and death heights in the filtration. Defaults to False. Returns: \u2013 dict or tuple: - If get_height_indices=False : A dictionary mapping dimension d to a list of tuples (birth, death) representing persistent homology intervals. - If get_height_indices=True : A tuple of two dictionaries: 1. Barcodes as above. 2. Corresponding indices of birth and death heights in filtration_values . Notes The algorithm uses a boundary matrix over Z2 and reduces it following the standard persistence algorithm (see arxiv:1506.08903). Features that never die are assigned inf_value as their death time. Source code in InDelsTopo/filtration.py 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 def get_persistent_homology_barcodes ( self , max_dim = None , inf_value = np . inf , get_height_indices = False ): \"\"\" Compute persistent homology barcodes for the filtration using Z2 coefficients. The method performs a lower-star filtration on the complex according to the vertex heights and computes persistent homology up to the specified dimension. Args: max_dim (int, optional): Maximum dimension to compute accurately. The skeleton of dimension up to max_dim+1 is used for this computation if it was previously computed. If None or greater than the filtration's dimension, all dimensions are included. inf_value (float, optional): Value to assign to features that do not die within the filtration. Defaults to infinity. get_height_indices (bool, optional): If True, also return the indices corresponding to the birth and death heights in the filtration. Defaults to False. Returns: dict or tuple: - If `get_height_indices=False`: A dictionary mapping dimension `d` to a list of tuples `(birth, death)` representing persistent homology intervals. - If `get_height_indices=True`: A tuple of two dictionaries: 1. Barcodes as above. 2. Corresponding indices of birth and death heights in `filtration_values`. Notes: The algorithm uses a boundary matrix over Z2 and reduces it following the standard persistence algorithm (see arxiv:1506.08903). Features that never die are assigned `inf_value` as their death time. \"\"\" # Import csc_matrix from scipy.sparse import csc_matrix # pylint: disable=import-outside-toplevel if max_dim is None or max_dim >= self . dim : max_dim = self . dim using_skeleton = False elif max_dim == self . dim - 1 : max_dim = self . dim using_skeleton = True else : max_dim += 1 using_skeleton = True # Order the blocks according to their dimension and height ordered_blocks = [] for dimension in range ( max_dim + 1 ): ordered_blocks += self [ dimension ] ordered_blocks . sort ( key = lambda blk : ( self [ blk . dim ][ blk ], blk . dim )) ordered_blocks_dict = { ordered_blocks [ i ]: i for i in range ( len ( ordered_blocks ))} heights = [ self [ blk . dim ][ blk ] for blk in ordered_blocks ] # Construct the boundary matrix cols = [] rows = [] data = [] for id_col , blk in enumerate ( ordered_blocks ): facets = blk . get_all_facets () for facet in facets : cols . append ( id_col ) rows . append ( ordered_blocks_dict [ facet ]) data . append ( 1 ) N = len ( ordered_blocks ) boundary_matrix = csc_matrix (( data , ( rows , cols )), shape = ( N , N )) . tolil () # Perform row reduction (we follow the algorithm from # https://arxiv.org/pdf/1506.08903) low = [] # maps row index to pivot column index barcodes = {} if get_height_indices : barcodes_indices = {} height_indices = { self . filtration_values [ i ]: i for i in range ( len ( self . filtration_values )) } for j in range ( N ): col = boundary_matrix . getcol ( j ) if col . nnz > 0 : # Set initial value for low(j) low_j = col . nonzero ()[ 0 ][ - 1 ] while low_j in low : i = low . index ( low_j ) # add column i to column j col = col + boundary_matrix . getcol ( i ) col . data = col . data % 2 # Make adition modulo 2 col . eliminate_zeros () if col . nnz > 0 : low_j = col . nonzero ()[ 0 ][ - 1 ] # update low_j value else : low_j = - 1 break boundary_matrix [:, j ] = col # update column j in the matrix low . append ( low_j ) # Save value for low_j else : # Set -1, for undefined low(j) low . append ( - 1 ) # Extract (birth, death) pairs for j , low_j in enumerate ( low ): if low_j >= 0 : birth = heights [ low_j ] death = heights [ j ] if death > birth : dim = ordered_blocks [ low_j ] . dim if dim not in barcodes : barcodes [ dim ] = [] if get_height_indices : barcodes_indices [ dim ] = [] barcodes [ dim ] . append (( birth , death )) if get_height_indices : barcodes_indices [ dim ] . append ( ( height_indices [ birth ], height_indices [ death ]) ) elif j not in low : birth = heights [ j ] dim = ordered_blocks [ j ] . dim if dim not in barcodes : barcodes [ dim ] = [] if get_height_indices : barcodes_indices [ dim ] = [] barcodes [ dim ] . append (( birth , inf_value )) if get_height_indices : barcodes_indices [ dim ] . append (( height_indices [ birth ], np . inf )) if using_skeleton : if max_dim in barcodes : del barcodes [ max_dim ] if get_height_indices : del barcodes_indices [ max_dim ] if get_height_indices : return barcodes , barcodes_indices return barcodes","title":"get_persistent_homology_barcodes"},{"location":"reference/#InDelsTopo.Filtration.remove_blocks","text":"Remove blocks from the Filtration. Deletes specified blocks and optionally their super-faces from the Complex. Intended for expert use only, since the resulting structure may not be a full Insertion Chain Complex C[W], but rather a subcomplex if some supported blocks are missing. Parameters: list_blocks ( list of Block or string ) \u2013 A list of blocks to remove. If already_blocks is False (default), the elements are assumed to be strings representing blocks and will be converted. If True, they are assumed to be existing Block objects. prod_symbol ( str or None , default: None ) \u2013 Product symbol used in block representation ( '*', '.', or ''). If not specified, it is inferred from the input blocks. include_upfaces ( bool , default: True ) \u2013 If True, all super faces of the specified blocks are also removed, so the result is a subcomplex. Default is True. already_blocks ( bool , default: False ) \u2013 If True, the elements of list_blocks are assumed to be valid Block objects. If False (default), the method attempts to convert the input into blocks. Source code in InDelsTopo/filtration.py 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 def remove_blocks ( self , list_blocks , prod_symbol = None , include_upfaces = True , already_blocks = False ): \"\"\" Remove blocks from the Filtration. Deletes specified blocks and optionally their super-faces from the Complex. Intended for expert use only, since the resulting structure may not be a full Insertion Chain Complex C[W], but rather a subcomplex if some supported blocks are missing. Args: list_blocks (list of Block or string): A list of blocks to remove. If `already_blocks` is False (default), the elements are assumed to be strings representing blocks and will be converted. If True, they are assumed to be existing Block objects. prod_symbol (str or None, optional): Product symbol used in block representation ( '*', '.', or ''). If not specified, it is inferred from the input blocks. include_upfaces (bool, optional): If True, all super faces of the specified blocks are also removed, so the result is a subcomplex. Default is True. already_blocks (bool, optional): If True, the elements of `list_blocks` are assumed to be valid Block objects. If False (default), the method attempts to convert the input into blocks. \"\"\" # Make sure it is a list if not isinstance ( list_blocks , list ): raise TypeError ( \"list_blocks must be a list\" ) # Convert into blocks if needed if not already_blocks : list_blocks , _alphabet , prod_symbol = _convert_words_to_blocks ( list_blocks , prod_symbol = prod_symbol , alphabet = self . _alphabet ) # Dictionary of blocks to remove blocks_to_remove = { i : [] for i in range ( self . dim + 1 )} for block in list_blocks : if ( block . dim in self . filtration_dict and block in self . filtration_dict [ block . dim ] ): blocks_to_remove [ block . dim ] . append ( block ) # Find super-faces if needed if include_upfaces : for dimension in range ( 1 , self . dim + 1 ): for block in self . filtration_dict [ dimension ]: facets = block . get_all_facets () if any ( facet in blocks_to_remove [ dimension - 1 ] for facet in facets ): blocks_to_remove [ dimension ] . append ( block ) # Remove blocks for dimension in blocks_to_remove : for block in blocks_to_remove [ dimension ]: if block in self . filtration_dict [ dimension ]: del self . filtration_dict [ dimension ][ block ] # Update filtration_dict for dimension in range ( self . dim , - 1 , - 1 ): if len ( self . filtration_dict [ dimension ]) == 0 : del self . filtration_dict [ dimension ] else : break # Update filtration values self . filtration_values = list ( { val for dimension_dict in self . filtration_dict . values () for val in dimension_dict . values () } ) self . filtration_values . sort () # Recompute dimension self . dim = max ( self . filtration_dict , default =- 1 )","title":"remove_blocks"}]}